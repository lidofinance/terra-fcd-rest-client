// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostTxsBodyTxSignature post txs body tx signature
//
// swagger:model postTxsBody.tx.signature
type PostTxsBodyTxSignature struct {

	// tx signature
	// Required: true
	AccountNumber *string `json:"account_number"`

	// tx signature
	// Required: true
	PubKey *PostTxsBodyTxSignaturePubKey `json:"pub_key"`

	// tx sequence of the account
	// Required: true
	Sequence *string `json:"sequence"`

	// tx signature
	// Required: true
	Signature *string `json:"signature"`
}

// Validate validates this post txs body tx signature
func (m *PostTxsBodyTxSignature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePubKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostTxsBodyTxSignature) validateAccountNumber(formats strfmt.Registry) error {

	if err := validate.Required("account_number", "body", m.AccountNumber); err != nil {
		return err
	}

	return nil
}

func (m *PostTxsBodyTxSignature) validatePubKey(formats strfmt.Registry) error {

	if err := validate.Required("pub_key", "body", m.PubKey); err != nil {
		return err
	}

	if m.PubKey != nil {
		if err := m.PubKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pub_key")
			}
			return err
		}
	}

	return nil
}

func (m *PostTxsBodyTxSignature) validateSequence(formats strfmt.Registry) error {

	if err := validate.Required("sequence", "body", m.Sequence); err != nil {
		return err
	}

	return nil
}

func (m *PostTxsBodyTxSignature) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this post txs body tx signature based on the context it is used
func (m *PostTxsBodyTxSignature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePubKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostTxsBodyTxSignature) contextValidatePubKey(ctx context.Context, formats strfmt.Registry) error {

	if m.PubKey != nil {
		if err := m.PubKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pub_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostTxsBodyTxSignature) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostTxsBodyTxSignature) UnmarshalBinary(b []byte) error {
	var res PostTxsBodyTxSignature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
