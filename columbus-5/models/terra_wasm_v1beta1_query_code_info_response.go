// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TerraWasmV1beta1QueryCodeInfoResponse QueryCodeInfoResponse is response type for the
// QueryyCodeInfo RPC method.
//
// swagger:model terra.wasm.v1beta1.QueryCodeInfoResponse
type TerraWasmV1beta1QueryCodeInfoResponse struct {

	// code info
	CodeInfo *TerraWasmV1beta1QueryCodeInfoResponseCodeInfo `json:"code_info,omitempty"`
}

// Validate validates this terra wasm v1beta1 query code info response
func (m *TerraWasmV1beta1QueryCodeInfoResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCodeInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraWasmV1beta1QueryCodeInfoResponse) validateCodeInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CodeInfo) { // not required
		return nil
	}

	if m.CodeInfo != nil {
		if err := m.CodeInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("code_info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this terra wasm v1beta1 query code info response based on the context it is used
func (m *TerraWasmV1beta1QueryCodeInfoResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCodeInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraWasmV1beta1QueryCodeInfoResponse) contextValidateCodeInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CodeInfo != nil {
		if err := m.CodeInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("code_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TerraWasmV1beta1QueryCodeInfoResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraWasmV1beta1QueryCodeInfoResponse) UnmarshalBinary(b []byte) error {
	var res TerraWasmV1beta1QueryCodeInfoResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TerraWasmV1beta1QueryCodeInfoResponseCodeInfo CodeInfo is data for the uploaded contract WASM code
//
// swagger:model TerraWasmV1beta1QueryCodeInfoResponseCodeInfo
type TerraWasmV1beta1QueryCodeInfoResponseCodeInfo struct {

	// CodeHash is the unique identifier created by wasmvm
	// Format: byte
	CodeHash strfmt.Base64 `json:"code_hash,omitempty"`

	// CodeID is the sequentially increasing unique identifier
	CodeID string `json:"code_id,omitempty"`

	// Creator address who initially stored the code
	Creator string `json:"creator,omitempty"`
}

// Validate validates this terra wasm v1beta1 query code info response code info
func (m *TerraWasmV1beta1QueryCodeInfoResponseCodeInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this terra wasm v1beta1 query code info response code info based on context it is used
func (m *TerraWasmV1beta1QueryCodeInfoResponseCodeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TerraWasmV1beta1QueryCodeInfoResponseCodeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraWasmV1beta1QueryCodeInfoResponseCodeInfo) UnmarshalBinary(b []byte) error {
	var res TerraWasmV1beta1QueryCodeInfoResponseCodeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
