// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VestingSchedule vesting schedule
//
// swagger:model VestingSchedule
type VestingSchedule struct {

	// denom
	// Example: usdr
	Denom string `json:"denom,omitempty"`

	// lazy schedules
	LazySchedules []*VestingScheduleLazySchedulesItems0 `json:"lazy_schedules"`
}

// Validate validates this vesting schedule
func (m *VestingSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLazySchedules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VestingSchedule) validateLazySchedules(formats strfmt.Registry) error {
	if swag.IsZero(m.LazySchedules) { // not required
		return nil
	}

	for i := 0; i < len(m.LazySchedules); i++ {
		if swag.IsZero(m.LazySchedules[i]) { // not required
			continue
		}

		if m.LazySchedules[i] != nil {
			if err := m.LazySchedules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lazy_schedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lazy_schedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this vesting schedule based on the context it is used
func (m *VestingSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLazySchedules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VestingSchedule) contextValidateLazySchedules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LazySchedules); i++ {

		if m.LazySchedules[i] != nil {
			if err := m.LazySchedules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lazy_schedules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lazy_schedules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VestingSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VestingSchedule) UnmarshalBinary(b []byte) error {
	var res VestingSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VestingScheduleLazySchedulesItems0 vesting schedule lazy schedules items0
//
// swagger:model VestingScheduleLazySchedulesItems0
type VestingScheduleLazySchedulesItems0 struct {

	// end time
	// Example: 1556085600
	EndTime string `json:"end_time,omitempty"`

	// ratio
	// Example: 0.100000000000000000
	Ratio string `json:"ratio,omitempty"`

	// start time
	// Example: 1556085600
	StartTime string `json:"start_time,omitempty"`
}

// Validate validates this vesting schedule lazy schedules items0
func (m *VestingScheduleLazySchedulesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this vesting schedule lazy schedules items0 based on context it is used
func (m *VestingScheduleLazySchedulesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VestingScheduleLazySchedulesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VestingScheduleLazySchedulesItems0) UnmarshalBinary(b []byte) error {
	var res VestingScheduleLazySchedulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
