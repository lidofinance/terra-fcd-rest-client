// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CosmosGovV1beta1QueryParamsResponse QueryParamsResponse is the response type for the Query/Params RPC method.
//
// swagger:model cosmos.gov.v1beta1.QueryParamsResponse
type CosmosGovV1beta1QueryParamsResponse struct {

	// deposit params
	DepositParams *CosmosGovV1beta1QueryParamsResponseDepositParams `json:"deposit_params,omitempty"`

	// tally params
	TallyParams *CosmosGovV1beta1QueryParamsResponseTallyParams `json:"tally_params,omitempty"`

	// voting params
	VotingParams *CosmosGovV1beta1QueryParamsResponseVotingParams `json:"voting_params,omitempty"`
}

// Validate validates this cosmos gov v1beta1 query params response
func (m *CosmosGovV1beta1QueryParamsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepositParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTallyParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVotingParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosGovV1beta1QueryParamsResponse) validateDepositParams(formats strfmt.Registry) error {
	if swag.IsZero(m.DepositParams) { // not required
		return nil
	}

	if m.DepositParams != nil {
		if err := m.DepositParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deposit_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deposit_params")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosGovV1beta1QueryParamsResponse) validateTallyParams(formats strfmt.Registry) error {
	if swag.IsZero(m.TallyParams) { // not required
		return nil
	}

	if m.TallyParams != nil {
		if err := m.TallyParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tally_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tally_params")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosGovV1beta1QueryParamsResponse) validateVotingParams(formats strfmt.Registry) error {
	if swag.IsZero(m.VotingParams) { // not required
		return nil
	}

	if m.VotingParams != nil {
		if err := m.VotingParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("voting_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("voting_params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cosmos gov v1beta1 query params response based on the context it is used
func (m *CosmosGovV1beta1QueryParamsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDepositParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTallyParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVotingParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosGovV1beta1QueryParamsResponse) contextValidateDepositParams(ctx context.Context, formats strfmt.Registry) error {

	if m.DepositParams != nil {
		if err := m.DepositParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deposit_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deposit_params")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosGovV1beta1QueryParamsResponse) contextValidateTallyParams(ctx context.Context, formats strfmt.Registry) error {

	if m.TallyParams != nil {
		if err := m.TallyParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tally_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tally_params")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosGovV1beta1QueryParamsResponse) contextValidateVotingParams(ctx context.Context, formats strfmt.Registry) error {

	if m.VotingParams != nil {
		if err := m.VotingParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("voting_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("voting_params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryParamsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryParamsResponse) UnmarshalBinary(b []byte) error {
	var res CosmosGovV1beta1QueryParamsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosGovV1beta1QueryParamsResponseDepositParams deposit_params defines the parameters related to deposit.
//
// swagger:model CosmosGovV1beta1QueryParamsResponseDepositParams
type CosmosGovV1beta1QueryParamsResponseDepositParams struct {

	// Maximum period for Atom holders to deposit on a proposal. Initial value: 2
	//  months.
	MaxDepositPeriod string `json:"max_deposit_period,omitempty"`

	// Minimum deposit for a proposal to enter voting period.
	MinDeposit []*CosmosGovV1beta1QueryParamsResponseDepositParamsMinDepositItems0 `json:"min_deposit"`
}

// Validate validates this cosmos gov v1beta1 query params response deposit params
func (m *CosmosGovV1beta1QueryParamsResponseDepositParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMinDeposit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosGovV1beta1QueryParamsResponseDepositParams) validateMinDeposit(formats strfmt.Registry) error {
	if swag.IsZero(m.MinDeposit) { // not required
		return nil
	}

	for i := 0; i < len(m.MinDeposit); i++ {
		if swag.IsZero(m.MinDeposit[i]) { // not required
			continue
		}

		if m.MinDeposit[i] != nil {
			if err := m.MinDeposit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deposit_params" + "." + "min_deposit" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deposit_params" + "." + "min_deposit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cosmos gov v1beta1 query params response deposit params based on the context it is used
func (m *CosmosGovV1beta1QueryParamsResponseDepositParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMinDeposit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosGovV1beta1QueryParamsResponseDepositParams) contextValidateMinDeposit(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MinDeposit); i++ {

		if m.MinDeposit[i] != nil {
			if err := m.MinDeposit[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deposit_params" + "." + "min_deposit" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deposit_params" + "." + "min_deposit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryParamsResponseDepositParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryParamsResponseDepositParams) UnmarshalBinary(b []byte) error {
	var res CosmosGovV1beta1QueryParamsResponseDepositParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosGovV1beta1QueryParamsResponseDepositParamsMinDepositItems0 Coin defines a token with a denomination and an amount.
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
//
// swagger:model CosmosGovV1beta1QueryParamsResponseDepositParamsMinDepositItems0
type CosmosGovV1beta1QueryParamsResponseDepositParamsMinDepositItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this cosmos gov v1beta1 query params response deposit params min deposit items0
func (m *CosmosGovV1beta1QueryParamsResponseDepositParamsMinDepositItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos gov v1beta1 query params response deposit params min deposit items0 based on context it is used
func (m *CosmosGovV1beta1QueryParamsResponseDepositParamsMinDepositItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryParamsResponseDepositParamsMinDepositItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryParamsResponseDepositParamsMinDepositItems0) UnmarshalBinary(b []byte) error {
	var res CosmosGovV1beta1QueryParamsResponseDepositParamsMinDepositItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosGovV1beta1QueryParamsResponseTallyParams tally_params defines the parameters related to tally.
//
// swagger:model CosmosGovV1beta1QueryParamsResponseTallyParams
type CosmosGovV1beta1QueryParamsResponseTallyParams struct {

	// Minimum percentage of total stake needed to vote for a result to be
	//  considered valid.
	// Format: byte
	Quorum strfmt.Base64 `json:"quorum,omitempty"`

	// Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
	// Format: byte
	Threshold strfmt.Base64 `json:"threshold,omitempty"`

	// Minimum value of Veto votes to Total votes ratio for proposal to be
	//  vetoed. Default value: 1/3.
	// Format: byte
	VetoThreshold strfmt.Base64 `json:"veto_threshold,omitempty"`
}

// Validate validates this cosmos gov v1beta1 query params response tally params
func (m *CosmosGovV1beta1QueryParamsResponseTallyParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos gov v1beta1 query params response tally params based on context it is used
func (m *CosmosGovV1beta1QueryParamsResponseTallyParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryParamsResponseTallyParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryParamsResponseTallyParams) UnmarshalBinary(b []byte) error {
	var res CosmosGovV1beta1QueryParamsResponseTallyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosGovV1beta1QueryParamsResponseVotingParams voting_params defines the parameters related to voting.
//
// swagger:model CosmosGovV1beta1QueryParamsResponseVotingParams
type CosmosGovV1beta1QueryParamsResponseVotingParams struct {

	// Length of the voting period.
	VotingPeriod string `json:"voting_period,omitempty"`
}

// Validate validates this cosmos gov v1beta1 query params response voting params
func (m *CosmosGovV1beta1QueryParamsResponseVotingParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos gov v1beta1 query params response voting params based on context it is used
func (m *CosmosGovV1beta1QueryParamsResponseVotingParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryParamsResponseVotingParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryParamsResponseVotingParams) UnmarshalBinary(b []byte) error {
	var res CosmosGovV1beta1QueryParamsResponseVotingParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
