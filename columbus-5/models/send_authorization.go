// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SendAuthorization send authorization
//
// swagger:model SendAuthorization
type SendAuthorization struct {

	// type
	// Example: msgauth/SendAuthorization
	Type string `json:"type,omitempty"`

	// value
	Value *SendAuthorizationValue `json:"value,omitempty"`
}

// Validate validates this send authorization
func (m *SendAuthorization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendAuthorization) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if m.Value != nil {
		if err := m.Value.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("value")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this send authorization based on the context it is used
func (m *SendAuthorization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendAuthorization) contextValidateValue(ctx context.Context, formats strfmt.Registry) error {

	if m.Value != nil {
		if err := m.Value.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SendAuthorization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendAuthorization) UnmarshalBinary(b []byte) error {
	var res SendAuthorization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SendAuthorizationValue send authorization value
//
// swagger:model SendAuthorizationValue
type SendAuthorizationValue struct {

	// spend limit
	SpendLimit []*SendAuthorizationValueSpendLimitItems0 `json:"spend_limit"`
}

// Validate validates this send authorization value
func (m *SendAuthorizationValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpendLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendAuthorizationValue) validateSpendLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.SpendLimit) { // not required
		return nil
	}

	for i := 0; i < len(m.SpendLimit); i++ {
		if swag.IsZero(m.SpendLimit[i]) { // not required
			continue
		}

		if m.SpendLimit[i] != nil {
			if err := m.SpendLimit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("value" + "." + "spend_limit" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("value" + "." + "spend_limit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this send authorization value based on the context it is used
func (m *SendAuthorizationValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSpendLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendAuthorizationValue) contextValidateSpendLimit(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SpendLimit); i++ {

		if m.SpendLimit[i] != nil {
			if err := m.SpendLimit[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("value" + "." + "spend_limit" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("value" + "." + "spend_limit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SendAuthorizationValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendAuthorizationValue) UnmarshalBinary(b []byte) error {
	var res SendAuthorizationValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SendAuthorizationValueSpendLimitItems0 send authorization value spend limit items0
//
// swagger:model SendAuthorizationValueSpendLimitItems0
type SendAuthorizationValueSpendLimitItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this send authorization value spend limit items0
func (m *SendAuthorizationValueSpendLimitItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this send authorization value spend limit items0 based on context it is used
func (m *SendAuthorizationValueSpendLimitItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SendAuthorizationValueSpendLimitItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendAuthorizationValueSpendLimitItems0) UnmarshalBinary(b []byte) error {
	var res SendAuthorizationValueSpendLimitItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
