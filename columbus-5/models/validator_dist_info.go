// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ValidatorDistInfo validator dist info
//
// swagger:model ValidatorDistInfo
type ValidatorDistInfo struct {

	// bech32 encoded address
	// Example: terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l
	OperatorAddress string `json:"operator_address,omitempty"`

	// self bond rewards
	SelfBondRewards []*ValidatorDistInfoSelfBondRewardsItems0 `json:"self_bond_rewards"`

	// val commission
	ValCommission *ValidatorDistInfoValCommission `json:"val_commission,omitempty"`
}

// Validate validates this validator dist info
func (m *ValidatorDistInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSelfBondRewards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValCommission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidatorDistInfo) validateSelfBondRewards(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfBondRewards) { // not required
		return nil
	}

	for i := 0; i < len(m.SelfBondRewards); i++ {
		if swag.IsZero(m.SelfBondRewards[i]) { // not required
			continue
		}

		if m.SelfBondRewards[i] != nil {
			if err := m.SelfBondRewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("self_bond_rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("self_bond_rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ValidatorDistInfo) validateValCommission(formats strfmt.Registry) error {
	if swag.IsZero(m.ValCommission) { // not required
		return nil
	}

	if m.ValCommission != nil {
		if err := m.ValCommission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("val_commission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("val_commission")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this validator dist info based on the context it is used
func (m *ValidatorDistInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSelfBondRewards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValCommission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidatorDistInfo) contextValidateSelfBondRewards(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SelfBondRewards); i++ {

		if m.SelfBondRewards[i] != nil {
			if err := m.SelfBondRewards[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("self_bond_rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("self_bond_rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ValidatorDistInfo) contextValidateValCommission(ctx context.Context, formats strfmt.Registry) error {

	if m.ValCommission != nil {
		if err := m.ValCommission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("val_commission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("val_commission")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidatorDistInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidatorDistInfo) UnmarshalBinary(b []byte) error {
	var res ValidatorDistInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ValidatorDistInfoSelfBondRewardsItems0 validator dist info self bond rewards items0
//
// swagger:model ValidatorDistInfoSelfBondRewardsItems0
type ValidatorDistInfoSelfBondRewardsItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this validator dist info self bond rewards items0
func (m *ValidatorDistInfoSelfBondRewardsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this validator dist info self bond rewards items0 based on context it is used
func (m *ValidatorDistInfoSelfBondRewardsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ValidatorDistInfoSelfBondRewardsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidatorDistInfoSelfBondRewardsItems0) UnmarshalBinary(b []byte) error {
	var res ValidatorDistInfoSelfBondRewardsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ValidatorDistInfoValCommission validator dist info val commission
//
// swagger:model ValidatorDistInfoValCommission
type ValidatorDistInfoValCommission struct {

	// commission
	Commission []*ValidatorDistInfoValCommissionCommissionItems0 `json:"commission"`
}

// Validate validates this validator dist info val commission
func (m *ValidatorDistInfoValCommission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidatorDistInfoValCommission) validateCommission(formats strfmt.Registry) error {
	if swag.IsZero(m.Commission) { // not required
		return nil
	}

	for i := 0; i < len(m.Commission); i++ {
		if swag.IsZero(m.Commission[i]) { // not required
			continue
		}

		if m.Commission[i] != nil {
			if err := m.Commission[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("val_commission" + "." + "commission" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("val_commission" + "." + "commission" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this validator dist info val commission based on the context it is used
func (m *ValidatorDistInfoValCommission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidatorDistInfoValCommission) contextValidateCommission(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Commission); i++ {

		if m.Commission[i] != nil {
			if err := m.Commission[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("val_commission" + "." + "commission" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("val_commission" + "." + "commission" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidatorDistInfoValCommission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidatorDistInfoValCommission) UnmarshalBinary(b []byte) error {
	var res ValidatorDistInfoValCommission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ValidatorDistInfoValCommissionCommissionItems0 validator dist info val commission commission items0
//
// swagger:model ValidatorDistInfoValCommissionCommissionItems0
type ValidatorDistInfoValCommissionCommissionItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this validator dist info val commission commission items0
func (m *ValidatorDistInfoValCommissionCommissionItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this validator dist info val commission commission items0 based on context it is used
func (m *ValidatorDistInfoValCommissionCommissionItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ValidatorDistInfoValCommissionCommissionItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidatorDistInfoValCommissionCommissionItems0) UnmarshalBinary(b []byte) error {
	var res ValidatorDistInfoValCommissionCommissionItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
