// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BroadcastTxCommitResult broadcast tx commit result
//
// swagger:model BroadcastTxCommitResult
type BroadcastTxCommitResult struct {

	// check tx
	CheckTx *BroadcastTxCommitResultCheckTx `json:"check_tx,omitempty"`

	// deliver tx
	DeliverTx *BroadcastTxCommitResultDeliverTx `json:"deliver_tx,omitempty"`

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// height
	Height int64 `json:"height,omitempty"`
}

// Validate validates this broadcast tx commit result
func (m *BroadcastTxCommitResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCheckTx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliverTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BroadcastTxCommitResult) validateCheckTx(formats strfmt.Registry) error {
	if swag.IsZero(m.CheckTx) { // not required
		return nil
	}

	if m.CheckTx != nil {
		if err := m.CheckTx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("check_tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("check_tx")
			}
			return err
		}
	}

	return nil
}

func (m *BroadcastTxCommitResult) validateDeliverTx(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliverTx) { // not required
		return nil
	}

	if m.DeliverTx != nil {
		if err := m.DeliverTx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliver_tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deliver_tx")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this broadcast tx commit result based on the context it is used
func (m *BroadcastTxCommitResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCheckTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeliverTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BroadcastTxCommitResult) contextValidateCheckTx(ctx context.Context, formats strfmt.Registry) error {

	if m.CheckTx != nil {
		if err := m.CheckTx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("check_tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("check_tx")
			}
			return err
		}
	}

	return nil
}

func (m *BroadcastTxCommitResult) contextValidateDeliverTx(ctx context.Context, formats strfmt.Registry) error {

	if m.DeliverTx != nil {
		if err := m.DeliverTx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliver_tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deliver_tx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastTxCommitResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastTxCommitResult) UnmarshalBinary(b []byte) error {
	var res BroadcastTxCommitResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BroadcastTxCommitResultCheckTx broadcast tx commit result check tx
// Example: {"code":0,"data":"data","gas_used":5000,"gas_wanted":10000,"info":"info","log":"log","tags":["",""]}
//
// swagger:model BroadcastTxCommitResultCheckTx
type BroadcastTxCommitResultCheckTx struct {

	// code
	Code int64 `json:"code,omitempty"`

	// data
	Data string `json:"data,omitempty"`

	// gas used
	GasUsed int64 `json:"gas_used,omitempty"`

	// gas wanted
	GasWanted int64 `json:"gas_wanted,omitempty"`

	// info
	Info string `json:"info,omitempty"`

	// log
	Log string `json:"log,omitempty"`

	// tags
	Tags []*BroadcastTxCommitResultCheckTxTagsItems0 `json:"tags"`
}

// Validate validates this broadcast tx commit result check tx
func (m *BroadcastTxCommitResultCheckTx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BroadcastTxCommitResultCheckTx) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("check_tx" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("check_tx" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this broadcast tx commit result check tx based on the context it is used
func (m *BroadcastTxCommitResultCheckTx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BroadcastTxCommitResultCheckTx) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("check_tx" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("check_tx" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastTxCommitResultCheckTx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastTxCommitResultCheckTx) UnmarshalBinary(b []byte) error {
	var res BroadcastTxCommitResultCheckTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BroadcastTxCommitResultCheckTxTagsItems0 broadcast tx commit result check tx tags items0
//
// swagger:model BroadcastTxCommitResultCheckTxTagsItems0
type BroadcastTxCommitResultCheckTxTagsItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this broadcast tx commit result check tx tags items0
func (m *BroadcastTxCommitResultCheckTxTagsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this broadcast tx commit result check tx tags items0 based on context it is used
func (m *BroadcastTxCommitResultCheckTxTagsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastTxCommitResultCheckTxTagsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastTxCommitResultCheckTxTagsItems0) UnmarshalBinary(b []byte) error {
	var res BroadcastTxCommitResultCheckTxTagsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BroadcastTxCommitResultDeliverTx broadcast tx commit result deliver tx
// Example: {"code":5,"data":"data","gas_used":5000,"gas_wanted":10000,"info":"info","log":"log","tags":["",""]}
//
// swagger:model BroadcastTxCommitResultDeliverTx
type BroadcastTxCommitResultDeliverTx struct {

	// code
	Code int64 `json:"code,omitempty"`

	// data
	Data string `json:"data,omitempty"`

	// gas used
	GasUsed int64 `json:"gas_used,omitempty"`

	// gas wanted
	GasWanted int64 `json:"gas_wanted,omitempty"`

	// info
	Info string `json:"info,omitempty"`

	// log
	Log string `json:"log,omitempty"`

	// tags
	Tags []*BroadcastTxCommitResultDeliverTxTagsItems0 `json:"tags"`
}

// Validate validates this broadcast tx commit result deliver tx
func (m *BroadcastTxCommitResultDeliverTx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BroadcastTxCommitResultDeliverTx) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deliver_tx" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deliver_tx" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this broadcast tx commit result deliver tx based on the context it is used
func (m *BroadcastTxCommitResultDeliverTx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BroadcastTxCommitResultDeliverTx) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deliver_tx" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("deliver_tx" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastTxCommitResultDeliverTx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastTxCommitResultDeliverTx) UnmarshalBinary(b []byte) error {
	var res BroadcastTxCommitResultDeliverTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BroadcastTxCommitResultDeliverTxTagsItems0 broadcast tx commit result deliver tx tags items0
//
// swagger:model BroadcastTxCommitResultDeliverTxTagsItems0
type BroadcastTxCommitResultDeliverTxTagsItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this broadcast tx commit result deliver tx tags items0
func (m *BroadcastTxCommitResultDeliverTxTagsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this broadcast tx commit result deliver tx tags items0 based on context it is used
func (m *BroadcastTxCommitResultDeliverTxTagsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BroadcastTxCommitResultDeliverTxTagsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BroadcastTxCommitResultDeliverTxTagsItems0) UnmarshalBinary(b []byte) error {
	var res BroadcastTxCommitResultDeliverTxTagsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
