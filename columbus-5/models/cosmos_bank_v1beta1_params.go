// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CosmosBankV1beta1Params Params defines the parameters for the bank module.
//
// swagger:model cosmos.bank.v1beta1.Params
type CosmosBankV1beta1Params struct {

	// default send enabled
	DefaultSendEnabled bool `json:"default_send_enabled,omitempty"`

	// send enabled
	SendEnabled []*CosmosBankV1beta1ParamsSendEnabledItems0 `json:"send_enabled"`
}

// Validate validates this cosmos bank v1beta1 params
func (m *CosmosBankV1beta1Params) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSendEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosBankV1beta1Params) validateSendEnabled(formats strfmt.Registry) error {
	if swag.IsZero(m.SendEnabled) { // not required
		return nil
	}

	for i := 0; i < len(m.SendEnabled); i++ {
		if swag.IsZero(m.SendEnabled[i]) { // not required
			continue
		}

		if m.SendEnabled[i] != nil {
			if err := m.SendEnabled[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("send_enabled" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("send_enabled" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cosmos bank v1beta1 params based on the context it is used
func (m *CosmosBankV1beta1Params) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSendEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosBankV1beta1Params) contextValidateSendEnabled(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SendEnabled); i++ {

		if m.SendEnabled[i] != nil {
			if err := m.SendEnabled[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("send_enabled" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("send_enabled" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosBankV1beta1Params) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosBankV1beta1Params) UnmarshalBinary(b []byte) error {
	var res CosmosBankV1beta1Params
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosBankV1beta1ParamsSendEnabledItems0 SendEnabled maps coin denom to a send_enabled status (whether a denom is
// sendable).
//
// swagger:model CosmosBankV1beta1ParamsSendEnabledItems0
type CosmosBankV1beta1ParamsSendEnabledItems0 struct {

	// denom
	Denom string `json:"denom,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this cosmos bank v1beta1 params send enabled items0
func (m *CosmosBankV1beta1ParamsSendEnabledItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos bank v1beta1 params send enabled items0 based on context it is used
func (m *CosmosBankV1beta1ParamsSendEnabledItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosBankV1beta1ParamsSendEnabledItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosBankV1beta1ParamsSendEnabledItems0) UnmarshalBinary(b []byte) error {
	var res CosmosBankV1beta1ParamsSendEnabledItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
