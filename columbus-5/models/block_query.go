// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BlockQuery block query
//
// swagger:model BlockQuery
type BlockQuery struct {

	// block
	Block *BlockQueryBlock `json:"block,omitempty"`

	// block meta
	BlockMeta *BlockQueryBlockMeta `json:"block_meta,omitempty"`
}

// Validate validates this block query
func (m *BlockQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQuery) validateBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.Block) { // not required
		return nil
	}

	if m.Block != nil {
		if err := m.Block.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block")
			}
			return err
		}
	}

	return nil
}

func (m *BlockQuery) validateBlockMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockMeta) { // not required
		return nil
	}

	if m.BlockMeta != nil {
		if err := m.BlockMeta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_meta")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block query based on the context it is used
func (m *BlockQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBlockMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQuery) contextValidateBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.Block != nil {
		if err := m.Block.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block")
			}
			return err
		}
	}

	return nil
}

func (m *BlockQuery) contextValidateBlockMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.BlockMeta != nil {
		if err := m.BlockMeta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQuery) UnmarshalBinary(b []byte) error {
	var res BlockQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlock block query block
//
// swagger:model BlockQueryBlock
type BlockQueryBlock struct {

	// evidence
	Evidence []string `json:"evidence"`

	// header
	Header *BlockQueryBlockHeader `json:"header,omitempty"`

	// last commit
	LastCommit *BlockQueryBlockLastCommit `json:"last_commit,omitempty"`

	// txs
	Txs []string `json:"txs"`
}

// Validate validates this block query block
func (m *BlockQueryBlock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastCommit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlock) validateHeader(formats strfmt.Registry) error {
	if swag.IsZero(m.Header) { // not required
		return nil
	}

	if m.Header != nil {
		if err := m.Header.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block" + "." + "header")
			}
			return err
		}
	}

	return nil
}

func (m *BlockQueryBlock) validateLastCommit(formats strfmt.Registry) error {
	if swag.IsZero(m.LastCommit) { // not required
		return nil
	}

	if m.LastCommit != nil {
		if err := m.LastCommit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "last_commit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block" + "." + "last_commit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block query block based on the context it is used
func (m *BlockQueryBlock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastCommit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlock) contextValidateHeader(ctx context.Context, formats strfmt.Registry) error {

	if m.Header != nil {
		if err := m.Header.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block" + "." + "header")
			}
			return err
		}
	}

	return nil
}

func (m *BlockQueryBlock) contextValidateLastCommit(ctx context.Context, formats strfmt.Registry) error {

	if m.LastCommit != nil {
		if err := m.LastCommit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "last_commit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block" + "." + "last_commit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlock) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockHeader block query block header
//
// swagger:model BlockQueryBlockHeader
type BlockQueryBlockHeader struct {

	// app hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	AppHash string `json:"app_hash,omitempty"`

	// chain id
	// Example: columbus-5
	ChainID string `json:"chain_id,omitempty"`

	// consensus hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	ConsensusHash string `json:"consensus_hash,omitempty"`

	// data hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	DataHash string `json:"data_hash,omitempty"`

	// evidence hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	EvidenceHash string `json:"evidence_hash,omitempty"`

	// height
	// Example: 1
	Height float64 `json:"height,omitempty"`

	// last block id
	LastBlockID *BlockQueryBlockHeaderLastBlockID `json:"last_block_id,omitempty"`

	// last commit hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	LastCommitHash string `json:"last_commit_hash,omitempty"`

	// last results hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	LastResultsHash string `json:"last_results_hash,omitempty"`

	// next validators hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	NextValidatorsHash string `json:"next_validators_hash,omitempty"`

	// num txs
	// Example: 0
	NumTxs float64 `json:"num_txs,omitempty"`

	// bech32 encoded address
	// Example: terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv
	ProposerAddress string `json:"proposer_address,omitempty"`

	// time
	// Example: 2017-12-30T05:53:09.287+01:00
	Time string `json:"time,omitempty"`

	// total txs
	// Example: 35
	TotalTxs float64 `json:"total_txs,omitempty"`

	// validators hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	ValidatorsHash string `json:"validators_hash,omitempty"`

	// version
	Version *BlockQueryBlockHeaderVersion `json:"version,omitempty"`
}

// Validate validates this block query block header
func (m *BlockQueryBlockHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastBlockID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockHeader) validateLastBlockID(formats strfmt.Registry) error {
	if swag.IsZero(m.LastBlockID) { // not required
		return nil
	}

	if m.LastBlockID != nil {
		if err := m.LastBlockID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "header" + "." + "last_block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block" + "." + "header" + "." + "last_block_id")
			}
			return err
		}
	}

	return nil
}

func (m *BlockQueryBlockHeader) validateVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "header" + "." + "version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block" + "." + "header" + "." + "version")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block query block header based on the context it is used
func (m *BlockQueryBlockHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastBlockID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockHeader) contextValidateLastBlockID(ctx context.Context, formats strfmt.Registry) error {

	if m.LastBlockID != nil {
		if err := m.LastBlockID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "header" + "." + "last_block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block" + "." + "header" + "." + "last_block_id")
			}
			return err
		}
	}

	return nil
}

func (m *BlockQueryBlockHeader) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.Version != nil {
		if err := m.Version.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "header" + "." + "version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block" + "." + "header" + "." + "version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockHeader) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockHeaderLastBlockID block query block header last block ID
//
// swagger:model BlockQueryBlockHeaderLastBlockID
type BlockQueryBlockHeaderLastBlockID struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// parts
	Parts *BlockQueryBlockHeaderLastBlockIDParts `json:"parts,omitempty"`
}

// Validate validates this block query block header last block ID
func (m *BlockQueryBlockHeaderLastBlockID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockHeaderLastBlockID) validateParts(formats strfmt.Registry) error {
	if swag.IsZero(m.Parts) { // not required
		return nil
	}

	if m.Parts != nil {
		if err := m.Parts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "header" + "." + "last_block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block" + "." + "header" + "." + "last_block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block query block header last block ID based on the context it is used
func (m *BlockQueryBlockHeaderLastBlockID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockHeaderLastBlockID) contextValidateParts(ctx context.Context, formats strfmt.Registry) error {

	if m.Parts != nil {
		if err := m.Parts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "header" + "." + "last_block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block" + "." + "header" + "." + "last_block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockHeaderLastBlockID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockHeaderLastBlockID) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockHeaderLastBlockID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockHeaderLastBlockIDParts block query block header last block ID parts
//
// swagger:model BlockQueryBlockHeaderLastBlockIDParts
type BlockQueryBlockHeaderLastBlockIDParts struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// total
	// Example: 0
	Total float64 `json:"total,omitempty"`
}

// Validate validates this block query block header last block ID parts
func (m *BlockQueryBlockHeaderLastBlockIDParts) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this block query block header last block ID parts based on context it is used
func (m *BlockQueryBlockHeaderLastBlockIDParts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockHeaderLastBlockIDParts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockHeaderLastBlockIDParts) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockHeaderLastBlockIDParts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockHeaderVersion block query block header version
//
// swagger:model BlockQueryBlockHeaderVersion
type BlockQueryBlockHeaderVersion struct {

	// app
	// Example: 0
	App string `json:"app,omitempty"`

	// block
	// Example: 10
	Block string `json:"block,omitempty"`
}

// Validate validates this block query block header version
func (m *BlockQueryBlockHeaderVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this block query block header version based on context it is used
func (m *BlockQueryBlockHeaderVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockHeaderVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockHeaderVersion) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockHeaderVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockLastCommit block query block last commit
//
// swagger:model BlockQueryBlockLastCommit
type BlockQueryBlockLastCommit struct {

	// block id
	BlockID *BlockQueryBlockLastCommitBlockID `json:"block_id,omitempty"`

	// precommits
	Precommits []*BlockQueryBlockLastCommitPrecommitsItems0 `json:"precommits"`
}

// Validate validates this block query block last commit
func (m *BlockQueryBlockLastCommit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrecommits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockLastCommit) validateBlockID(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockID) { // not required
		return nil
	}

	if m.BlockID != nil {
		if err := m.BlockID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "last_commit" + "." + "block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block" + "." + "last_commit" + "." + "block_id")
			}
			return err
		}
	}

	return nil
}

func (m *BlockQueryBlockLastCommit) validatePrecommits(formats strfmt.Registry) error {
	if swag.IsZero(m.Precommits) { // not required
		return nil
	}

	for i := 0; i < len(m.Precommits); i++ {
		if swag.IsZero(m.Precommits[i]) { // not required
			continue
		}

		if m.Precommits[i] != nil {
			if err := m.Precommits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("block" + "." + "last_commit" + "." + "precommits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("block" + "." + "last_commit" + "." + "precommits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this block query block last commit based on the context it is used
func (m *BlockQueryBlockLastCommit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlockID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrecommits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockLastCommit) contextValidateBlockID(ctx context.Context, formats strfmt.Registry) error {

	if m.BlockID != nil {
		if err := m.BlockID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "last_commit" + "." + "block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block" + "." + "last_commit" + "." + "block_id")
			}
			return err
		}
	}

	return nil
}

func (m *BlockQueryBlockLastCommit) contextValidatePrecommits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Precommits); i++ {

		if m.Precommits[i] != nil {
			if err := m.Precommits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("block" + "." + "last_commit" + "." + "precommits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("block" + "." + "last_commit" + "." + "precommits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockLastCommit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockLastCommit) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockLastCommit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockLastCommitBlockID block query block last commit block ID
//
// swagger:model BlockQueryBlockLastCommitBlockID
type BlockQueryBlockLastCommitBlockID struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// parts
	Parts *BlockQueryBlockLastCommitBlockIDParts `json:"parts,omitempty"`
}

// Validate validates this block query block last commit block ID
func (m *BlockQueryBlockLastCommitBlockID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockLastCommitBlockID) validateParts(formats strfmt.Registry) error {
	if swag.IsZero(m.Parts) { // not required
		return nil
	}

	if m.Parts != nil {
		if err := m.Parts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "last_commit" + "." + "block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block" + "." + "last_commit" + "." + "block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block query block last commit block ID based on the context it is used
func (m *BlockQueryBlockLastCommitBlockID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockLastCommitBlockID) contextValidateParts(ctx context.Context, formats strfmt.Registry) error {

	if m.Parts != nil {
		if err := m.Parts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block" + "." + "last_commit" + "." + "block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block" + "." + "last_commit" + "." + "block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockLastCommitBlockID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockLastCommitBlockID) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockLastCommitBlockID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockLastCommitBlockIDParts block query block last commit block ID parts
//
// swagger:model BlockQueryBlockLastCommitBlockIDParts
type BlockQueryBlockLastCommitBlockIDParts struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// total
	// Example: 0
	Total float64 `json:"total,omitempty"`
}

// Validate validates this block query block last commit block ID parts
func (m *BlockQueryBlockLastCommitBlockIDParts) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this block query block last commit block ID parts based on context it is used
func (m *BlockQueryBlockLastCommitBlockIDParts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockLastCommitBlockIDParts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockLastCommitBlockIDParts) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockLastCommitBlockIDParts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockLastCommitPrecommitsItems0 block query block last commit precommits items0
//
// swagger:model BlockQueryBlockLastCommitPrecommitsItems0
type BlockQueryBlockLastCommitPrecommitsItems0 struct {

	// block id
	BlockID *BlockQueryBlockLastCommitPrecommitsItems0BlockID `json:"block_id,omitempty"`

	// height
	// Example: 0
	Height string `json:"height,omitempty"`

	// round
	// Example: 0
	Round string `json:"round,omitempty"`

	// signature
	// Example: 7uTC74QlknqYWEwg7Vn6M8Om7FuZ0EO4bjvuj6rwH1mTUJrRuMMZvAAqT9VjNgP0RA/TDp6u/92AqrZfXJSpBQ==
	Signature string `json:"signature,omitempty"`

	// timestamp
	// Example: 2017-12-30T05:53:09.287+01:00
	Timestamp string `json:"timestamp,omitempty"`

	// type
	// Example: 2
	Type float64 `json:"type,omitempty"`

	// validator address
	ValidatorAddress string `json:"validator_address,omitempty"`

	// validator index
	// Example: 0
	ValidatorIndex string `json:"validator_index,omitempty"`
}

// Validate validates this block query block last commit precommits items0
func (m *BlockQueryBlockLastCommitPrecommitsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockLastCommitPrecommitsItems0) validateBlockID(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockID) { // not required
		return nil
	}

	if m.BlockID != nil {
		if err := m.BlockID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_id")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block query block last commit precommits items0 based on the context it is used
func (m *BlockQueryBlockLastCommitPrecommitsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlockID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockLastCommitPrecommitsItems0) contextValidateBlockID(ctx context.Context, formats strfmt.Registry) error {

	if m.BlockID != nil {
		if err := m.BlockID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockLastCommitPrecommitsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockLastCommitPrecommitsItems0) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockLastCommitPrecommitsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockLastCommitPrecommitsItems0BlockID block query block last commit precommits items0 block ID
//
// swagger:model BlockQueryBlockLastCommitPrecommitsItems0BlockID
type BlockQueryBlockLastCommitPrecommitsItems0BlockID struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// parts
	Parts *BlockQueryBlockLastCommitPrecommitsItems0BlockIDParts `json:"parts,omitempty"`
}

// Validate validates this block query block last commit precommits items0 block ID
func (m *BlockQueryBlockLastCommitPrecommitsItems0BlockID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockLastCommitPrecommitsItems0BlockID) validateParts(formats strfmt.Registry) error {
	if swag.IsZero(m.Parts) { // not required
		return nil
	}

	if m.Parts != nil {
		if err := m.Parts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block query block last commit precommits items0 block ID based on the context it is used
func (m *BlockQueryBlockLastCommitPrecommitsItems0BlockID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockLastCommitPrecommitsItems0BlockID) contextValidateParts(ctx context.Context, formats strfmt.Registry) error {

	if m.Parts != nil {
		if err := m.Parts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockLastCommitPrecommitsItems0BlockID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockLastCommitPrecommitsItems0BlockID) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockLastCommitPrecommitsItems0BlockID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockLastCommitPrecommitsItems0BlockIDParts block query block last commit precommits items0 block ID parts
//
// swagger:model BlockQueryBlockLastCommitPrecommitsItems0BlockIDParts
type BlockQueryBlockLastCommitPrecommitsItems0BlockIDParts struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// total
	// Example: 0
	Total float64 `json:"total,omitempty"`
}

// Validate validates this block query block last commit precommits items0 block ID parts
func (m *BlockQueryBlockLastCommitPrecommitsItems0BlockIDParts) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this block query block last commit precommits items0 block ID parts based on context it is used
func (m *BlockQueryBlockLastCommitPrecommitsItems0BlockIDParts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockLastCommitPrecommitsItems0BlockIDParts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockLastCommitPrecommitsItems0BlockIDParts) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockLastCommitPrecommitsItems0BlockIDParts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockMeta block query block meta
//
// swagger:model BlockQueryBlockMeta
type BlockQueryBlockMeta struct {

	// block id
	BlockID *BlockQueryBlockMetaBlockID `json:"block_id,omitempty"`

	// header
	Header *BlockQueryBlockMetaHeader `json:"header,omitempty"`
}

// Validate validates this block query block meta
func (m *BlockQueryBlockMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockMeta) validateBlockID(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockID) { // not required
		return nil
	}

	if m.BlockID != nil {
		if err := m.BlockID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_meta" + "." + "block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_meta" + "." + "block_id")
			}
			return err
		}
	}

	return nil
}

func (m *BlockQueryBlockMeta) validateHeader(formats strfmt.Registry) error {
	if swag.IsZero(m.Header) { // not required
		return nil
	}

	if m.Header != nil {
		if err := m.Header.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_meta" + "." + "header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_meta" + "." + "header")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block query block meta based on the context it is used
func (m *BlockQueryBlockMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlockID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockMeta) contextValidateBlockID(ctx context.Context, formats strfmt.Registry) error {

	if m.BlockID != nil {
		if err := m.BlockID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_meta" + "." + "block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_meta" + "." + "block_id")
			}
			return err
		}
	}

	return nil
}

func (m *BlockQueryBlockMeta) contextValidateHeader(ctx context.Context, formats strfmt.Registry) error {

	if m.Header != nil {
		if err := m.Header.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_meta" + "." + "header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_meta" + "." + "header")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockMeta) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockMetaBlockID block query block meta block ID
//
// swagger:model BlockQueryBlockMetaBlockID
type BlockQueryBlockMetaBlockID struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// parts
	Parts *BlockQueryBlockMetaBlockIDParts `json:"parts,omitempty"`
}

// Validate validates this block query block meta block ID
func (m *BlockQueryBlockMetaBlockID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockMetaBlockID) validateParts(formats strfmt.Registry) error {
	if swag.IsZero(m.Parts) { // not required
		return nil
	}

	if m.Parts != nil {
		if err := m.Parts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_meta" + "." + "block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_meta" + "." + "block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block query block meta block ID based on the context it is used
func (m *BlockQueryBlockMetaBlockID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockMetaBlockID) contextValidateParts(ctx context.Context, formats strfmt.Registry) error {

	if m.Parts != nil {
		if err := m.Parts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_meta" + "." + "block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_meta" + "." + "block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockMetaBlockID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockMetaBlockID) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockMetaBlockID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockMetaBlockIDParts block query block meta block ID parts
//
// swagger:model BlockQueryBlockMetaBlockIDParts
type BlockQueryBlockMetaBlockIDParts struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// total
	// Example: 0
	Total float64 `json:"total,omitempty"`
}

// Validate validates this block query block meta block ID parts
func (m *BlockQueryBlockMetaBlockIDParts) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this block query block meta block ID parts based on context it is used
func (m *BlockQueryBlockMetaBlockIDParts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockMetaBlockIDParts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockMetaBlockIDParts) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockMetaBlockIDParts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockMetaHeader block query block meta header
//
// swagger:model BlockQueryBlockMetaHeader
type BlockQueryBlockMetaHeader struct {

	// app hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	AppHash string `json:"app_hash,omitempty"`

	// chain id
	// Example: columbus-5
	ChainID string `json:"chain_id,omitempty"`

	// consensus hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	ConsensusHash string `json:"consensus_hash,omitempty"`

	// data hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	DataHash string `json:"data_hash,omitempty"`

	// evidence hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	EvidenceHash string `json:"evidence_hash,omitempty"`

	// height
	// Example: 1
	Height float64 `json:"height,omitempty"`

	// last block id
	LastBlockID *BlockQueryBlockMetaHeaderLastBlockID `json:"last_block_id,omitempty"`

	// last commit hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	LastCommitHash string `json:"last_commit_hash,omitempty"`

	// last results hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	LastResultsHash string `json:"last_results_hash,omitempty"`

	// next validators hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	NextValidatorsHash string `json:"next_validators_hash,omitempty"`

	// num txs
	// Example: 0
	NumTxs float64 `json:"num_txs,omitempty"`

	// bech32 encoded address
	// Example: terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv
	ProposerAddress string `json:"proposer_address,omitempty"`

	// time
	// Example: 2017-12-30T05:53:09.287+01:00
	Time string `json:"time,omitempty"`

	// total txs
	// Example: 35
	TotalTxs float64 `json:"total_txs,omitempty"`

	// validators hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	ValidatorsHash string `json:"validators_hash,omitempty"`

	// version
	Version *BlockQueryBlockMetaHeaderVersion `json:"version,omitempty"`
}

// Validate validates this block query block meta header
func (m *BlockQueryBlockMetaHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastBlockID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockMetaHeader) validateLastBlockID(formats strfmt.Registry) error {
	if swag.IsZero(m.LastBlockID) { // not required
		return nil
	}

	if m.LastBlockID != nil {
		if err := m.LastBlockID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_meta" + "." + "header" + "." + "last_block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_meta" + "." + "header" + "." + "last_block_id")
			}
			return err
		}
	}

	return nil
}

func (m *BlockQueryBlockMetaHeader) validateVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if m.Version != nil {
		if err := m.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_meta" + "." + "header" + "." + "version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_meta" + "." + "header" + "." + "version")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block query block meta header based on the context it is used
func (m *BlockQueryBlockMetaHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastBlockID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockMetaHeader) contextValidateLastBlockID(ctx context.Context, formats strfmt.Registry) error {

	if m.LastBlockID != nil {
		if err := m.LastBlockID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_meta" + "." + "header" + "." + "last_block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_meta" + "." + "header" + "." + "last_block_id")
			}
			return err
		}
	}

	return nil
}

func (m *BlockQueryBlockMetaHeader) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.Version != nil {
		if err := m.Version.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_meta" + "." + "header" + "." + "version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_meta" + "." + "header" + "." + "version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockMetaHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockMetaHeader) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockMetaHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockMetaHeaderLastBlockID block query block meta header last block ID
//
// swagger:model BlockQueryBlockMetaHeaderLastBlockID
type BlockQueryBlockMetaHeaderLastBlockID struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// parts
	Parts *BlockQueryBlockMetaHeaderLastBlockIDParts `json:"parts,omitempty"`
}

// Validate validates this block query block meta header last block ID
func (m *BlockQueryBlockMetaHeaderLastBlockID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockMetaHeaderLastBlockID) validateParts(formats strfmt.Registry) error {
	if swag.IsZero(m.Parts) { // not required
		return nil
	}

	if m.Parts != nil {
		if err := m.Parts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_meta" + "." + "header" + "." + "last_block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_meta" + "." + "header" + "." + "last_block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block query block meta header last block ID based on the context it is used
func (m *BlockQueryBlockMetaHeaderLastBlockID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockQueryBlockMetaHeaderLastBlockID) contextValidateParts(ctx context.Context, formats strfmt.Registry) error {

	if m.Parts != nil {
		if err := m.Parts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_meta" + "." + "header" + "." + "last_block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_meta" + "." + "header" + "." + "last_block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockMetaHeaderLastBlockID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockMetaHeaderLastBlockID) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockMetaHeaderLastBlockID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockMetaHeaderLastBlockIDParts block query block meta header last block ID parts
//
// swagger:model BlockQueryBlockMetaHeaderLastBlockIDParts
type BlockQueryBlockMetaHeaderLastBlockIDParts struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// total
	// Example: 0
	Total float64 `json:"total,omitempty"`
}

// Validate validates this block query block meta header last block ID parts
func (m *BlockQueryBlockMetaHeaderLastBlockIDParts) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this block query block meta header last block ID parts based on context it is used
func (m *BlockQueryBlockMetaHeaderLastBlockIDParts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockMetaHeaderLastBlockIDParts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockMetaHeaderLastBlockIDParts) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockMetaHeaderLastBlockIDParts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockQueryBlockMetaHeaderVersion block query block meta header version
//
// swagger:model BlockQueryBlockMetaHeaderVersion
type BlockQueryBlockMetaHeaderVersion struct {

	// app
	// Example: 0
	App string `json:"app,omitempty"`

	// block
	// Example: 10
	Block string `json:"block,omitempty"`
}

// Validate validates this block query block meta header version
func (m *BlockQueryBlockMetaHeaderVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this block query block meta header version based on context it is used
func (m *BlockQueryBlockMetaHeaderVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BlockQueryBlockMetaHeaderVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockQueryBlockMetaHeaderVersion) UnmarshalBinary(b []byte) error {
	var res BlockQueryBlockMetaHeaderVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
