// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WasmParams wasm params
//
// swagger:model WasmParams
type WasmParams struct {

	// event params
	EventParams *WasmParamsEventParams `json:"event_params,omitempty"`

	// allowed max contract return data size
	// Example: 100
	MaxContractDataSize int64 `json:"max_contract_data_size,omitempty"`

	// allowed max gas usages per each contract execution
	// Example: 1000000
	MaxContractGas int64 `json:"max_contract_gas,omitempty"`

	// allowed max contract exe msg bytes size
	// Example: 1000000
	MaxContractMsgSize int64 `json:"max_contract_msg_size,omitempty"`

	// allowed max contract bytes size
	// Example: 1000000
	MaxContractSize int64 `json:"max_contract_size,omitempty"`
}

// Validate validates this wasm params
func (m *WasmParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WasmParams) validateEventParams(formats strfmt.Registry) error {
	if swag.IsZero(m.EventParams) { // not required
		return nil
	}

	if m.EventParams != nil {
		if err := m.EventParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("event_params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this wasm params based on the context it is used
func (m *WasmParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WasmParams) contextValidateEventParams(ctx context.Context, formats strfmt.Registry) error {

	if m.EventParams != nil {
		if err := m.EventParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("event_params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WasmParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WasmParams) UnmarshalBinary(b []byte) error {
	var res WasmParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WasmParamsEventParams wasm params event params
//
// swagger:model WasmParamsEventParams
type WasmParamsEventParams struct {

	// allowed max length of a contract event attribute key
	// Example: 128
	MaxAttributeKeyLength string `json:"max_attribute_key_length,omitempty"`

	// allowed max # of contract attribute num
	// Example: 128
	MaxAttributeNum string `json:"max_attribute_num,omitempty"`

	// allowed max length of a contract event attribute value
	// Example: 128
	MaxAttributeValueLength string `json:"max_attribute_value_length,omitempty"`
}

// Validate validates this wasm params event params
func (m *WasmParamsEventParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this wasm params event params based on context it is used
func (m *WasmParamsEventParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WasmParamsEventParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WasmParamsEventParams) UnmarshalBinary(b []byte) error {
	var res WasmParamsEventParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
