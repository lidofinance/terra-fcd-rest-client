// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// IbcCoreChannelV1State State defines if a channel is in one of the following states:
// CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.
//
//  - STATE_UNINITIALIZED_UNSPECIFIED: Default State
//  - STATE_INIT: A channel has just started the opening handshake.
//  - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
//  - STATE_OPEN: A channel has completed the handshake. Open channels are
// ready to send and receive packets.
//  - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
// packets.
//
// swagger:model ibc.core.channel.v1.State
type IbcCoreChannelV1State string

func NewIbcCoreChannelV1State(value IbcCoreChannelV1State) *IbcCoreChannelV1State {
	v := value
	return &v
}

const (

	// IbcCoreChannelV1StateSTATEUNINITIALIZEDUNSPECIFIED captures enum value "STATE_UNINITIALIZED_UNSPECIFIED"
	IbcCoreChannelV1StateSTATEUNINITIALIZEDUNSPECIFIED IbcCoreChannelV1State = "STATE_UNINITIALIZED_UNSPECIFIED"

	// IbcCoreChannelV1StateSTATEINIT captures enum value "STATE_INIT"
	IbcCoreChannelV1StateSTATEINIT IbcCoreChannelV1State = "STATE_INIT"

	// IbcCoreChannelV1StateSTATETRYOPEN captures enum value "STATE_TRYOPEN"
	IbcCoreChannelV1StateSTATETRYOPEN IbcCoreChannelV1State = "STATE_TRYOPEN"

	// IbcCoreChannelV1StateSTATEOPEN captures enum value "STATE_OPEN"
	IbcCoreChannelV1StateSTATEOPEN IbcCoreChannelV1State = "STATE_OPEN"

	// IbcCoreChannelV1StateSTATECLOSED captures enum value "STATE_CLOSED"
	IbcCoreChannelV1StateSTATECLOSED IbcCoreChannelV1State = "STATE_CLOSED"
)

// for schema
var ibcCoreChannelV1StateEnum []interface{}

func init() {
	var res []IbcCoreChannelV1State
	if err := json.Unmarshal([]byte(`["STATE_UNINITIALIZED_UNSPECIFIED","STATE_INIT","STATE_TRYOPEN","STATE_OPEN","STATE_CLOSED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ibcCoreChannelV1StateEnum = append(ibcCoreChannelV1StateEnum, v)
	}
}

func (m IbcCoreChannelV1State) validateIbcCoreChannelV1StateEnum(path, location string, value IbcCoreChannelV1State) error {
	if err := validate.EnumCase(path, location, value, ibcCoreChannelV1StateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this ibc core channel v1 state
func (m IbcCoreChannelV1State) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateIbcCoreChannelV1StateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this ibc core channel v1 state based on context it is used
func (m IbcCoreChannelV1State) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
