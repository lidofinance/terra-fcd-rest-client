// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CosmosGovV1beta1QueryTallyResultResponse QueryTallyResultResponse is the response type for the Query/Tally RPC method.
//
// swagger:model cosmos.gov.v1beta1.QueryTallyResultResponse
type CosmosGovV1beta1QueryTallyResultResponse struct {

	// tally
	Tally *CosmosGovV1beta1QueryTallyResultResponseTally `json:"tally,omitempty"`
}

// Validate validates this cosmos gov v1beta1 query tally result response
func (m *CosmosGovV1beta1QueryTallyResultResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTally(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosGovV1beta1QueryTallyResultResponse) validateTally(formats strfmt.Registry) error {
	if swag.IsZero(m.Tally) { // not required
		return nil
	}

	if m.Tally != nil {
		if err := m.Tally.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tally")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tally")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cosmos gov v1beta1 query tally result response based on the context it is used
func (m *CosmosGovV1beta1QueryTallyResultResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTally(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosGovV1beta1QueryTallyResultResponse) contextValidateTally(ctx context.Context, formats strfmt.Registry) error {

	if m.Tally != nil {
		if err := m.Tally.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tally")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tally")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryTallyResultResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryTallyResultResponse) UnmarshalBinary(b []byte) error {
	var res CosmosGovV1beta1QueryTallyResultResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosGovV1beta1QueryTallyResultResponseTally TallyResult defines a standard tally for a governance proposal.
//
// swagger:model CosmosGovV1beta1QueryTallyResultResponseTally
type CosmosGovV1beta1QueryTallyResultResponseTally struct {

	// abstain
	Abstain string `json:"abstain,omitempty"`

	// no
	No string `json:"no,omitempty"`

	// no with veto
	NoWithVeto string `json:"no_with_veto,omitempty"`

	// yes
	Yes string `json:"yes,omitempty"`
}

// Validate validates this cosmos gov v1beta1 query tally result response tally
func (m *CosmosGovV1beta1QueryTallyResultResponseTally) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos gov v1beta1 query tally result response tally based on context it is used
func (m *CosmosGovV1beta1QueryTallyResultResponseTally) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryTallyResultResponseTally) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryTallyResultResponseTally) UnmarshalBinary(b []byte) error {
	var res CosmosGovV1beta1QueryTallyResultResponseTally
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
