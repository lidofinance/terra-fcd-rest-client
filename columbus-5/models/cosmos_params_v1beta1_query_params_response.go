// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CosmosParamsV1beta1QueryParamsResponse QueryParamsResponse is response type for the Query/Params RPC method.
//
// swagger:model cosmos.params.v1beta1.QueryParamsResponse
type CosmosParamsV1beta1QueryParamsResponse struct {

	// param
	Param *CosmosParamsV1beta1QueryParamsResponseParam `json:"param,omitempty"`
}

// Validate validates this cosmos params v1beta1 query params response
func (m *CosmosParamsV1beta1QueryParamsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParam(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosParamsV1beta1QueryParamsResponse) validateParam(formats strfmt.Registry) error {
	if swag.IsZero(m.Param) { // not required
		return nil
	}

	if m.Param != nil {
		if err := m.Param.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("param")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("param")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cosmos params v1beta1 query params response based on the context it is used
func (m *CosmosParamsV1beta1QueryParamsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosParamsV1beta1QueryParamsResponse) contextValidateParam(ctx context.Context, formats strfmt.Registry) error {

	if m.Param != nil {
		if err := m.Param.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("param")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("param")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosParamsV1beta1QueryParamsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosParamsV1beta1QueryParamsResponse) UnmarshalBinary(b []byte) error {
	var res CosmosParamsV1beta1QueryParamsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosParamsV1beta1QueryParamsResponseParam param defines the queried parameter.
//
// swagger:model CosmosParamsV1beta1QueryParamsResponseParam
type CosmosParamsV1beta1QueryParamsResponseParam struct {

	// key
	Key string `json:"key,omitempty"`

	// subspace
	Subspace string `json:"subspace,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this cosmos params v1beta1 query params response param
func (m *CosmosParamsV1beta1QueryParamsResponseParam) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos params v1beta1 query params response param based on context it is used
func (m *CosmosParamsV1beta1QueryParamsResponseParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosParamsV1beta1QueryParamsResponseParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosParamsV1beta1QueryParamsResponseParam) UnmarshalBinary(b []byte) error {
	var res CosmosParamsV1beta1QueryParamsResponseParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
