// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetStakingForAccountResultMyDelegations get staking for account result my delegations
//
// swagger:model getStakingForAccountResult.myDelegations
type GetStakingForAccountResultMyDelegations struct {

	// Users delegations list
	// Required: true
	AmountDelegated *string `json:"amountDelegated"`

	// Users delegations list
	// Required: true
	TotalReward *string `json:"totalReward"`

	// Users delegations list
	// Required: true
	ValidatorAddress *string `json:"validatorAddress"`

	// Users delegations list
	// Required: true
	ValidatorName *string `json:"validatorName"`
}

// Validate validates this get staking for account result my delegations
func (m *GetStakingForAccountResultMyDelegations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountDelegated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalReward(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidatorAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidatorName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetStakingForAccountResultMyDelegations) validateAmountDelegated(formats strfmt.Registry) error {

	if err := validate.Required("amountDelegated", "body", m.AmountDelegated); err != nil {
		return err
	}

	return nil
}

func (m *GetStakingForAccountResultMyDelegations) validateTotalReward(formats strfmt.Registry) error {

	if err := validate.Required("totalReward", "body", m.TotalReward); err != nil {
		return err
	}

	return nil
}

func (m *GetStakingForAccountResultMyDelegations) validateValidatorAddress(formats strfmt.Registry) error {

	if err := validate.Required("validatorAddress", "body", m.ValidatorAddress); err != nil {
		return err
	}

	return nil
}

func (m *GetStakingForAccountResultMyDelegations) validateValidatorName(formats strfmt.Registry) error {

	if err := validate.Required("validatorName", "body", m.ValidatorName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get staking for account result my delegations based on context it is used
func (m *GetStakingForAccountResultMyDelegations) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetStakingForAccountResultMyDelegations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetStakingForAccountResultMyDelegations) UnmarshalBinary(b []byte) error {
	var res GetStakingForAccountResultMyDelegations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
