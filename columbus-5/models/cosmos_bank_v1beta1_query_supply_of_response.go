// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CosmosBankV1beta1QuerySupplyOfResponse QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method.
//
// swagger:model cosmos.bank.v1beta1.QuerySupplyOfResponse
type CosmosBankV1beta1QuerySupplyOfResponse struct {

	// amount
	Amount *CosmosBankV1beta1QuerySupplyOfResponseAmount `json:"amount,omitempty"`
}

// Validate validates this cosmos bank v1beta1 query supply of response
func (m *CosmosBankV1beta1QuerySupplyOfResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosBankV1beta1QuerySupplyOfResponse) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cosmos bank v1beta1 query supply of response based on the context it is used
func (m *CosmosBankV1beta1QuerySupplyOfResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosBankV1beta1QuerySupplyOfResponse) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {
		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosBankV1beta1QuerySupplyOfResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosBankV1beta1QuerySupplyOfResponse) UnmarshalBinary(b []byte) error {
	var res CosmosBankV1beta1QuerySupplyOfResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosBankV1beta1QuerySupplyOfResponseAmount Coin defines a token with a denomination and an amount.
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
//
// swagger:model CosmosBankV1beta1QuerySupplyOfResponseAmount
type CosmosBankV1beta1QuerySupplyOfResponseAmount struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this cosmos bank v1beta1 query supply of response amount
func (m *CosmosBankV1beta1QuerySupplyOfResponseAmount) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos bank v1beta1 query supply of response amount based on context it is used
func (m *CosmosBankV1beta1QuerySupplyOfResponseAmount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosBankV1beta1QuerySupplyOfResponseAmount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosBankV1beta1QuerySupplyOfResponseAmount) UnmarshalBinary(b []byte) error {
	var res CosmosBankV1beta1QuerySupplyOfResponseAmount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
