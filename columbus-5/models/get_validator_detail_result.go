// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetValidatorDetailResult get validator detail result
//
// swagger:model getValidatorDetailResult
type GetValidatorDetailResult struct {

	// account address
	// Required: true
	AccountAddress *string `json:"accountAddress"`

	// commission info
	// Required: true
	CommissionInfo *GetValidatorDetailResultCommissionInfo `json:"commissionInfo"`

	// consensus pubkey
	// Required: true
	ConsensusPubkey *string `json:"consensusPubkey"`

	// delegator shares
	// Required: true
	DelegatorShares *string `json:"delegatorShares"`

	// description
	// Required: true
	Description *GetValidatorDetailResultDescription `json:"description"`

	// delegateable amount
	// Required: true
	MyDelegatable *string `json:"myDelegatable"`

	// total delegation amount
	// Required: true
	MyDelegation *string `json:"myDelegation"`

	// my rewards
	// Required: true
	MyRewards *GetValidatorDetailResultMyRewards `json:"myRewards"`

	// user undelegations
	// Required: true
	MyUndelegation []*GetValidatorDetailResultMyUndelegation `json:"myUndelegation"`

	// operator address
	// Required: true
	OperatorAddress *string `json:"operatorAddress"`

	// rewards pool
	// Required: true
	RewardsPool *GetValidatorDetailResultRewardsPool `json:"rewardsPool"`

	// self delegation
	// Required: true
	SelfDelegation *GetValidatorDetailResultSelfDelegation `json:"selfDelegation"`

	// staking return
	// Required: true
	StakingReturn *string `json:"stakingReturn"`

	// status
	// Required: true
	Status *string `json:"status"`

	// tokens
	// Required: true
	Tokens *string `json:"tokens"`

	// up time
	// Required: true
	UpTime *float64 `json:"upTime"`

	// voting power
	// Required: true
	VotingPower *GetValidatorDetailResultVotingPower `json:"votingPower"`
}

// Validate validates this get validator detail result
func (m *GetValidatorDetailResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommissionInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsensusPubkey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelegatorShares(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMyDelegatable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMyDelegation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMyRewards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMyUndelegation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRewardsPool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfDelegation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStakingReturn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokens(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVotingPower(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetValidatorDetailResult) validateAccountAddress(formats strfmt.Registry) error {

	if err := validate.Required("accountAddress", "body", m.AccountAddress); err != nil {
		return err
	}

	return nil
}

func (m *GetValidatorDetailResult) validateCommissionInfo(formats strfmt.Registry) error {

	if err := validate.Required("commissionInfo", "body", m.CommissionInfo); err != nil {
		return err
	}

	if m.CommissionInfo != nil {
		if err := m.CommissionInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commissionInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commissionInfo")
			}
			return err
		}
	}

	return nil
}

func (m *GetValidatorDetailResult) validateConsensusPubkey(formats strfmt.Registry) error {

	if err := validate.Required("consensusPubkey", "body", m.ConsensusPubkey); err != nil {
		return err
	}

	return nil
}

func (m *GetValidatorDetailResult) validateDelegatorShares(formats strfmt.Registry) error {

	if err := validate.Required("delegatorShares", "body", m.DelegatorShares); err != nil {
		return err
	}

	return nil
}

func (m *GetValidatorDetailResult) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *GetValidatorDetailResult) validateMyDelegatable(formats strfmt.Registry) error {

	if err := validate.Required("myDelegatable", "body", m.MyDelegatable); err != nil {
		return err
	}

	return nil
}

func (m *GetValidatorDetailResult) validateMyDelegation(formats strfmt.Registry) error {

	if err := validate.Required("myDelegation", "body", m.MyDelegation); err != nil {
		return err
	}

	return nil
}

func (m *GetValidatorDetailResult) validateMyRewards(formats strfmt.Registry) error {

	if err := validate.Required("myRewards", "body", m.MyRewards); err != nil {
		return err
	}

	if m.MyRewards != nil {
		if err := m.MyRewards.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("myRewards")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("myRewards")
			}
			return err
		}
	}

	return nil
}

func (m *GetValidatorDetailResult) validateMyUndelegation(formats strfmt.Registry) error {

	if err := validate.Required("myUndelegation", "body", m.MyUndelegation); err != nil {
		return err
	}

	for i := 0; i < len(m.MyUndelegation); i++ {
		if swag.IsZero(m.MyUndelegation[i]) { // not required
			continue
		}

		if m.MyUndelegation[i] != nil {
			if err := m.MyUndelegation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("myUndelegation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("myUndelegation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetValidatorDetailResult) validateOperatorAddress(formats strfmt.Registry) error {

	if err := validate.Required("operatorAddress", "body", m.OperatorAddress); err != nil {
		return err
	}

	return nil
}

func (m *GetValidatorDetailResult) validateRewardsPool(formats strfmt.Registry) error {

	if err := validate.Required("rewardsPool", "body", m.RewardsPool); err != nil {
		return err
	}

	if m.RewardsPool != nil {
		if err := m.RewardsPool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rewardsPool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rewardsPool")
			}
			return err
		}
	}

	return nil
}

func (m *GetValidatorDetailResult) validateSelfDelegation(formats strfmt.Registry) error {

	if err := validate.Required("selfDelegation", "body", m.SelfDelegation); err != nil {
		return err
	}

	if m.SelfDelegation != nil {
		if err := m.SelfDelegation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selfDelegation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selfDelegation")
			}
			return err
		}
	}

	return nil
}

func (m *GetValidatorDetailResult) validateStakingReturn(formats strfmt.Registry) error {

	if err := validate.Required("stakingReturn", "body", m.StakingReturn); err != nil {
		return err
	}

	return nil
}

func (m *GetValidatorDetailResult) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *GetValidatorDetailResult) validateTokens(formats strfmt.Registry) error {

	if err := validate.Required("tokens", "body", m.Tokens); err != nil {
		return err
	}

	return nil
}

func (m *GetValidatorDetailResult) validateUpTime(formats strfmt.Registry) error {

	if err := validate.Required("upTime", "body", m.UpTime); err != nil {
		return err
	}

	return nil
}

func (m *GetValidatorDetailResult) validateVotingPower(formats strfmt.Registry) error {

	if err := validate.Required("votingPower", "body", m.VotingPower); err != nil {
		return err
	}

	if m.VotingPower != nil {
		if err := m.VotingPower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("votingPower")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("votingPower")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get validator detail result based on the context it is used
func (m *GetValidatorDetailResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommissionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMyRewards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMyUndelegation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRewardsPool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfDelegation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVotingPower(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetValidatorDetailResult) contextValidateCommissionInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CommissionInfo != nil {
		if err := m.CommissionInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commissionInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commissionInfo")
			}
			return err
		}
	}

	return nil
}

func (m *GetValidatorDetailResult) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *GetValidatorDetailResult) contextValidateMyRewards(ctx context.Context, formats strfmt.Registry) error {

	if m.MyRewards != nil {
		if err := m.MyRewards.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("myRewards")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("myRewards")
			}
			return err
		}
	}

	return nil
}

func (m *GetValidatorDetailResult) contextValidateMyUndelegation(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MyUndelegation); i++ {

		if m.MyUndelegation[i] != nil {
			if err := m.MyUndelegation[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("myUndelegation" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("myUndelegation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetValidatorDetailResult) contextValidateRewardsPool(ctx context.Context, formats strfmt.Registry) error {

	if m.RewardsPool != nil {
		if err := m.RewardsPool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rewardsPool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rewardsPool")
			}
			return err
		}
	}

	return nil
}

func (m *GetValidatorDetailResult) contextValidateSelfDelegation(ctx context.Context, formats strfmt.Registry) error {

	if m.SelfDelegation != nil {
		if err := m.SelfDelegation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selfDelegation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("selfDelegation")
			}
			return err
		}
	}

	return nil
}

func (m *GetValidatorDetailResult) contextValidateVotingPower(ctx context.Context, formats strfmt.Registry) error {

	if m.VotingPower != nil {
		if err := m.VotingPower.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("votingPower")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("votingPower")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetValidatorDetailResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetValidatorDetailResult) UnmarshalBinary(b []byte) error {
	var res GetValidatorDetailResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
