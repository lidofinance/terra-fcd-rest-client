// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TerraOracleV1beta1AggregateExchangeRateVote MsgAggregateExchangeRateVote - struct for voting on
// the exchange rates of Luna denominated in various Terra assets.
//
// swagger:model terra.oracle.v1beta1.AggregateExchangeRateVote
type TerraOracleV1beta1AggregateExchangeRateVote struct {

	// exchange rate tuples
	ExchangeRateTuples []*TerraOracleV1beta1AggregateExchangeRateVoteExchangeRateTuplesItems0 `json:"exchange_rate_tuples"`

	// voter
	Voter string `json:"voter,omitempty"`
}

// Validate validates this terra oracle v1beta1 aggregate exchange rate vote
func (m *TerraOracleV1beta1AggregateExchangeRateVote) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExchangeRateTuples(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraOracleV1beta1AggregateExchangeRateVote) validateExchangeRateTuples(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeRateTuples) { // not required
		return nil
	}

	for i := 0; i < len(m.ExchangeRateTuples); i++ {
		if swag.IsZero(m.ExchangeRateTuples[i]) { // not required
			continue
		}

		if m.ExchangeRateTuples[i] != nil {
			if err := m.ExchangeRateTuples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exchange_rate_tuples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exchange_rate_tuples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this terra oracle v1beta1 aggregate exchange rate vote based on the context it is used
func (m *TerraOracleV1beta1AggregateExchangeRateVote) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExchangeRateTuples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraOracleV1beta1AggregateExchangeRateVote) contextValidateExchangeRateTuples(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExchangeRateTuples); i++ {

		if m.ExchangeRateTuples[i] != nil {
			if err := m.ExchangeRateTuples[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exchange_rate_tuples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exchange_rate_tuples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TerraOracleV1beta1AggregateExchangeRateVote) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraOracleV1beta1AggregateExchangeRateVote) UnmarshalBinary(b []byte) error {
	var res TerraOracleV1beta1AggregateExchangeRateVote
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TerraOracleV1beta1AggregateExchangeRateVoteExchangeRateTuplesItems0 ExchangeRateTuple - struct to store interpreted exchange rates data to store
//
// swagger:model TerraOracleV1beta1AggregateExchangeRateVoteExchangeRateTuplesItems0
type TerraOracleV1beta1AggregateExchangeRateVoteExchangeRateTuplesItems0 struct {

	// denom
	Denom string `json:"denom,omitempty"`

	// exchange rate
	ExchangeRate string `json:"exchange_rate,omitempty"`
}

// Validate validates this terra oracle v1beta1 aggregate exchange rate vote exchange rate tuples items0
func (m *TerraOracleV1beta1AggregateExchangeRateVoteExchangeRateTuplesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this terra oracle v1beta1 aggregate exchange rate vote exchange rate tuples items0 based on context it is used
func (m *TerraOracleV1beta1AggregateExchangeRateVoteExchangeRateTuplesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TerraOracleV1beta1AggregateExchangeRateVoteExchangeRateTuplesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraOracleV1beta1AggregateExchangeRateVoteExchangeRateTuplesItems0) UnmarshalBinary(b []byte) error {
	var res TerraOracleV1beta1AggregateExchangeRateVoteExchangeRateTuplesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
