// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDashboardResult get dashboard result
//
// swagger:model getDashboardResult
type GetDashboardResult struct {

	// Current state of the community pool
	// Required: true
	CommunityPool *GetDashboardResultCommunityPool `json:"communityPool"`

	// Total issuances of coins
	// Required: true
	Issuances *GetDashboardResultIssuances `json:"issuances"`

	// Current oracle price
	// Required: true
	Prices *GetDashboardResultPrices `json:"prices"`

	// Current state of the staking pool
	// Required: true
	StakingPool *GetDashboardResultStakingPool `json:"stakingPool"`

	// Current tax cap
	// Required: true
	TaxCaps []*GetDashboardResultTaxCaps `json:"taxCaps"`

	// Current tax rate
	// Required: true
	TaxRate *string `json:"taxRate"`
}

// Validate validates this get dashboard result
func (m *GetDashboardResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommunityPool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStakingPool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxCaps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetDashboardResult) validateCommunityPool(formats strfmt.Registry) error {

	if err := validate.Required("communityPool", "body", m.CommunityPool); err != nil {
		return err
	}

	if m.CommunityPool != nil {
		if err := m.CommunityPool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communityPool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communityPool")
			}
			return err
		}
	}

	return nil
}

func (m *GetDashboardResult) validateIssuances(formats strfmt.Registry) error {

	if err := validate.Required("issuances", "body", m.Issuances); err != nil {
		return err
	}

	if m.Issuances != nil {
		if err := m.Issuances.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuances")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuances")
			}
			return err
		}
	}

	return nil
}

func (m *GetDashboardResult) validatePrices(formats strfmt.Registry) error {

	if err := validate.Required("prices", "body", m.Prices); err != nil {
		return err
	}

	if m.Prices != nil {
		if err := m.Prices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prices")
			}
			return err
		}
	}

	return nil
}

func (m *GetDashboardResult) validateStakingPool(formats strfmt.Registry) error {

	if err := validate.Required("stakingPool", "body", m.StakingPool); err != nil {
		return err
	}

	if m.StakingPool != nil {
		if err := m.StakingPool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stakingPool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stakingPool")
			}
			return err
		}
	}

	return nil
}

func (m *GetDashboardResult) validateTaxCaps(formats strfmt.Registry) error {

	if err := validate.Required("taxCaps", "body", m.TaxCaps); err != nil {
		return err
	}

	for i := 0; i < len(m.TaxCaps); i++ {
		if swag.IsZero(m.TaxCaps[i]) { // not required
			continue
		}

		if m.TaxCaps[i] != nil {
			if err := m.TaxCaps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxCaps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taxCaps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetDashboardResult) validateTaxRate(formats strfmt.Registry) error {

	if err := validate.Required("taxRate", "body", m.TaxRate); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get dashboard result based on the context it is used
func (m *GetDashboardResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommunityPool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIssuances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStakingPool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxCaps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetDashboardResult) contextValidateCommunityPool(ctx context.Context, formats strfmt.Registry) error {

	if m.CommunityPool != nil {
		if err := m.CommunityPool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("communityPool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("communityPool")
			}
			return err
		}
	}

	return nil
}

func (m *GetDashboardResult) contextValidateIssuances(ctx context.Context, formats strfmt.Registry) error {

	if m.Issuances != nil {
		if err := m.Issuances.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuances")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuances")
			}
			return err
		}
	}

	return nil
}

func (m *GetDashboardResult) contextValidatePrices(ctx context.Context, formats strfmt.Registry) error {

	if m.Prices != nil {
		if err := m.Prices.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prices")
			}
			return err
		}
	}

	return nil
}

func (m *GetDashboardResult) contextValidateStakingPool(ctx context.Context, formats strfmt.Registry) error {

	if m.StakingPool != nil {
		if err := m.StakingPool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stakingPool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stakingPool")
			}
			return err
		}
	}

	return nil
}

func (m *GetDashboardResult) contextValidateTaxCaps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TaxCaps); i++ {

		if m.TaxCaps[i] != nil {
			if err := m.TaxCaps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxCaps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taxCaps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetDashboardResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetDashboardResult) UnmarshalBinary(b []byte) error {
	var res GetDashboardResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
