// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CosmosStakingV1beta1DelegationResponse DelegationResponse is equivalent to Delegation except that it contains a
// balance in addition to shares which is more suitable for client responses.
//
// swagger:model cosmos.staking.v1beta1.DelegationResponse
type CosmosStakingV1beta1DelegationResponse struct {

	// balance
	Balance *CosmosStakingV1beta1DelegationResponseBalance `json:"balance,omitempty"`

	// delegation
	Delegation *CosmosStakingV1beta1DelegationResponseDelegation `json:"delegation,omitempty"`
}

// Validate validates this cosmos staking v1beta1 delegation response
func (m *CosmosStakingV1beta1DelegationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelegation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1DelegationResponse) validateBalance(formats strfmt.Registry) error {
	if swag.IsZero(m.Balance) { // not required
		return nil
	}

	if m.Balance != nil {
		if err := m.Balance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosStakingV1beta1DelegationResponse) validateDelegation(formats strfmt.Registry) error {
	if swag.IsZero(m.Delegation) { // not required
		return nil
	}

	if m.Delegation != nil {
		if err := m.Delegation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delegation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delegation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cosmos staking v1beta1 delegation response based on the context it is used
func (m *CosmosStakingV1beta1DelegationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBalance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDelegation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1DelegationResponse) contextValidateBalance(ctx context.Context, formats strfmt.Registry) error {

	if m.Balance != nil {
		if err := m.Balance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("balance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("balance")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosStakingV1beta1DelegationResponse) contextValidateDelegation(ctx context.Context, formats strfmt.Registry) error {

	if m.Delegation != nil {
		if err := m.Delegation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delegation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delegation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1DelegationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1DelegationResponse) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1DelegationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosStakingV1beta1DelegationResponseBalance Coin defines a token with a denomination and an amount.
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
//
// swagger:model CosmosStakingV1beta1DelegationResponseBalance
type CosmosStakingV1beta1DelegationResponseBalance struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this cosmos staking v1beta1 delegation response balance
func (m *CosmosStakingV1beta1DelegationResponseBalance) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos staking v1beta1 delegation response balance based on context it is used
func (m *CosmosStakingV1beta1DelegationResponseBalance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1DelegationResponseBalance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1DelegationResponseBalance) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1DelegationResponseBalance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosStakingV1beta1DelegationResponseDelegation Delegation represents the bond with tokens held by an account. It is
// owned by one delegator, and is associated with the voting power of one
// validator.
//
// swagger:model CosmosStakingV1beta1DelegationResponseDelegation
type CosmosStakingV1beta1DelegationResponseDelegation struct {

	// delegator_address is the bech32-encoded address of the delegator.
	DelegatorAddress string `json:"delegator_address,omitempty"`

	// shares define the delegation shares received.
	Shares string `json:"shares,omitempty"`

	// validator_address is the bech32-encoded address of the validator.
	ValidatorAddress string `json:"validator_address,omitempty"`
}

// Validate validates this cosmos staking v1beta1 delegation response delegation
func (m *CosmosStakingV1beta1DelegationResponseDelegation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos staking v1beta1 delegation response delegation based on context it is used
func (m *CosmosStakingV1beta1DelegationResponseDelegation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1DelegationResponseDelegation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1DelegationResponseDelegation) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1DelegationResponseDelegation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
