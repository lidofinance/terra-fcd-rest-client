// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CosmosTxV1beta1Tx Tx is the standard type used for broadcasting transactions.
//
// swagger:model cosmos.tx.v1beta1.Tx
type CosmosTxV1beta1Tx struct {

	// auth_info is the authorization related content of the transaction,
	// specifically signers, signer modes and fee
	AuthInfo *CosmosTxV1beta1AuthInfo `json:"auth_info,omitempty"`

	// body is the processable content of the transaction
	Body *CosmosTxV1beta1TxBody `json:"body,omitempty"`

	// signatures is a list of signatures that matches the length and order of
	// AuthInfo's signer_infos to allow connecting signature meta information like
	// public key and signing mode by position.
	Signatures []strfmt.Base64 `json:"signatures"`
}

// Validate validates this cosmos tx v1beta1 tx
func (m *CosmosTxV1beta1Tx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosTxV1beta1Tx) validateAuthInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthInfo) { // not required
		return nil
	}

	if m.AuthInfo != nil {
		if err := m.AuthInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth_info")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosTxV1beta1Tx) validateBody(formats strfmt.Registry) error {
	if swag.IsZero(m.Body) { // not required
		return nil
	}

	if m.Body != nil {
		if err := m.Body.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cosmos tx v1beta1 tx based on the context it is used
func (m *CosmosTxV1beta1Tx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBody(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosTxV1beta1Tx) contextValidateAuthInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthInfo != nil {
		if err := m.AuthInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("auth_info")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosTxV1beta1Tx) contextValidateBody(ctx context.Context, formats strfmt.Registry) error {

	if m.Body != nil {
		if err := m.Body.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosTxV1beta1Tx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosTxV1beta1Tx) UnmarshalBinary(b []byte) error {
	var res CosmosTxV1beta1Tx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
