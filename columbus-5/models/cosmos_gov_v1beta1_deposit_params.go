// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CosmosGovV1beta1DepositParams DepositParams defines the params for deposits on governance proposals.
//
// swagger:model cosmos.gov.v1beta1.DepositParams
type CosmosGovV1beta1DepositParams struct {

	// Maximum period for Atom holders to deposit on a proposal. Initial value: 2
	//  months.
	MaxDepositPeriod string `json:"max_deposit_period,omitempty"`

	// Minimum deposit for a proposal to enter voting period.
	MinDeposit []*CosmosGovV1beta1DepositParamsMinDepositItems0 `json:"min_deposit"`
}

// Validate validates this cosmos gov v1beta1 deposit params
func (m *CosmosGovV1beta1DepositParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMinDeposit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosGovV1beta1DepositParams) validateMinDeposit(formats strfmt.Registry) error {
	if swag.IsZero(m.MinDeposit) { // not required
		return nil
	}

	for i := 0; i < len(m.MinDeposit); i++ {
		if swag.IsZero(m.MinDeposit[i]) { // not required
			continue
		}

		if m.MinDeposit[i] != nil {
			if err := m.MinDeposit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("min_deposit" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("min_deposit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cosmos gov v1beta1 deposit params based on the context it is used
func (m *CosmosGovV1beta1DepositParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMinDeposit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosGovV1beta1DepositParams) contextValidateMinDeposit(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MinDeposit); i++ {

		if m.MinDeposit[i] != nil {
			if err := m.MinDeposit[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("min_deposit" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("min_deposit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosGovV1beta1DepositParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosGovV1beta1DepositParams) UnmarshalBinary(b []byte) error {
	var res CosmosGovV1beta1DepositParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosGovV1beta1DepositParamsMinDepositItems0 Coin defines a token with a denomination and an amount.
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
//
// swagger:model CosmosGovV1beta1DepositParamsMinDepositItems0
type CosmosGovV1beta1DepositParamsMinDepositItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this cosmos gov v1beta1 deposit params min deposit items0
func (m *CosmosGovV1beta1DepositParamsMinDepositItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos gov v1beta1 deposit params min deposit items0 based on context it is used
func (m *CosmosGovV1beta1DepositParamsMinDepositItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosGovV1beta1DepositParamsMinDepositItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosGovV1beta1DepositParamsMinDepositItems0) UnmarshalBinary(b []byte) error {
	var res CosmosGovV1beta1DepositParamsMinDepositItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
