// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CosmosDistributionV1beta1QueryCommunityPoolResponse QueryCommunityPoolResponse is the response type for the Query/CommunityPool
// RPC method.
//
// swagger:model cosmos.distribution.v1beta1.QueryCommunityPoolResponse
type CosmosDistributionV1beta1QueryCommunityPoolResponse struct {

	// pool defines community pool's coins.
	Pool []*CosmosDistributionV1beta1QueryCommunityPoolResponsePoolItems0 `json:"pool"`
}

// Validate validates this cosmos distribution v1beta1 query community pool response
func (m *CosmosDistributionV1beta1QueryCommunityPoolResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosDistributionV1beta1QueryCommunityPoolResponse) validatePool(formats strfmt.Registry) error {
	if swag.IsZero(m.Pool) { // not required
		return nil
	}

	for i := 0; i < len(m.Pool); i++ {
		if swag.IsZero(m.Pool[i]) { // not required
			continue
		}

		if m.Pool[i] != nil {
			if err := m.Pool[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pool" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pool" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cosmos distribution v1beta1 query community pool response based on the context it is used
func (m *CosmosDistributionV1beta1QueryCommunityPoolResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosDistributionV1beta1QueryCommunityPoolResponse) contextValidatePool(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Pool); i++ {

		if m.Pool[i] != nil {
			if err := m.Pool[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pool" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pool" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosDistributionV1beta1QueryCommunityPoolResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosDistributionV1beta1QueryCommunityPoolResponse) UnmarshalBinary(b []byte) error {
	var res CosmosDistributionV1beta1QueryCommunityPoolResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosDistributionV1beta1QueryCommunityPoolResponsePoolItems0 DecCoin defines a token with a denomination and a decimal amount.
//
// NOTE: The amount field is an Dec which implements the custom method
// signatures required by gogoproto.
//
// swagger:model CosmosDistributionV1beta1QueryCommunityPoolResponsePoolItems0
type CosmosDistributionV1beta1QueryCommunityPoolResponsePoolItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this cosmos distribution v1beta1 query community pool response pool items0
func (m *CosmosDistributionV1beta1QueryCommunityPoolResponsePoolItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos distribution v1beta1 query community pool response pool items0 based on context it is used
func (m *CosmosDistributionV1beta1QueryCommunityPoolResponsePoolItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosDistributionV1beta1QueryCommunityPoolResponsePoolItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosDistributionV1beta1QueryCommunityPoolResponsePoolItems0) UnmarshalBinary(b []byte) error {
	var res CosmosDistributionV1beta1QueryCommunityPoolResponsePoolItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
