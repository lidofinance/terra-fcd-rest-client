// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TerraTreasuryV1beta1PolicyConstraints PolicyConstraints - defines policy constraints can be applied in tax & reward policies
//
// swagger:model terra.treasury.v1beta1.PolicyConstraints
type TerraTreasuryV1beta1PolicyConstraints struct {

	// cap
	Cap *TerraTreasuryV1beta1PolicyConstraintsCap `json:"cap,omitempty"`

	// change rate max
	ChangeRateMax string `json:"change_rate_max,omitempty"`

	// rate max
	RateMax string `json:"rate_max,omitempty"`

	// rate min
	RateMin string `json:"rate_min,omitempty"`
}

// Validate validates this terra treasury v1beta1 policy constraints
func (m *TerraTreasuryV1beta1PolicyConstraints) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraTreasuryV1beta1PolicyConstraints) validateCap(formats strfmt.Registry) error {
	if swag.IsZero(m.Cap) { // not required
		return nil
	}

	if m.Cap != nil {
		if err := m.Cap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this terra treasury v1beta1 policy constraints based on the context it is used
func (m *TerraTreasuryV1beta1PolicyConstraints) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraTreasuryV1beta1PolicyConstraints) contextValidateCap(ctx context.Context, formats strfmt.Registry) error {

	if m.Cap != nil {
		if err := m.Cap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TerraTreasuryV1beta1PolicyConstraints) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraTreasuryV1beta1PolicyConstraints) UnmarshalBinary(b []byte) error {
	var res TerraTreasuryV1beta1PolicyConstraints
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TerraTreasuryV1beta1PolicyConstraintsCap Coin defines a token with a denomination and an amount.
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
//
// swagger:model TerraTreasuryV1beta1PolicyConstraintsCap
type TerraTreasuryV1beta1PolicyConstraintsCap struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this terra treasury v1beta1 policy constraints cap
func (m *TerraTreasuryV1beta1PolicyConstraintsCap) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this terra treasury v1beta1 policy constraints cap based on context it is used
func (m *TerraTreasuryV1beta1PolicyConstraintsCap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TerraTreasuryV1beta1PolicyConstraintsCap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraTreasuryV1beta1PolicyConstraintsCap) UnmarshalBinary(b []byte) error {
	var res TerraTreasuryV1beta1PolicyConstraintsCap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
