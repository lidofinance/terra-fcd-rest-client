// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SendGrantInfo send grant info
//
// swagger:model SendGrantInfo
type SendGrantInfo struct {

	// authorization
	Authorization *SendGrantInfoAuthorization `json:"authorization,omitempty"`

	// expiration
	// Example: 2021-06-24T09:33:20.012999Z
	Expiration string `json:"expiration,omitempty"`
}

// Validate validates this send grant info
func (m *SendGrantInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendGrantInfo) validateAuthorization(formats strfmt.Registry) error {
	if swag.IsZero(m.Authorization) { // not required
		return nil
	}

	if m.Authorization != nil {
		if err := m.Authorization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this send grant info based on the context it is used
func (m *SendGrantInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthorization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendGrantInfo) contextValidateAuthorization(ctx context.Context, formats strfmt.Registry) error {

	if m.Authorization != nil {
		if err := m.Authorization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SendGrantInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendGrantInfo) UnmarshalBinary(b []byte) error {
	var res SendGrantInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SendGrantInfoAuthorization send grant info authorization
//
// swagger:model SendGrantInfoAuthorization
type SendGrantInfoAuthorization struct {

	// type
	// Example: msgauth/SendAuthorization
	Type string `json:"type,omitempty"`

	// value
	Value *SendGrantInfoAuthorizationValue `json:"value,omitempty"`
}

// Validate validates this send grant info authorization
func (m *SendGrantInfoAuthorization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendGrantInfoAuthorization) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if m.Value != nil {
		if err := m.Value.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization" + "." + "value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization" + "." + "value")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this send grant info authorization based on the context it is used
func (m *SendGrantInfoAuthorization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendGrantInfoAuthorization) contextValidateValue(ctx context.Context, formats strfmt.Registry) error {

	if m.Value != nil {
		if err := m.Value.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization" + "." + "value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization" + "." + "value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SendGrantInfoAuthorization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendGrantInfoAuthorization) UnmarshalBinary(b []byte) error {
	var res SendGrantInfoAuthorization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SendGrantInfoAuthorizationValue send grant info authorization value
//
// swagger:model SendGrantInfoAuthorizationValue
type SendGrantInfoAuthorizationValue struct {

	// spend limit
	SpendLimit []*SendGrantInfoAuthorizationValueSpendLimitItems0 `json:"spend_limit"`
}

// Validate validates this send grant info authorization value
func (m *SendGrantInfoAuthorizationValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpendLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendGrantInfoAuthorizationValue) validateSpendLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.SpendLimit) { // not required
		return nil
	}

	for i := 0; i < len(m.SpendLimit); i++ {
		if swag.IsZero(m.SpendLimit[i]) { // not required
			continue
		}

		if m.SpendLimit[i] != nil {
			if err := m.SpendLimit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authorization" + "." + "value" + "." + "spend_limit" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("authorization" + "." + "value" + "." + "spend_limit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this send grant info authorization value based on the context it is used
func (m *SendGrantInfoAuthorizationValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSpendLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendGrantInfoAuthorizationValue) contextValidateSpendLimit(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SpendLimit); i++ {

		if m.SpendLimit[i] != nil {
			if err := m.SpendLimit[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authorization" + "." + "value" + "." + "spend_limit" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("authorization" + "." + "value" + "." + "spend_limit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SendGrantInfoAuthorizationValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendGrantInfoAuthorizationValue) UnmarshalBinary(b []byte) error {
	var res SendGrantInfoAuthorizationValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SendGrantInfoAuthorizationValueSpendLimitItems0 send grant info authorization value spend limit items0
//
// swagger:model SendGrantInfoAuthorizationValueSpendLimitItems0
type SendGrantInfoAuthorizationValueSpendLimitItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this send grant info authorization value spend limit items0
func (m *SendGrantInfoAuthorizationValueSpendLimitItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this send grant info authorization value spend limit items0 based on context it is used
func (m *SendGrantInfoAuthorizationValueSpendLimitItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SendGrantInfoAuthorizationValueSpendLimitItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendGrantInfoAuthorizationValueSpendLimitItems0) UnmarshalBinary(b []byte) error {
	var res SendGrantInfoAuthorizationValueSpendLimitItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
