// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IbcCoreChannelV1QueryPacketAcknowledgementsResponse QueryPacketAcknowledgemetsResponse is the request type for the
// Query/QueryPacketAcknowledgements RPC method
//
// swagger:model ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
type IbcCoreChannelV1QueryPacketAcknowledgementsResponse struct {

	// acknowledgements
	Acknowledgements []*IbcCoreChannelV1QueryPacketAcknowledgementsResponseAcknowledgementsItems0 `json:"acknowledgements"`

	// height
	Height *IbcCoreChannelV1QueryPacketAcknowledgementsResponseHeight `json:"height,omitempty"`

	// pagination
	Pagination *IbcCoreChannelV1QueryPacketAcknowledgementsResponsePagination `json:"pagination,omitempty"`
}

// Validate validates this ibc core channel v1 query packet acknowledgements response
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcknowledgements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponse) validateAcknowledgements(formats strfmt.Registry) error {
	if swag.IsZero(m.Acknowledgements) { // not required
		return nil
	}

	for i := 0; i < len(m.Acknowledgements); i++ {
		if swag.IsZero(m.Acknowledgements[i]) { // not required
			continue
		}

		if m.Acknowledgements[i] != nil {
			if err := m.Acknowledgements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acknowledgements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acknowledgements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponse) validateHeight(formats strfmt.Registry) error {
	if swag.IsZero(m.Height) { // not required
		return nil
	}

	if m.Height != nil {
		if err := m.Height.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("height")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("height")
			}
			return err
		}
	}

	return nil
}

func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponse) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(m.Pagination) { // not required
		return nil
	}

	if m.Pagination != nil {
		if err := m.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ibc core channel v1 query packet acknowledgements response based on the context it is used
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcknowledgements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponse) contextValidateAcknowledgements(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Acknowledgements); i++ {

		if m.Acknowledgements[i] != nil {
			if err := m.Acknowledgements[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acknowledgements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acknowledgements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponse) contextValidateHeight(ctx context.Context, formats strfmt.Registry) error {

	if m.Height != nil {
		if err := m.Height.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("height")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("height")
			}
			return err
		}
	}

	return nil
}

func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponse) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if m.Pagination != nil {
		if err := m.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponse) UnmarshalBinary(b []byte) error {
	var res IbcCoreChannelV1QueryPacketAcknowledgementsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IbcCoreChannelV1QueryPacketAcknowledgementsResponseAcknowledgementsItems0 PacketState defines the generic type necessary to retrieve and store
// packet commitments, acknowledgements, and receipts.
// Caller is responsible for knowing the context necessary to interpret this
// state as a commitment, acknowledgement, or a receipt.
//
// swagger:model IbcCoreChannelV1QueryPacketAcknowledgementsResponseAcknowledgementsItems0
type IbcCoreChannelV1QueryPacketAcknowledgementsResponseAcknowledgementsItems0 struct {

	// channel unique identifier.
	ChannelID string `json:"channel_id,omitempty"`

	// embedded data that represents packet state.
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// channel port identifier.
	PortID string `json:"port_id,omitempty"`

	// packet sequence.
	Sequence string `json:"sequence,omitempty"`
}

// Validate validates this ibc core channel v1 query packet acknowledgements response acknowledgements items0
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponseAcknowledgementsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ibc core channel v1 query packet acknowledgements response acknowledgements items0 based on context it is used
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponseAcknowledgementsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponseAcknowledgementsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponseAcknowledgementsItems0) UnmarshalBinary(b []byte) error {
	var res IbcCoreChannelV1QueryPacketAcknowledgementsResponseAcknowledgementsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IbcCoreChannelV1QueryPacketAcknowledgementsResponseHeight query block height
//
// Normally the RevisionHeight is incremented at each height while keeping
// RevisionNumber the same. However some consensus algorithms may choose to
// reset the height in certain conditions e.g. hard forks, state-machine
// breaking changes In these cases, the RevisionNumber is incremented so that
// height continues to be monitonically increasing even as the RevisionHeight
// gets reset
//
// swagger:model IbcCoreChannelV1QueryPacketAcknowledgementsResponseHeight
type IbcCoreChannelV1QueryPacketAcknowledgementsResponseHeight struct {

	// the height within the given revision
	RevisionHeight string `json:"revision_height,omitempty"`

	// the revision that the client is currently on
	RevisionNumber string `json:"revision_number,omitempty"`
}

// Validate validates this ibc core channel v1 query packet acknowledgements response height
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponseHeight) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ibc core channel v1 query packet acknowledgements response height based on context it is used
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponseHeight) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponseHeight) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponseHeight) UnmarshalBinary(b []byte) error {
	var res IbcCoreChannelV1QueryPacketAcknowledgementsResponseHeight
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IbcCoreChannelV1QueryPacketAcknowledgementsResponsePagination pagination response
//
// PageResponse is to be embedded in gRPC response messages where the
// corresponding request message has used PageRequest.
//
//  message SomeResponse {
//          repeated Bar results = 1;
//          PageResponse page = 2;
//  }
//
// swagger:model IbcCoreChannelV1QueryPacketAcknowledgementsResponsePagination
type IbcCoreChannelV1QueryPacketAcknowledgementsResponsePagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this ibc core channel v1 query packet acknowledgements response pagination
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponsePagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ibc core channel v1 query packet acknowledgements response pagination based on context it is used
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponsePagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponsePagination) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketAcknowledgementsResponsePagination) UnmarshalBinary(b []byte) error {
	var res IbcCoreChannelV1QueryPacketAcknowledgementsResponsePagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
