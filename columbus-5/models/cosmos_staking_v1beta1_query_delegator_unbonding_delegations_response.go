// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse QueryUnbondingDelegatorDelegationsResponse is response type for the
// Query/UnbondingDelegatorDelegations RPC method.
//
// swagger:model cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse
type CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse struct {

	// pagination
	Pagination *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponsePagination `json:"pagination,omitempty"`

	// unbonding responses
	UnbondingResponses []*CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0 `json:"unbonding_responses"`
}

// Validate validates this cosmos staking v1beta1 query delegator unbonding delegations response
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnbondingResponses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(m.Pagination) { // not required
		return nil
	}

	if m.Pagination != nil {
		if err := m.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse) validateUnbondingResponses(formats strfmt.Registry) error {
	if swag.IsZero(m.UnbondingResponses) { // not required
		return nil
	}

	for i := 0; i < len(m.UnbondingResponses); i++ {
		if swag.IsZero(m.UnbondingResponses[i]) { // not required
			continue
		}

		if m.UnbondingResponses[i] != nil {
			if err := m.UnbondingResponses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unbonding_responses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unbonding_responses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cosmos staking v1beta1 query delegator unbonding delegations response based on the context it is used
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnbondingResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if m.Pagination != nil {
		if err := m.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse) contextValidateUnbondingResponses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UnbondingResponses); i++ {

		if m.UnbondingResponses[i] != nil {
			if err := m.UnbondingResponses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unbonding_responses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unbonding_responses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponsePagination pagination defines the pagination in the response.
//
// swagger:model CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponsePagination
type CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponsePagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this cosmos staking v1beta1 query delegator unbonding delegations response pagination
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponsePagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos staking v1beta1 query delegator unbonding delegations response pagination based on context it is used
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponsePagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponsePagination) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponsePagination) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponsePagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0 UnbondingDelegation stores all of a single delegator's unbonding bonds
// for a single validator in an time-ordered list.
//
// swagger:model CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0
type CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0 struct {

	// delegator_address is the bech32-encoded address of the delegator.
	DelegatorAddress string `json:"delegator_address,omitempty"`

	// entries are the unbonding delegation entries.
	Entries []*CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0EntriesItems0 `json:"entries"`

	// validator_address is the bech32-encoded address of the validator.
	ValidatorAddress string `json:"validator_address,omitempty"`
}

// Validate validates this cosmos staking v1beta1 query delegator unbonding delegations response unbonding responses items0
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0) validateEntries(formats strfmt.Registry) error {
	if swag.IsZero(m.Entries) { // not required
		return nil
	}

	for i := 0; i < len(m.Entries); i++ {
		if swag.IsZero(m.Entries[i]) { // not required
			continue
		}

		if m.Entries[i] != nil {
			if err := m.Entries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cosmos staking v1beta1 query delegator unbonding delegations response unbonding responses items0 based on the context it is used
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0) contextValidateEntries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Entries); i++ {

		if m.Entries[i] != nil {
			if err := m.Entries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0EntriesItems0 UnbondingDelegationEntry defines an unbonding object with relevant metadata.
//
// swagger:model CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0EntriesItems0
type CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0EntriesItems0 struct {

	// balance defines the tokens to receive at completion.
	Balance string `json:"balance,omitempty"`

	// completion_time is the unix time for unbonding completion.
	// Format: date-time
	CompletionTime strfmt.DateTime `json:"completion_time,omitempty"`

	// creation_height is the height which the unbonding took place.
	CreationHeight string `json:"creation_height,omitempty"`

	// initial_balance defines the tokens initially scheduled to receive at completion.
	InitialBalance string `json:"initial_balance,omitempty"`
}

// Validate validates this cosmos staking v1beta1 query delegator unbonding delegations response unbonding responses items0 entries items0
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0EntriesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletionTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0EntriesItems0) validateCompletionTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CompletionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("completion_time", "body", "date-time", m.CompletionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cosmos staking v1beta1 query delegator unbonding delegations response unbonding responses items0 entries items0 based on context it is used
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0EntriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0EntriesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0EntriesItems0) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponseUnbondingResponsesItems0EntriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
