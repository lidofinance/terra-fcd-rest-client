// Code generated by go-swagger; DO NOT EDIT.

package tendermint_rpc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetBlocksLatestReader is a Reader for the GetBlocksLatest structure.
type GetBlocksLatestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBlocksLatestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBlocksLatestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetBlocksLatestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetBlocksLatestOK creates a GetBlocksLatestOK with default headers values
func NewGetBlocksLatestOK() *GetBlocksLatestOK {
	return &GetBlocksLatestOK{}
}

/* GetBlocksLatestOK describes a response with status code 200, with default header values.

The latest block
*/
type GetBlocksLatestOK struct {
	Payload *GetBlocksLatestOKBody
}

func (o *GetBlocksLatestOK) Error() string {
	return fmt.Sprintf("[GET /blocks/latest][%d] getBlocksLatestOK  %+v", 200, o.Payload)
}
func (o *GetBlocksLatestOK) GetPayload() *GetBlocksLatestOKBody {
	return o.Payload
}

func (o *GetBlocksLatestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetBlocksLatestOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBlocksLatestInternalServerError creates a GetBlocksLatestInternalServerError with default headers values
func NewGetBlocksLatestInternalServerError() *GetBlocksLatestInternalServerError {
	return &GetBlocksLatestInternalServerError{}
}

/* GetBlocksLatestInternalServerError describes a response with status code 500, with default header values.

Server internal error
*/
type GetBlocksLatestInternalServerError struct {
}

func (o *GetBlocksLatestInternalServerError) Error() string {
	return fmt.Sprintf("[GET /blocks/latest][%d] getBlocksLatestInternalServerError ", 500)
}

func (o *GetBlocksLatestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetBlocksLatestOKBody get blocks latest o k body
swagger:model GetBlocksLatestOKBody
*/
type GetBlocksLatestOKBody struct {

	// block
	Block *GetBlocksLatestOKBodyBlock `json:"block,omitempty"`

	// block meta
	BlockMeta *GetBlocksLatestOKBodyBlockMeta `json:"block_meta,omitempty"`
}

// Validate validates this get blocks latest o k body
func (o *GetBlocksLatestOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBlockMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBody) validateBlock(formats strfmt.Registry) error {
	if swag.IsZero(o.Block) { // not required
		return nil
	}

	if o.Block != nil {
		if err := o.Block.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block")
			}
			return err
		}
	}

	return nil
}

func (o *GetBlocksLatestOKBody) validateBlockMeta(formats strfmt.Registry) error {
	if swag.IsZero(o.BlockMeta) { // not required
		return nil
	}

	if o.BlockMeta != nil {
		if err := o.BlockMeta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block_meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block_meta")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get blocks latest o k body based on the context it is used
func (o *GetBlocksLatestOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBlockMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBody) contextValidateBlock(ctx context.Context, formats strfmt.Registry) error {

	if o.Block != nil {
		if err := o.Block.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block")
			}
			return err
		}
	}

	return nil
}

func (o *GetBlocksLatestOKBody) contextValidateBlockMeta(ctx context.Context, formats strfmt.Registry) error {

	if o.BlockMeta != nil {
		if err := o.BlockMeta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block_meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block_meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBody) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlock get blocks latest o k body block
swagger:model GetBlocksLatestOKBodyBlock
*/
type GetBlocksLatestOKBodyBlock struct {

	// evidence
	Evidence []string `json:"evidence"`

	// header
	Header *GetBlocksLatestOKBodyBlockHeader `json:"header,omitempty"`

	// last commit
	LastCommit *GetBlocksLatestOKBodyBlockLastCommit `json:"last_commit,omitempty"`

	// txs
	Txs []string `json:"txs"`
}

// Validate validates this get blocks latest o k body block
func (o *GetBlocksLatestOKBodyBlock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastCommit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlock) validateHeader(formats strfmt.Registry) error {
	if swag.IsZero(o.Header) { // not required
		return nil
	}

	if o.Header != nil {
		if err := o.Header.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header")
			}
			return err
		}
	}

	return nil
}

func (o *GetBlocksLatestOKBodyBlock) validateLastCommit(formats strfmt.Registry) error {
	if swag.IsZero(o.LastCommit) { // not required
		return nil
	}

	if o.LastCommit != nil {
		if err := o.LastCommit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get blocks latest o k body block based on the context it is used
func (o *GetBlocksLatestOKBodyBlock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLastCommit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlock) contextValidateHeader(ctx context.Context, formats strfmt.Registry) error {

	if o.Header != nil {
		if err := o.Header.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header")
			}
			return err
		}
	}

	return nil
}

func (o *GetBlocksLatestOKBodyBlock) contextValidateLastCommit(ctx context.Context, formats strfmt.Registry) error {

	if o.LastCommit != nil {
		if err := o.LastCommit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlock) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlock) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockHeader get blocks latest o k body block header
swagger:model GetBlocksLatestOKBodyBlockHeader
*/
type GetBlocksLatestOKBodyBlockHeader struct {

	// app hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	AppHash string `json:"app_hash,omitempty"`

	// chain id
	// Example: columbus-5
	ChainID string `json:"chain_id,omitempty"`

	// consensus hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	ConsensusHash string `json:"consensus_hash,omitempty"`

	// data hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	DataHash string `json:"data_hash,omitempty"`

	// evidence hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	EvidenceHash string `json:"evidence_hash,omitempty"`

	// height
	// Example: 1
	Height float64 `json:"height,omitempty"`

	// last block id
	LastBlockID *GetBlocksLatestOKBodyBlockHeaderLastBlockID `json:"last_block_id,omitempty"`

	// last commit hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	LastCommitHash string `json:"last_commit_hash,omitempty"`

	// last results hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	LastResultsHash string `json:"last_results_hash,omitempty"`

	// next validators hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	NextValidatorsHash string `json:"next_validators_hash,omitempty"`

	// num txs
	// Example: 0
	NumTxs float64 `json:"num_txs,omitempty"`

	// bech32 encoded address
	// Example: terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv
	ProposerAddress string `json:"proposer_address,omitempty"`

	// time
	// Example: 2017-12-30T05:53:09.287+01:00
	Time string `json:"time,omitempty"`

	// total txs
	// Example: 35
	TotalTxs float64 `json:"total_txs,omitempty"`

	// validators hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	ValidatorsHash string `json:"validators_hash,omitempty"`

	// version
	Version *GetBlocksLatestOKBodyBlockHeaderVersion `json:"version,omitempty"`
}

// Validate validates this get blocks latest o k body block header
func (o *GetBlocksLatestOKBodyBlockHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLastBlockID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockHeader) validateLastBlockID(formats strfmt.Registry) error {
	if swag.IsZero(o.LastBlockID) { // not required
		return nil
	}

	if o.LastBlockID != nil {
		if err := o.LastBlockID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header" + "." + "last_block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header" + "." + "last_block_id")
			}
			return err
		}
	}

	return nil
}

func (o *GetBlocksLatestOKBodyBlockHeader) validateVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.Version) { // not required
		return nil
	}

	if o.Version != nil {
		if err := o.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header" + "." + "version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header" + "." + "version")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get blocks latest o k body block header based on the context it is used
func (o *GetBlocksLatestOKBodyBlockHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLastBlockID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockHeader) contextValidateLastBlockID(ctx context.Context, formats strfmt.Registry) error {

	if o.LastBlockID != nil {
		if err := o.LastBlockID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header" + "." + "last_block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header" + "." + "last_block_id")
			}
			return err
		}
	}

	return nil
}

func (o *GetBlocksLatestOKBodyBlockHeader) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.Version != nil {
		if err := o.Version.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header" + "." + "version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header" + "." + "version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockHeader) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockHeader) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockHeaderLastBlockID get blocks latest o k body block header last block ID
swagger:model GetBlocksLatestOKBodyBlockHeaderLastBlockID
*/
type GetBlocksLatestOKBodyBlockHeaderLastBlockID struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// parts
	Parts *GetBlocksLatestOKBodyBlockHeaderLastBlockIDParts `json:"parts,omitempty"`
}

// Validate validates this get blocks latest o k body block header last block ID
func (o *GetBlocksLatestOKBodyBlockHeaderLastBlockID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockHeaderLastBlockID) validateParts(formats strfmt.Registry) error {
	if swag.IsZero(o.Parts) { // not required
		return nil
	}

	if o.Parts != nil {
		if err := o.Parts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header" + "." + "last_block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header" + "." + "last_block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get blocks latest o k body block header last block ID based on the context it is used
func (o *GetBlocksLatestOKBodyBlockHeaderLastBlockID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockHeaderLastBlockID) contextValidateParts(ctx context.Context, formats strfmt.Registry) error {

	if o.Parts != nil {
		if err := o.Parts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header" + "." + "last_block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "header" + "." + "last_block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockHeaderLastBlockID) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockHeaderLastBlockID) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockHeaderLastBlockID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockHeaderLastBlockIDParts get blocks latest o k body block header last block ID parts
swagger:model GetBlocksLatestOKBodyBlockHeaderLastBlockIDParts
*/
type GetBlocksLatestOKBodyBlockHeaderLastBlockIDParts struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// total
	// Example: 0
	Total float64 `json:"total,omitempty"`
}

// Validate validates this get blocks latest o k body block header last block ID parts
func (o *GetBlocksLatestOKBodyBlockHeaderLastBlockIDParts) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get blocks latest o k body block header last block ID parts based on context it is used
func (o *GetBlocksLatestOKBodyBlockHeaderLastBlockIDParts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockHeaderLastBlockIDParts) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockHeaderLastBlockIDParts) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockHeaderLastBlockIDParts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockHeaderVersion get blocks latest o k body block header version
swagger:model GetBlocksLatestOKBodyBlockHeaderVersion
*/
type GetBlocksLatestOKBodyBlockHeaderVersion struct {

	// app
	// Example: 0
	App string `json:"app,omitempty"`

	// block
	// Example: 10
	Block string `json:"block,omitempty"`
}

// Validate validates this get blocks latest o k body block header version
func (o *GetBlocksLatestOKBodyBlockHeaderVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get blocks latest o k body block header version based on context it is used
func (o *GetBlocksLatestOKBodyBlockHeaderVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockHeaderVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockHeaderVersion) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockHeaderVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockLastCommit get blocks latest o k body block last commit
swagger:model GetBlocksLatestOKBodyBlockLastCommit
*/
type GetBlocksLatestOKBodyBlockLastCommit struct {

	// block id
	BlockID *GetBlocksLatestOKBodyBlockLastCommitBlockID `json:"block_id,omitempty"`

	// precommits
	Precommits []*GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0 `json:"precommits"`
}

// Validate validates this get blocks latest o k body block last commit
func (o *GetBlocksLatestOKBodyBlockLastCommit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBlockID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrecommits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockLastCommit) validateBlockID(formats strfmt.Registry) error {
	if swag.IsZero(o.BlockID) { // not required
		return nil
	}

	if o.BlockID != nil {
		if err := o.BlockID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit" + "." + "block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit" + "." + "block_id")
			}
			return err
		}
	}

	return nil
}

func (o *GetBlocksLatestOKBodyBlockLastCommit) validatePrecommits(formats strfmt.Registry) error {
	if swag.IsZero(o.Precommits) { // not required
		return nil
	}

	for i := 0; i < len(o.Precommits); i++ {
		if swag.IsZero(o.Precommits[i]) { // not required
			continue
		}

		if o.Precommits[i] != nil {
			if err := o.Precommits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit" + "." + "precommits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit" + "." + "precommits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get blocks latest o k body block last commit based on the context it is used
func (o *GetBlocksLatestOKBodyBlockLastCommit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBlockID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePrecommits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockLastCommit) contextValidateBlockID(ctx context.Context, formats strfmt.Registry) error {

	if o.BlockID != nil {
		if err := o.BlockID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit" + "." + "block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit" + "." + "block_id")
			}
			return err
		}
	}

	return nil
}

func (o *GetBlocksLatestOKBodyBlockLastCommit) contextValidatePrecommits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Precommits); i++ {

		if o.Precommits[i] != nil {
			if err := o.Precommits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit" + "." + "precommits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit" + "." + "precommits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockLastCommit) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockLastCommit) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockLastCommit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockLastCommitBlockID get blocks latest o k body block last commit block ID
swagger:model GetBlocksLatestOKBodyBlockLastCommitBlockID
*/
type GetBlocksLatestOKBodyBlockLastCommitBlockID struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// parts
	Parts *GetBlocksLatestOKBodyBlockLastCommitBlockIDParts `json:"parts,omitempty"`
}

// Validate validates this get blocks latest o k body block last commit block ID
func (o *GetBlocksLatestOKBodyBlockLastCommitBlockID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockLastCommitBlockID) validateParts(formats strfmt.Registry) error {
	if swag.IsZero(o.Parts) { // not required
		return nil
	}

	if o.Parts != nil {
		if err := o.Parts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit" + "." + "block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit" + "." + "block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get blocks latest o k body block last commit block ID based on the context it is used
func (o *GetBlocksLatestOKBodyBlockLastCommitBlockID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockLastCommitBlockID) contextValidateParts(ctx context.Context, formats strfmt.Registry) error {

	if o.Parts != nil {
		if err := o.Parts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit" + "." + "block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block" + "." + "last_commit" + "." + "block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockLastCommitBlockID) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockLastCommitBlockID) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockLastCommitBlockID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockLastCommitBlockIDParts get blocks latest o k body block last commit block ID parts
swagger:model GetBlocksLatestOKBodyBlockLastCommitBlockIDParts
*/
type GetBlocksLatestOKBodyBlockLastCommitBlockIDParts struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// total
	// Example: 0
	Total float64 `json:"total,omitempty"`
}

// Validate validates this get blocks latest o k body block last commit block ID parts
func (o *GetBlocksLatestOKBodyBlockLastCommitBlockIDParts) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get blocks latest o k body block last commit block ID parts based on context it is used
func (o *GetBlocksLatestOKBodyBlockLastCommitBlockIDParts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockLastCommitBlockIDParts) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockLastCommitBlockIDParts) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockLastCommitBlockIDParts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0 get blocks latest o k body block last commit precommits items0
swagger:model GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0
*/
type GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0 struct {

	// block id
	BlockID *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockID `json:"block_id,omitempty"`

	// height
	// Example: 0
	Height string `json:"height,omitempty"`

	// round
	// Example: 0
	Round string `json:"round,omitempty"`

	// signature
	// Example: 7uTC74QlknqYWEwg7Vn6M8Om7FuZ0EO4bjvuj6rwH1mTUJrRuMMZvAAqT9VjNgP0RA/TDp6u/92AqrZfXJSpBQ==
	Signature string `json:"signature,omitempty"`

	// timestamp
	// Example: 2017-12-30T05:53:09.287+01:00
	Timestamp string `json:"timestamp,omitempty"`

	// type
	// Example: 2
	Type float64 `json:"type,omitempty"`

	// validator address
	ValidatorAddress string `json:"validator_address,omitempty"`

	// validator index
	// Example: 0
	ValidatorIndex string `json:"validator_index,omitempty"`
}

// Validate validates this get blocks latest o k body block last commit precommits items0
func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBlockID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0) validateBlockID(formats strfmt.Registry) error {
	if swag.IsZero(o.BlockID) { // not required
		return nil
	}

	if o.BlockID != nil {
		if err := o.BlockID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_id")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get blocks latest o k body block last commit precommits items0 based on the context it is used
func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBlockID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0) contextValidateBlockID(ctx context.Context, formats strfmt.Registry) error {

	if o.BlockID != nil {
		if err := o.BlockID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockID get blocks latest o k body block last commit precommits items0 block ID
swagger:model GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockID
*/
type GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockID struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// parts
	Parts *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockIDParts `json:"parts,omitempty"`
}

// Validate validates this get blocks latest o k body block last commit precommits items0 block ID
func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockID) validateParts(formats strfmt.Registry) error {
	if swag.IsZero(o.Parts) { // not required
		return nil
	}

	if o.Parts != nil {
		if err := o.Parts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get blocks latest o k body block last commit precommits items0 block ID based on the context it is used
func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockID) contextValidateParts(ctx context.Context, formats strfmt.Registry) error {

	if o.Parts != nil {
		if err := o.Parts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockID) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockID) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockIDParts get blocks latest o k body block last commit precommits items0 block ID parts
swagger:model GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockIDParts
*/
type GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockIDParts struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// total
	// Example: 0
	Total float64 `json:"total,omitempty"`
}

// Validate validates this get blocks latest o k body block last commit precommits items0 block ID parts
func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockIDParts) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get blocks latest o k body block last commit precommits items0 block ID parts based on context it is used
func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockIDParts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockIDParts) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockIDParts) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockLastCommitPrecommitsItems0BlockIDParts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockMeta get blocks latest o k body block meta
swagger:model GetBlocksLatestOKBodyBlockMeta
*/
type GetBlocksLatestOKBodyBlockMeta struct {

	// block id
	BlockID *GetBlocksLatestOKBodyBlockMetaBlockID `json:"block_id,omitempty"`

	// header
	Header *GetBlocksLatestOKBodyBlockMetaHeader `json:"header,omitempty"`
}

// Validate validates this get blocks latest o k body block meta
func (o *GetBlocksLatestOKBodyBlockMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBlockID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockMeta) validateBlockID(formats strfmt.Registry) error {
	if swag.IsZero(o.BlockID) { // not required
		return nil
	}

	if o.BlockID != nil {
		if err := o.BlockID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "block_id")
			}
			return err
		}
	}

	return nil
}

func (o *GetBlocksLatestOKBodyBlockMeta) validateHeader(formats strfmt.Registry) error {
	if swag.IsZero(o.Header) { // not required
		return nil
	}

	if o.Header != nil {
		if err := o.Header.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get blocks latest o k body block meta based on the context it is used
func (o *GetBlocksLatestOKBodyBlockMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBlockID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockMeta) contextValidateBlockID(ctx context.Context, formats strfmt.Registry) error {

	if o.BlockID != nil {
		if err := o.BlockID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "block_id")
			}
			return err
		}
	}

	return nil
}

func (o *GetBlocksLatestOKBodyBlockMeta) contextValidateHeader(ctx context.Context, formats strfmt.Registry) error {

	if o.Header != nil {
		if err := o.Header.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockMeta) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockMeta) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockMetaBlockID get blocks latest o k body block meta block ID
swagger:model GetBlocksLatestOKBodyBlockMetaBlockID
*/
type GetBlocksLatestOKBodyBlockMetaBlockID struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// parts
	Parts *GetBlocksLatestOKBodyBlockMetaBlockIDParts `json:"parts,omitempty"`
}

// Validate validates this get blocks latest o k body block meta block ID
func (o *GetBlocksLatestOKBodyBlockMetaBlockID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockMetaBlockID) validateParts(formats strfmt.Registry) error {
	if swag.IsZero(o.Parts) { // not required
		return nil
	}

	if o.Parts != nil {
		if err := o.Parts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get blocks latest o k body block meta block ID based on the context it is used
func (o *GetBlocksLatestOKBodyBlockMetaBlockID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockMetaBlockID) contextValidateParts(ctx context.Context, formats strfmt.Registry) error {

	if o.Parts != nil {
		if err := o.Parts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockMetaBlockID) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockMetaBlockID) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockMetaBlockID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockMetaBlockIDParts get blocks latest o k body block meta block ID parts
swagger:model GetBlocksLatestOKBodyBlockMetaBlockIDParts
*/
type GetBlocksLatestOKBodyBlockMetaBlockIDParts struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// total
	// Example: 0
	Total float64 `json:"total,omitempty"`
}

// Validate validates this get blocks latest o k body block meta block ID parts
func (o *GetBlocksLatestOKBodyBlockMetaBlockIDParts) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get blocks latest o k body block meta block ID parts based on context it is used
func (o *GetBlocksLatestOKBodyBlockMetaBlockIDParts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockMetaBlockIDParts) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockMetaBlockIDParts) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockMetaBlockIDParts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockMetaHeader get blocks latest o k body block meta header
swagger:model GetBlocksLatestOKBodyBlockMetaHeader
*/
type GetBlocksLatestOKBodyBlockMetaHeader struct {

	// app hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	AppHash string `json:"app_hash,omitempty"`

	// chain id
	// Example: columbus-5
	ChainID string `json:"chain_id,omitempty"`

	// consensus hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	ConsensusHash string `json:"consensus_hash,omitempty"`

	// data hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	DataHash string `json:"data_hash,omitempty"`

	// evidence hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	EvidenceHash string `json:"evidence_hash,omitempty"`

	// height
	// Example: 1
	Height float64 `json:"height,omitempty"`

	// last block id
	LastBlockID *GetBlocksLatestOKBodyBlockMetaHeaderLastBlockID `json:"last_block_id,omitempty"`

	// last commit hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	LastCommitHash string `json:"last_commit_hash,omitempty"`

	// last results hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	LastResultsHash string `json:"last_results_hash,omitempty"`

	// next validators hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	NextValidatorsHash string `json:"next_validators_hash,omitempty"`

	// num txs
	// Example: 0
	NumTxs float64 `json:"num_txs,omitempty"`

	// bech32 encoded address
	// Example: terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv
	ProposerAddress string `json:"proposer_address,omitempty"`

	// time
	// Example: 2017-12-30T05:53:09.287+01:00
	Time string `json:"time,omitempty"`

	// total txs
	// Example: 35
	TotalTxs float64 `json:"total_txs,omitempty"`

	// validators hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	ValidatorsHash string `json:"validators_hash,omitempty"`

	// version
	Version *GetBlocksLatestOKBodyBlockMetaHeaderVersion `json:"version,omitempty"`
}

// Validate validates this get blocks latest o k body block meta header
func (o *GetBlocksLatestOKBodyBlockMetaHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLastBlockID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockMetaHeader) validateLastBlockID(formats strfmt.Registry) error {
	if swag.IsZero(o.LastBlockID) { // not required
		return nil
	}

	if o.LastBlockID != nil {
		if err := o.LastBlockID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header" + "." + "last_block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header" + "." + "last_block_id")
			}
			return err
		}
	}

	return nil
}

func (o *GetBlocksLatestOKBodyBlockMetaHeader) validateVersion(formats strfmt.Registry) error {
	if swag.IsZero(o.Version) { // not required
		return nil
	}

	if o.Version != nil {
		if err := o.Version.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header" + "." + "version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header" + "." + "version")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get blocks latest o k body block meta header based on the context it is used
func (o *GetBlocksLatestOKBodyBlockMetaHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLastBlockID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockMetaHeader) contextValidateLastBlockID(ctx context.Context, formats strfmt.Registry) error {

	if o.LastBlockID != nil {
		if err := o.LastBlockID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header" + "." + "last_block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header" + "." + "last_block_id")
			}
			return err
		}
	}

	return nil
}

func (o *GetBlocksLatestOKBodyBlockMetaHeader) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if o.Version != nil {
		if err := o.Version.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header" + "." + "version")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header" + "." + "version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockMetaHeader) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockMetaHeader) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockMetaHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockMetaHeaderLastBlockID get blocks latest o k body block meta header last block ID
swagger:model GetBlocksLatestOKBodyBlockMetaHeaderLastBlockID
*/
type GetBlocksLatestOKBodyBlockMetaHeaderLastBlockID struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// parts
	Parts *GetBlocksLatestOKBodyBlockMetaHeaderLastBlockIDParts `json:"parts,omitempty"`
}

// Validate validates this get blocks latest o k body block meta header last block ID
func (o *GetBlocksLatestOKBodyBlockMetaHeaderLastBlockID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockMetaHeaderLastBlockID) validateParts(formats strfmt.Registry) error {
	if swag.IsZero(o.Parts) { // not required
		return nil
	}

	if o.Parts != nil {
		if err := o.Parts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header" + "." + "last_block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header" + "." + "last_block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get blocks latest o k body block meta header last block ID based on the context it is used
func (o *GetBlocksLatestOKBodyBlockMetaHeaderLastBlockID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBlocksLatestOKBodyBlockMetaHeaderLastBlockID) contextValidateParts(ctx context.Context, formats strfmt.Registry) error {

	if o.Parts != nil {
		if err := o.Parts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header" + "." + "last_block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBlocksLatestOK" + "." + "block_meta" + "." + "header" + "." + "last_block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockMetaHeaderLastBlockID) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockMetaHeaderLastBlockID) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockMetaHeaderLastBlockID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockMetaHeaderLastBlockIDParts get blocks latest o k body block meta header last block ID parts
swagger:model GetBlocksLatestOKBodyBlockMetaHeaderLastBlockIDParts
*/
type GetBlocksLatestOKBodyBlockMetaHeaderLastBlockIDParts struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// total
	// Example: 0
	Total float64 `json:"total,omitempty"`
}

// Validate validates this get blocks latest o k body block meta header last block ID parts
func (o *GetBlocksLatestOKBodyBlockMetaHeaderLastBlockIDParts) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get blocks latest o k body block meta header last block ID parts based on context it is used
func (o *GetBlocksLatestOKBodyBlockMetaHeaderLastBlockIDParts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockMetaHeaderLastBlockIDParts) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockMetaHeaderLastBlockIDParts) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockMetaHeaderLastBlockIDParts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetBlocksLatestOKBodyBlockMetaHeaderVersion get blocks latest o k body block meta header version
swagger:model GetBlocksLatestOKBodyBlockMetaHeaderVersion
*/
type GetBlocksLatestOKBodyBlockMetaHeaderVersion struct {

	// app
	// Example: 0
	App string `json:"app,omitempty"`

	// block
	// Example: 10
	Block string `json:"block,omitempty"`
}

// Validate validates this get blocks latest o k body block meta header version
func (o *GetBlocksLatestOKBodyBlockMetaHeaderVersion) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get blocks latest o k body block meta header version based on context it is used
func (o *GetBlocksLatestOKBodyBlockMetaHeaderVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockMetaHeaderVersion) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBlocksLatestOKBodyBlockMetaHeaderVersion) UnmarshalBinary(b []byte) error {
	var res GetBlocksLatestOKBodyBlockMetaHeaderVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
