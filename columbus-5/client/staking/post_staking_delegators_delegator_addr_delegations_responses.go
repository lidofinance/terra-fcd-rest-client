// Code generated by go-swagger; DO NOT EDIT.

package staking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostStakingDelegatorsDelegatorAddrDelegationsReader is a Reader for the PostStakingDelegatorsDelegatorAddrDelegations structure.
type PostStakingDelegatorsDelegatorAddrDelegationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostStakingDelegatorsDelegatorAddrDelegationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostStakingDelegatorsDelegatorAddrDelegationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostStakingDelegatorsDelegatorAddrDelegationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostStakingDelegatorsDelegatorAddrDelegationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostStakingDelegatorsDelegatorAddrDelegationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostStakingDelegatorsDelegatorAddrDelegationsOK creates a PostStakingDelegatorsDelegatorAddrDelegationsOK with default headers values
func NewPostStakingDelegatorsDelegatorAddrDelegationsOK() *PostStakingDelegatorsDelegatorAddrDelegationsOK {
	return &PostStakingDelegatorsDelegatorAddrDelegationsOK{}
}

/* PostStakingDelegatorsDelegatorAddrDelegationsOK describes a response with status code 200, with default header values.

OK
*/
type PostStakingDelegatorsDelegatorAddrDelegationsOK struct {
	Payload *PostStakingDelegatorsDelegatorAddrDelegationsOKBody
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsOK) Error() string {
	return fmt.Sprintf("[POST /staking/delegators/{delegatorAddr}/delegations][%d] postStakingDelegatorsDelegatorAddrDelegationsOK  %+v", 200, o.Payload)
}
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOK) GetPayload() *PostStakingDelegatorsDelegatorAddrDelegationsOKBody {
	return o.Payload
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostStakingDelegatorsDelegatorAddrDelegationsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostStakingDelegatorsDelegatorAddrDelegationsBadRequest creates a PostStakingDelegatorsDelegatorAddrDelegationsBadRequest with default headers values
func NewPostStakingDelegatorsDelegatorAddrDelegationsBadRequest() *PostStakingDelegatorsDelegatorAddrDelegationsBadRequest {
	return &PostStakingDelegatorsDelegatorAddrDelegationsBadRequest{}
}

/* PostStakingDelegatorsDelegatorAddrDelegationsBadRequest describes a response with status code 400, with default header values.

Invalid delegator address or delegation request body
*/
type PostStakingDelegatorsDelegatorAddrDelegationsBadRequest struct {
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsBadRequest) Error() string {
	return fmt.Sprintf("[POST /staking/delegators/{delegatorAddr}/delegations][%d] postStakingDelegatorsDelegatorAddrDelegationsBadRequest ", 400)
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostStakingDelegatorsDelegatorAddrDelegationsUnauthorized creates a PostStakingDelegatorsDelegatorAddrDelegationsUnauthorized with default headers values
func NewPostStakingDelegatorsDelegatorAddrDelegationsUnauthorized() *PostStakingDelegatorsDelegatorAddrDelegationsUnauthorized {
	return &PostStakingDelegatorsDelegatorAddrDelegationsUnauthorized{}
}

/* PostStakingDelegatorsDelegatorAddrDelegationsUnauthorized describes a response with status code 401, with default header values.

Key password is wrong
*/
type PostStakingDelegatorsDelegatorAddrDelegationsUnauthorized struct {
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /staking/delegators/{delegatorAddr}/delegations][%d] postStakingDelegatorsDelegatorAddrDelegationsUnauthorized ", 401)
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostStakingDelegatorsDelegatorAddrDelegationsInternalServerError creates a PostStakingDelegatorsDelegatorAddrDelegationsInternalServerError with default headers values
func NewPostStakingDelegatorsDelegatorAddrDelegationsInternalServerError() *PostStakingDelegatorsDelegatorAddrDelegationsInternalServerError {
	return &PostStakingDelegatorsDelegatorAddrDelegationsInternalServerError{}
}

/* PostStakingDelegatorsDelegatorAddrDelegationsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostStakingDelegatorsDelegatorAddrDelegationsInternalServerError struct {
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /staking/delegators/{delegatorAddr}/delegations][%d] postStakingDelegatorsDelegatorAddrDelegationsInternalServerError ", 500)
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostStakingDelegatorsDelegatorAddrDelegationsBody post staking delegators delegator addr delegations body
swagger:model PostStakingDelegatorsDelegatorAddrDelegationsBody
*/
type PostStakingDelegatorsDelegatorAddrDelegationsBody struct {

	// amount
	Amount *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyAmount `json:"amount,omitempty"`

	// base req
	BaseReq *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReq `json:"base_req,omitempty"`

	// bech32 encoded address
	// Example: terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv
	DelegatorAddress string `json:"delegator_address,omitempty"`

	// bech32 encoded address
	// Example: terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l
	ValidatorAddress string `json:"validator_address,omitempty"`
}

// Validate validates this post staking delegators delegator addr delegations body
func (o *PostStakingDelegatorsDelegatorAddrDelegationsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsBody) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	if o.Amount != nil {
		if err := o.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delegation" + "." + "amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delegation" + "." + "amount")
			}
			return err
		}
	}

	return nil
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsBody) validateBaseReq(formats strfmt.Registry) error {
	if swag.IsZero(o.BaseReq) { // not required
		return nil
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delegation" + "." + "base_req")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delegation" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post staking delegators delegator addr delegations body based on the context it is used
func (o *PostStakingDelegatorsDelegatorAddrDelegationsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateBaseReq(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsBody) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if o.Amount != nil {
		if err := o.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delegation" + "." + "amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delegation" + "." + "amount")
			}
			return err
		}
	}

	return nil
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsBody) contextValidateBaseReq(ctx context.Context, formats strfmt.Registry) error {

	if o.BaseReq != nil {
		if err := o.BaseReq.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delegation" + "." + "base_req")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delegation" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsBody) UnmarshalBinary(b []byte) error {
	var res PostStakingDelegatorsDelegatorAddrDelegationsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostStakingDelegatorsDelegatorAddrDelegationsOKBody post staking delegators delegator addr delegations o k body
swagger:model PostStakingDelegatorsDelegatorAddrDelegationsOKBody
*/
type PostStakingDelegatorsDelegatorAddrDelegationsOKBody struct {

	// fee
	Fee *PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFee `json:"fee,omitempty"`

	// memo
	Memo string `json:"memo,omitempty"`

	// msg
	Msg []string `json:"msg"`

	// signature
	Signature *PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignature `json:"signature,omitempty"`
}

// Validate validates this post staking delegators delegator addr delegations o k body
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBody) validateFee(formats strfmt.Registry) error {
	if swag.IsZero(o.Fee) { // not required
		return nil
	}

	if o.Fee != nil {
		if err := o.Fee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBody) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(o.Signature) { // not required
		return nil
	}

	if o.Signature != nil {
		if err := o.Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post staking delegators delegator addr delegations o k body based on the context it is used
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBody) contextValidateFee(ctx context.Context, formats strfmt.Registry) error {

	if o.Fee != nil {
		if err := o.Fee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBody) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if o.Signature != nil {
		if err := o.Signature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBody) UnmarshalBinary(b []byte) error {
	var res PostStakingDelegatorsDelegatorAddrDelegationsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFee post staking delegators delegator addr delegations o k body fee
swagger:model PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFee
*/
type PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFee struct {

	// amount
	Amount []*PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFeeAmountItems0 `json:"amount"`

	// gas
	Gas string `json:"gas,omitempty"`
}

// Validate validates this post staking delegators delegator addr delegations o k body fee
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFee) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	for i := 0; i < len(o.Amount); i++ {
		if swag.IsZero(o.Amount[i]) { // not required
			continue
		}

		if o.Amount[i] != nil {
			if err := o.Amount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post staking delegators delegator addr delegations o k body fee based on the context it is used
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFee) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Amount); i++ {

		if o.Amount[i] != nil {
			if err := o.Amount[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFee) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFee) UnmarshalBinary(b []byte) error {
	var res PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFeeAmountItems0 post staking delegators delegator addr delegations o k body fee amount items0
swagger:model PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFeeAmountItems0
*/
type PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFeeAmountItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this post staking delegators delegator addr delegations o k body fee amount items0
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFeeAmountItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post staking delegators delegator addr delegations o k body fee amount items0 based on context it is used
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFeeAmountItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFeeAmountItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFeeAmountItems0) UnmarshalBinary(b []byte) error {
	var res PostStakingDelegatorsDelegatorAddrDelegationsOKBodyFeeAmountItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignature post staking delegators delegator addr delegations o k body signature
swagger:model PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignature
*/
type PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignature struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// pub key
	PubKey *PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignaturePubKey `json:"pub_key,omitempty"`

	// sequence
	// Example: 0
	Sequence string `json:"sequence,omitempty"`

	// signature
	// Example: MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
	Signature string `json:"signature,omitempty"`
}

// Validate validates this post staking delegators delegator addr delegations o k body signature
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePubKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignature) validatePubKey(formats strfmt.Registry) error {
	if swag.IsZero(o.PubKey) { // not required
		return nil
	}

	if o.PubKey != nil {
		if err := o.PubKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post staking delegators delegator addr delegations o k body signature based on the context it is used
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePubKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignature) contextValidatePubKey(ctx context.Context, formats strfmt.Registry) error {

	if o.PubKey != nil {
		if err := o.PubKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postStakingDelegatorsDelegatorAddrDelegationsOK" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignature) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignature) UnmarshalBinary(b []byte) error {
	var res PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignaturePubKey post staking delegators delegator addr delegations o k body signature pub key
swagger:model PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignaturePubKey
*/
type PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignaturePubKey struct {

	// type
	// Example: tendermint/PubKeySecp256k1
	Type string `json:"type,omitempty"`

	// value
	// Example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
	Value string `json:"value,omitempty"`
}

// Validate validates this post staking delegators delegator addr delegations o k body signature pub key
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignaturePubKey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post staking delegators delegator addr delegations o k body signature pub key based on context it is used
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignaturePubKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignaturePubKey) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignaturePubKey) UnmarshalBinary(b []byte) error {
	var res PostStakingDelegatorsDelegatorAddrDelegationsOKBodySignaturePubKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyAmount post staking delegators delegator addr delegations params body amount
swagger:model PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyAmount
*/
type PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyAmount struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this post staking delegators delegator addr delegations params body amount
func (o *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyAmount) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post staking delegators delegator addr delegations params body amount based on context it is used
func (o *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyAmount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyAmount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyAmount) UnmarshalBinary(b []byte) error {
	var res PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyAmount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReq post staking delegators delegator addr delegations params body base req
swagger:model PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReq
*/
type PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReq struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// chain id
	// Example: Columbus-5
	ChainID string `json:"chain_id,omitempty"`

	// fees
	Fees []*PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReqFeesItems0 `json:"fees"`

	// Sender address or Keybase name to generate a transaction
	// Example: terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv
	From string `json:"from,omitempty"`

	// gas
	// Example: 200000
	Gas string `json:"gas,omitempty"`

	// gas adjustment
	// Example: 1.2
	GasAdjustment string `json:"gas_adjustment,omitempty"`

	// memo
	// Example: Sent via Terra Station 🚀
	Memo string `json:"memo,omitempty"`

	// sequence
	// Example: 1
	Sequence string `json:"sequence,omitempty"`

	// Estimate gas for a transaction (cannot be used in conjunction with generate_only)
	// Example: false
	Simulate bool `json:"simulate,omitempty"`
}

// Validate validates this post staking delegators delegator addr delegations params body base req
func (o *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFees(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReq) validateFees(formats strfmt.Registry) error {
	if swag.IsZero(o.Fees) { // not required
		return nil
	}

	for i := 0; i < len(o.Fees); i++ {
		if swag.IsZero(o.Fees[i]) { // not required
			continue
		}

		if o.Fees[i] != nil {
			if err := o.Fees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delegation" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("delegation" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post staking delegators delegator addr delegations params body base req based on the context it is used
func (o *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReq) contextValidateFees(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Fees); i++ {

		if o.Fees[i] != nil {
			if err := o.Fees[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delegation" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("delegation" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReq) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReq) UnmarshalBinary(b []byte) error {
	var res PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReqFeesItems0 post staking delegators delegator addr delegations params body base req fees items0
swagger:model PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReqFeesItems0
*/
type PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReqFeesItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this post staking delegators delegator addr delegations params body base req fees items0
func (o *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReqFeesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post staking delegators delegator addr delegations params body base req fees items0 based on context it is used
func (o *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReqFeesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReqFeesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReqFeesItems0) UnmarshalBinary(b []byte) error {
	var res PostStakingDelegatorsDelegatorAddrDelegationsParamsBodyBaseReqFeesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
