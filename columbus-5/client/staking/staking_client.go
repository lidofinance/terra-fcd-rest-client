// Code generated by go-swagger; DO NOT EDIT.

package staking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new staking API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for staking API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetStakingDelegatorsDelegatorAddrDelegations(params *GetStakingDelegatorsDelegatorAddrDelegationsParams, opts ...ClientOption) (*GetStakingDelegatorsDelegatorAddrDelegationsOK, error)

	GetStakingDelegatorsDelegatorAddrDelegationsValidatorAddr(params *GetStakingDelegatorsDelegatorAddrDelegationsValidatorAddrParams, opts ...ClientOption) (*GetStakingDelegatorsDelegatorAddrDelegationsValidatorAddrOK, error)

	GetStakingDelegatorsDelegatorAddrUnbondingDelegations(params *GetStakingDelegatorsDelegatorAddrUnbondingDelegationsParams, opts ...ClientOption) (*GetStakingDelegatorsDelegatorAddrUnbondingDelegationsOK, error)

	GetStakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddr(params *GetStakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrParams, opts ...ClientOption) (*GetStakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrOK, error)

	GetStakingDelegatorsDelegatorAddrValidators(params *GetStakingDelegatorsDelegatorAddrValidatorsParams, opts ...ClientOption) (*GetStakingDelegatorsDelegatorAddrValidatorsOK, error)

	GetStakingDelegatorsDelegatorAddrValidatorsValidatorAddr(params *GetStakingDelegatorsDelegatorAddrValidatorsValidatorAddrParams, opts ...ClientOption) (*GetStakingDelegatorsDelegatorAddrValidatorsValidatorAddrOK, error)

	GetStakingParameters(params *GetStakingParametersParams, opts ...ClientOption) (*GetStakingParametersOK, error)

	GetStakingPool(params *GetStakingPoolParams, opts ...ClientOption) (*GetStakingPoolOK, error)

	GetStakingRedelegations(params *GetStakingRedelegationsParams, opts ...ClientOption) (*GetStakingRedelegationsOK, error)

	GetStakingValidators(params *GetStakingValidatorsParams, opts ...ClientOption) (*GetStakingValidatorsOK, error)

	GetStakingValidatorsValidatorAddr(params *GetStakingValidatorsValidatorAddrParams, opts ...ClientOption) (*GetStakingValidatorsValidatorAddrOK, error)

	GetStakingValidatorsValidatorAddrDelegations(params *GetStakingValidatorsValidatorAddrDelegationsParams, opts ...ClientOption) (*GetStakingValidatorsValidatorAddrDelegationsOK, error)

	GetStakingValidatorsValidatorAddrUnbondingDelegations(params *GetStakingValidatorsValidatorAddrUnbondingDelegationsParams, opts ...ClientOption) (*GetStakingValidatorsValidatorAddrUnbondingDelegationsOK, error)

	GetV1Staking(params *GetV1StakingParams, opts ...ClientOption) (*GetV1StakingOK, error)

	GetV1StakingAccount(params *GetV1StakingAccountParams, opts ...ClientOption) (*GetV1StakingAccountOK, error)

	GetV1StakingReturn(params *GetV1StakingReturnParams, opts ...ClientOption) (*GetV1StakingReturnOK, error)

	GetV1StakingReturnOperatorAddr(params *GetV1StakingReturnOperatorAddrParams, opts ...ClientOption) (*GetV1StakingReturnOperatorAddrOK, error)

	GetV1StakingValidators(params *GetV1StakingValidatorsParams, opts ...ClientOption) (*GetV1StakingValidatorsOK, error)

	GetV1StakingValidatorsOperatorAddr(params *GetV1StakingValidatorsOperatorAddrParams, opts ...ClientOption) (*GetV1StakingValidatorsOperatorAddrOK, error)

	GetV1StakingValidatorsOperatorAddrClaims(params *GetV1StakingValidatorsOperatorAddrClaimsParams, opts ...ClientOption) (*GetV1StakingValidatorsOperatorAddrClaimsOK, error)

	GetV1StakingValidatorsOperatorAddrDelegations(params *GetV1StakingValidatorsOperatorAddrDelegationsParams, opts ...ClientOption) (*GetV1StakingValidatorsOperatorAddrDelegationsOK, error)

	GetV1StakingValidatorsOperatorAddrDelegators(params *GetV1StakingValidatorsOperatorAddrDelegatorsParams, opts ...ClientOption) (*GetV1StakingValidatorsOperatorAddrDelegatorsOK, error)

	PostStakingDelegatorsDelegatorAddrDelegations(params *PostStakingDelegatorsDelegatorAddrDelegationsParams, opts ...ClientOption) (*PostStakingDelegatorsDelegatorAddrDelegationsOK, error)

	PostStakingDelegatorsDelegatorAddrRedelegations(params *PostStakingDelegatorsDelegatorAddrRedelegationsParams, opts ...ClientOption) (*PostStakingDelegatorsDelegatorAddrRedelegationsOK, error)

	PostStakingDelegatorsDelegatorAddrUnbondingDelegations(params *PostStakingDelegatorsDelegatorAddrUnbondingDelegationsParams, opts ...ClientOption) (*PostStakingDelegatorsDelegatorAddrUnbondingDelegationsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetStakingDelegatorsDelegatorAddrDelegations gets all delegations from a delegator
*/
func (a *Client) GetStakingDelegatorsDelegatorAddrDelegations(params *GetStakingDelegatorsDelegatorAddrDelegationsParams, opts ...ClientOption) (*GetStakingDelegatorsDelegatorAddrDelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingDelegatorsDelegatorAddrDelegationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStakingDelegatorsDelegatorAddrDelegations",
		Method:             "GET",
		PathPattern:        "/staking/delegators/{delegatorAddr}/delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStakingDelegatorsDelegatorAddrDelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingDelegatorsDelegatorAddrDelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStakingDelegatorsDelegatorAddrDelegations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStakingDelegatorsDelegatorAddrDelegationsValidatorAddr queries the current delegation between a delegator and a validator
*/
func (a *Client) GetStakingDelegatorsDelegatorAddrDelegationsValidatorAddr(params *GetStakingDelegatorsDelegatorAddrDelegationsValidatorAddrParams, opts ...ClientOption) (*GetStakingDelegatorsDelegatorAddrDelegationsValidatorAddrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingDelegatorsDelegatorAddrDelegationsValidatorAddrParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStakingDelegatorsDelegatorAddrDelegationsValidatorAddr",
		Method:             "GET",
		PathPattern:        "/staking/delegators/{delegatorAddr}/delegations/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStakingDelegatorsDelegatorAddrDelegationsValidatorAddrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingDelegatorsDelegatorAddrDelegationsValidatorAddrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStakingDelegatorsDelegatorAddrDelegationsValidatorAddr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStakingDelegatorsDelegatorAddrUnbondingDelegations gets all unbonding delegations from a delegator
*/
func (a *Client) GetStakingDelegatorsDelegatorAddrUnbondingDelegations(params *GetStakingDelegatorsDelegatorAddrUnbondingDelegationsParams, opts ...ClientOption) (*GetStakingDelegatorsDelegatorAddrUnbondingDelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingDelegatorsDelegatorAddrUnbondingDelegationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStakingDelegatorsDelegatorAddrUnbondingDelegations",
		Method:             "GET",
		PathPattern:        "/staking/delegators/{delegatorAddr}/unbonding_delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStakingDelegatorsDelegatorAddrUnbondingDelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingDelegatorsDelegatorAddrUnbondingDelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStakingDelegatorsDelegatorAddrUnbondingDelegations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddr queries all unbonding delegations between a delegator and a validator
*/
func (a *Client) GetStakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddr(params *GetStakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrParams, opts ...ClientOption) (*GetStakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddr",
		Method:             "GET",
		PathPattern:        "/staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStakingDelegatorsDelegatorAddrValidators queries all validators that a delegator is bonded to
*/
func (a *Client) GetStakingDelegatorsDelegatorAddrValidators(params *GetStakingDelegatorsDelegatorAddrValidatorsParams, opts ...ClientOption) (*GetStakingDelegatorsDelegatorAddrValidatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingDelegatorsDelegatorAddrValidatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStakingDelegatorsDelegatorAddrValidators",
		Method:             "GET",
		PathPattern:        "/staking/delegators/{delegatorAddr}/validators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStakingDelegatorsDelegatorAddrValidatorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingDelegatorsDelegatorAddrValidatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStakingDelegatorsDelegatorAddrValidators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStakingDelegatorsDelegatorAddrValidatorsValidatorAddr queries a validator that a delegator is bonded to
*/
func (a *Client) GetStakingDelegatorsDelegatorAddrValidatorsValidatorAddr(params *GetStakingDelegatorsDelegatorAddrValidatorsValidatorAddrParams, opts ...ClientOption) (*GetStakingDelegatorsDelegatorAddrValidatorsValidatorAddrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingDelegatorsDelegatorAddrValidatorsValidatorAddrParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStakingDelegatorsDelegatorAddrValidatorsValidatorAddr",
		Method:             "GET",
		PathPattern:        "/staking/delegators/{delegatorAddr}/validators/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStakingDelegatorsDelegatorAddrValidatorsValidatorAddrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingDelegatorsDelegatorAddrValidatorsValidatorAddrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStakingDelegatorsDelegatorAddrValidatorsValidatorAddr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStakingParameters gets the current staking parameter values
*/
func (a *Client) GetStakingParameters(params *GetStakingParametersParams, opts ...ClientOption) (*GetStakingParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStakingParameters",
		Method:             "GET",
		PathPattern:        "/staking/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStakingParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStakingParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStakingPool gets the current state of the staking pool
*/
func (a *Client) GetStakingPool(params *GetStakingPoolParams, opts ...ClientOption) (*GetStakingPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStakingPool",
		Method:             "GET",
		PathPattern:        "/staking/pool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStakingPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStakingPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStakingRedelegations gets all redelegations filter by query params
*/
func (a *Client) GetStakingRedelegations(params *GetStakingRedelegationsParams, opts ...ClientOption) (*GetStakingRedelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingRedelegationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStakingRedelegations",
		Method:             "GET",
		PathPattern:        "/staking/redelegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStakingRedelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingRedelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStakingRedelegations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStakingValidators gets all validator candidates by default it returns only the bonded validators
*/
func (a *Client) GetStakingValidators(params *GetStakingValidatorsParams, opts ...ClientOption) (*GetStakingValidatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingValidatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStakingValidators",
		Method:             "GET",
		PathPattern:        "/staking/validators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStakingValidatorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingValidatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStakingValidators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStakingValidatorsValidatorAddr queries the information from a single validator
*/
func (a *Client) GetStakingValidatorsValidatorAddr(params *GetStakingValidatorsValidatorAddrParams, opts ...ClientOption) (*GetStakingValidatorsValidatorAddrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingValidatorsValidatorAddrParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStakingValidatorsValidatorAddr",
		Method:             "GET",
		PathPattern:        "/staking/validators/{validatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStakingValidatorsValidatorAddrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingValidatorsValidatorAddrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStakingValidatorsValidatorAddr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStakingValidatorsValidatorAddrDelegations gets all delegations from a validator
*/
func (a *Client) GetStakingValidatorsValidatorAddrDelegations(params *GetStakingValidatorsValidatorAddrDelegationsParams, opts ...ClientOption) (*GetStakingValidatorsValidatorAddrDelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingValidatorsValidatorAddrDelegationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStakingValidatorsValidatorAddrDelegations",
		Method:             "GET",
		PathPattern:        "/staking/validators/{validatorAddr}/delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStakingValidatorsValidatorAddrDelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingValidatorsValidatorAddrDelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStakingValidatorsValidatorAddrDelegations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStakingValidatorsValidatorAddrUnbondingDelegations gets all unbonding delegations from a validator
*/
func (a *Client) GetStakingValidatorsValidatorAddrUnbondingDelegations(params *GetStakingValidatorsValidatorAddrUnbondingDelegationsParams, opts ...ClientOption) (*GetStakingValidatorsValidatorAddrUnbondingDelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStakingValidatorsValidatorAddrUnbondingDelegationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStakingValidatorsValidatorAddrUnbondingDelegations",
		Method:             "GET",
		PathPattern:        "/staking/validators/{validatorAddr}/unbonding_delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStakingValidatorsValidatorAddrUnbondingDelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStakingValidatorsValidatorAddrUnbondingDelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStakingValidatorsValidatorAddrUnbondingDelegations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1Staking gets all validators and staking info

  Get all validators and staking info
*/
func (a *Client) GetV1Staking(params *GetV1StakingParams, opts ...ClientOption) (*GetV1StakingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1StakingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Staking",
		Method:             "GET",
		PathPattern:        "/v1/staking",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1StakingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1StakingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Staking: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1StakingAccount gets all validators and staking info with account

  Get all validators and staking info with account
*/
func (a *Client) GetV1StakingAccount(params *GetV1StakingAccountParams, opts ...ClientOption) (*GetV1StakingAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1StakingAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1StakingAccount",
		Method:             "GET",
		PathPattern:        "/v1/staking/{account}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1StakingAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1StakingAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1StakingAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1StakingReturn gets total staking return

  Get total staking return
*/
func (a *Client) GetV1StakingReturn(params *GetV1StakingReturnParams, opts ...ClientOption) (*GetV1StakingReturnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1StakingReturnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1StakingReturn",
		Method:             "GET",
		PathPattern:        "/v1/staking/return",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1StakingReturnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1StakingReturnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1StakingReturn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1StakingReturnOperatorAddr gets validators staking return

  Get validators staking return
*/
func (a *Client) GetV1StakingReturnOperatorAddr(params *GetV1StakingReturnOperatorAddrParams, opts ...ClientOption) (*GetV1StakingReturnOperatorAddrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1StakingReturnOperatorAddrParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1StakingReturnOperatorAddr",
		Method:             "GET",
		PathPattern:        "/v1/staking/return/{operatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1StakingReturnOperatorAddrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1StakingReturnOperatorAddrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1StakingReturnOperatorAddr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1StakingValidators gets all validator info

  Get all validator info
*/
func (a *Client) GetV1StakingValidators(params *GetV1StakingValidatorsParams, opts ...ClientOption) (*GetV1StakingValidatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1StakingValidatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1StakingValidators",
		Method:             "GET",
		PathPattern:        "/v1/staking/validators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1StakingValidatorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1StakingValidatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1StakingValidators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1StakingValidatorsOperatorAddr gets validator detail

  Get validator detail
*/
func (a *Client) GetV1StakingValidatorsOperatorAddr(params *GetV1StakingValidatorsOperatorAddrParams, opts ...ClientOption) (*GetV1StakingValidatorsOperatorAddrOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1StakingValidatorsOperatorAddrParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1StakingValidatorsOperatorAddr",
		Method:             "GET",
		PathPattern:        "/v1/staking/validators/{operatorAddr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1StakingValidatorsOperatorAddrReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1StakingValidatorsOperatorAddrOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1StakingValidatorsOperatorAddr: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1StakingValidatorsOperatorAddrClaims gets validators claims

  Get validators claims
*/
func (a *Client) GetV1StakingValidatorsOperatorAddrClaims(params *GetV1StakingValidatorsOperatorAddrClaimsParams, opts ...ClientOption) (*GetV1StakingValidatorsOperatorAddrClaimsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1StakingValidatorsOperatorAddrClaimsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1StakingValidatorsOperatorAddrClaims",
		Method:             "GET",
		PathPattern:        "/v1/staking/validators/{operatorAddr}/claims",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1StakingValidatorsOperatorAddrClaimsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1StakingValidatorsOperatorAddrClaimsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1StakingValidatorsOperatorAddrClaims: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1StakingValidatorsOperatorAddrDelegations gets validators delegations

  Get validators delegations
*/
func (a *Client) GetV1StakingValidatorsOperatorAddrDelegations(params *GetV1StakingValidatorsOperatorAddrDelegationsParams, opts ...ClientOption) (*GetV1StakingValidatorsOperatorAddrDelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1StakingValidatorsOperatorAddrDelegationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1StakingValidatorsOperatorAddrDelegations",
		Method:             "GET",
		PathPattern:        "/v1/staking/validators/{operatorAddr}/delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1StakingValidatorsOperatorAddrDelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1StakingValidatorsOperatorAddrDelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1StakingValidatorsOperatorAddrDelegations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1StakingValidatorsOperatorAddrDelegators gets validators delegators

  Get validators delegators
*/
func (a *Client) GetV1StakingValidatorsOperatorAddrDelegators(params *GetV1StakingValidatorsOperatorAddrDelegatorsParams, opts ...ClientOption) (*GetV1StakingValidatorsOperatorAddrDelegatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1StakingValidatorsOperatorAddrDelegatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1StakingValidatorsOperatorAddrDelegators",
		Method:             "GET",
		PathPattern:        "/v1/staking/validators/{operatorAddr}/delegators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1StakingValidatorsOperatorAddrDelegatorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1StakingValidatorsOperatorAddrDelegatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1StakingValidatorsOperatorAddrDelegators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostStakingDelegatorsDelegatorAddrDelegations submits delegation
*/
func (a *Client) PostStakingDelegatorsDelegatorAddrDelegations(params *PostStakingDelegatorsDelegatorAddrDelegationsParams, opts ...ClientOption) (*PostStakingDelegatorsDelegatorAddrDelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStakingDelegatorsDelegatorAddrDelegationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStakingDelegatorsDelegatorAddrDelegations",
		Method:             "POST",
		PathPattern:        "/staking/delegators/{delegatorAddr}/delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStakingDelegatorsDelegatorAddrDelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStakingDelegatorsDelegatorAddrDelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStakingDelegatorsDelegatorAddrDelegations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostStakingDelegatorsDelegatorAddrRedelegations submits a redelegation
*/
func (a *Client) PostStakingDelegatorsDelegatorAddrRedelegations(params *PostStakingDelegatorsDelegatorAddrRedelegationsParams, opts ...ClientOption) (*PostStakingDelegatorsDelegatorAddrRedelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStakingDelegatorsDelegatorAddrRedelegationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStakingDelegatorsDelegatorAddrRedelegations",
		Method:             "POST",
		PathPattern:        "/staking/delegators/{delegatorAddr}/redelegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStakingDelegatorsDelegatorAddrRedelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStakingDelegatorsDelegatorAddrRedelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStakingDelegatorsDelegatorAddrRedelegations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostStakingDelegatorsDelegatorAddrUnbondingDelegations submits an unbonding delegation
*/
func (a *Client) PostStakingDelegatorsDelegatorAddrUnbondingDelegations(params *PostStakingDelegatorsDelegatorAddrUnbondingDelegationsParams, opts ...ClientOption) (*PostStakingDelegatorsDelegatorAddrUnbondingDelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStakingDelegatorsDelegatorAddrUnbondingDelegationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostStakingDelegatorsDelegatorAddrUnbondingDelegations",
		Method:             "POST",
		PathPattern:        "/staking/delegators/{delegatorAddr}/unbonding_delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostStakingDelegatorsDelegatorAddrUnbondingDelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostStakingDelegatorsDelegatorAddrUnbondingDelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostStakingDelegatorsDelegatorAddrUnbondingDelegations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
