// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostTxsEstimateFeeReader is a Reader for the PostTxsEstimateFee structure.
type PostTxsEstimateFeeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTxsEstimateFeeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostTxsEstimateFeeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostTxsEstimateFeeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostTxsEstimateFeeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostTxsEstimateFeeOK creates a PostTxsEstimateFeeOK with default headers values
func NewPostTxsEstimateFeeOK() *PostTxsEstimateFeeOK {
	return &PostTxsEstimateFeeOK{}
}

/* PostTxsEstimateFeeOK describes a response with status code 200, with default header values.

The fee was successfully estimated
*/
type PostTxsEstimateFeeOK struct {
	Payload *PostTxsEstimateFeeOKBody
}

func (o *PostTxsEstimateFeeOK) Error() string {
	return fmt.Sprintf("[POST /txs/estimate_fee][%d] postTxsEstimateFeeOK  %+v", 200, o.Payload)
}
func (o *PostTxsEstimateFeeOK) GetPayload() *PostTxsEstimateFeeOKBody {
	return o.Payload
}

func (o *PostTxsEstimateFeeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostTxsEstimateFeeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTxsEstimateFeeBadRequest creates a PostTxsEstimateFeeBadRequest with default headers values
func NewPostTxsEstimateFeeBadRequest() *PostTxsEstimateFeeBadRequest {
	return &PostTxsEstimateFeeBadRequest{}
}

/* PostTxsEstimateFeeBadRequest describes a response with status code 400, with default header values.

The tx was malformed
*/
type PostTxsEstimateFeeBadRequest struct {
}

func (o *PostTxsEstimateFeeBadRequest) Error() string {
	return fmt.Sprintf("[POST /txs/estimate_fee][%d] postTxsEstimateFeeBadRequest ", 400)
}

func (o *PostTxsEstimateFeeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostTxsEstimateFeeInternalServerError creates a PostTxsEstimateFeeInternalServerError with default headers values
func NewPostTxsEstimateFeeInternalServerError() *PostTxsEstimateFeeInternalServerError {
	return &PostTxsEstimateFeeInternalServerError{}
}

/* PostTxsEstimateFeeInternalServerError describes a response with status code 500, with default header values.

Server internal error
*/
type PostTxsEstimateFeeInternalServerError struct {
}

func (o *PostTxsEstimateFeeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /txs/estimate_fee][%d] postTxsEstimateFeeInternalServerError ", 500)
}

func (o *PostTxsEstimateFeeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostTxsEstimateFeeBody post txs estimate fee body
swagger:model PostTxsEstimateFeeBody
*/
type PostTxsEstimateFeeBody struct {

	// base req
	BaseReq *PostTxsEstimateFeeParamsBodyBaseReq `json:"base_req,omitempty"`

	// msgs
	Msgs []string `json:"msgs"`
}

// Validate validates this post txs estimate fee body
func (o *PostTxsEstimateFeeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTxsEstimateFeeBody) validateBaseReq(formats strfmt.Registry) error {
	if swag.IsZero(o.BaseReq) { // not required
		return nil
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transaction" + "." + "base_req")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transaction" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post txs estimate fee body based on the context it is used
func (o *PostTxsEstimateFeeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBaseReq(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTxsEstimateFeeBody) contextValidateBaseReq(ctx context.Context, formats strfmt.Registry) error {

	if o.BaseReq != nil {
		if err := o.BaseReq.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transaction" + "." + "base_req")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transaction" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTxsEstimateFeeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTxsEstimateFeeBody) UnmarshalBinary(b []byte) error {
	var res PostTxsEstimateFeeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostTxsEstimateFeeOKBody post txs estimate fee o k body
swagger:model PostTxsEstimateFeeOKBody
*/
type PostTxsEstimateFeeOKBody struct {

	// amount
	Amount []*PostTxsEstimateFeeOKBodyAmountItems0 `json:"amount"`

	// gas
	Gas string `json:"gas,omitempty"`
}

// Validate validates this post txs estimate fee o k body
func (o *PostTxsEstimateFeeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTxsEstimateFeeOKBody) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	for i := 0; i < len(o.Amount); i++ {
		if swag.IsZero(o.Amount[i]) { // not required
			continue
		}

		if o.Amount[i] != nil {
			if err := o.Amount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postTxsEstimateFeeOK" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postTxsEstimateFeeOK" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post txs estimate fee o k body based on the context it is used
func (o *PostTxsEstimateFeeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTxsEstimateFeeOKBody) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Amount); i++ {

		if o.Amount[i] != nil {
			if err := o.Amount[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postTxsEstimateFeeOK" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postTxsEstimateFeeOK" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTxsEstimateFeeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTxsEstimateFeeOKBody) UnmarshalBinary(b []byte) error {
	var res PostTxsEstimateFeeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostTxsEstimateFeeOKBodyAmountItems0 post txs estimate fee o k body amount items0
swagger:model PostTxsEstimateFeeOKBodyAmountItems0
*/
type PostTxsEstimateFeeOKBodyAmountItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this post txs estimate fee o k body amount items0
func (o *PostTxsEstimateFeeOKBodyAmountItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post txs estimate fee o k body amount items0 based on context it is used
func (o *PostTxsEstimateFeeOKBodyAmountItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTxsEstimateFeeOKBodyAmountItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTxsEstimateFeeOKBodyAmountItems0) UnmarshalBinary(b []byte) error {
	var res PostTxsEstimateFeeOKBodyAmountItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostTxsEstimateFeeParamsBodyBaseReq post txs estimate fee params body base req
swagger:model PostTxsEstimateFeeParamsBodyBaseReq
*/
type PostTxsEstimateFeeParamsBodyBaseReq struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// chain id
	// Example: Columbus-5
	ChainID string `json:"chain_id,omitempty"`

	// fees
	Fees []*PostTxsEstimateFeeParamsBodyBaseReqFeesItems0 `json:"fees"`

	// Sender address or Keybase name to generate a transaction
	// Example: terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv
	From string `json:"from,omitempty"`

	// gas
	// Example: 200000
	Gas string `json:"gas,omitempty"`

	// gas adjustment
	// Example: 1.2
	GasAdjustment string `json:"gas_adjustment,omitempty"`

	// memo
	// Example: Sent via Terra Station 🚀
	Memo string `json:"memo,omitempty"`

	// sequence
	// Example: 1
	Sequence string `json:"sequence,omitempty"`

	// Estimate gas for a transaction (cannot be used in conjunction with generate_only)
	// Example: false
	Simulate bool `json:"simulate,omitempty"`
}

// Validate validates this post txs estimate fee params body base req
func (o *PostTxsEstimateFeeParamsBodyBaseReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFees(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTxsEstimateFeeParamsBodyBaseReq) validateFees(formats strfmt.Registry) error {
	if swag.IsZero(o.Fees) { // not required
		return nil
	}

	for i := 0; i < len(o.Fees); i++ {
		if swag.IsZero(o.Fees[i]) { // not required
			continue
		}

		if o.Fees[i] != nil {
			if err := o.Fees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transaction" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transaction" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post txs estimate fee params body base req based on the context it is used
func (o *PostTxsEstimateFeeParamsBodyBaseReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTxsEstimateFeeParamsBodyBaseReq) contextValidateFees(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Fees); i++ {

		if o.Fees[i] != nil {
			if err := o.Fees[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transaction" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transaction" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTxsEstimateFeeParamsBodyBaseReq) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTxsEstimateFeeParamsBodyBaseReq) UnmarshalBinary(b []byte) error {
	var res PostTxsEstimateFeeParamsBodyBaseReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostTxsEstimateFeeParamsBodyBaseReqFeesItems0 post txs estimate fee params body base req fees items0
swagger:model PostTxsEstimateFeeParamsBodyBaseReqFeesItems0
*/
type PostTxsEstimateFeeParamsBodyBaseReqFeesItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this post txs estimate fee params body base req fees items0
func (o *PostTxsEstimateFeeParamsBodyBaseReqFeesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post txs estimate fee params body base req fees items0 based on context it is used
func (o *PostTxsEstimateFeeParamsBodyBaseReqFeesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTxsEstimateFeeParamsBodyBaseReqFeesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTxsEstimateFeeParamsBodyBaseReqFeesItems0) UnmarshalBinary(b []byte) error {
	var res PostTxsEstimateFeeParamsBodyBaseReqFeesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
