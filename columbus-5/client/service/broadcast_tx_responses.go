// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BroadcastTxReader is a Reader for the BroadcastTx structure.
type BroadcastTxReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BroadcastTxReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBroadcastTxOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewBroadcastTxDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewBroadcastTxOK creates a BroadcastTxOK with default headers values
func NewBroadcastTxOK() *BroadcastTxOK {
	return &BroadcastTxOK{}
}

/* BroadcastTxOK describes a response with status code 200, with default header values.

A successful response.
*/
type BroadcastTxOK struct {
	Payload *BroadcastTxOKBody
}

func (o *BroadcastTxOK) Error() string {
	return fmt.Sprintf("[POST /cosmos/tx/v1beta1/txs][%d] broadcastTxOK  %+v", 200, o.Payload)
}
func (o *BroadcastTxOK) GetPayload() *BroadcastTxOKBody {
	return o.Payload
}

func (o *BroadcastTxOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(BroadcastTxOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBroadcastTxDefault creates a BroadcastTxDefault with default headers values
func NewBroadcastTxDefault(code int) *BroadcastTxDefault {
	return &BroadcastTxDefault{
		_statusCode: code,
	}
}

/* BroadcastTxDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type BroadcastTxDefault struct {
	_statusCode int

	Payload *BroadcastTxDefaultBody
}

// Code gets the status code for the broadcast tx default response
func (o *BroadcastTxDefault) Code() int {
	return o._statusCode
}

func (o *BroadcastTxDefault) Error() string {
	return fmt.Sprintf("[POST /cosmos/tx/v1beta1/txs][%d] BroadcastTx default  %+v", o._statusCode, o.Payload)
}
func (o *BroadcastTxDefault) GetPayload() *BroadcastTxDefaultBody {
	return o.Payload
}

func (o *BroadcastTxDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(BroadcastTxDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*BroadcastTxBody BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
// RPC method.
swagger:model BroadcastTxBody
*/
type BroadcastTxBody struct {

	// BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.
	//
	//  - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
	//  - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
	// the tx to be committed in a block.
	//  - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
	// a CheckTx execution response only.
	//  - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
	// immediately.
	// Enum: [BROADCAST_MODE_UNSPECIFIED BROADCAST_MODE_BLOCK BROADCAST_MODE_SYNC BROADCAST_MODE_ASYNC]
	Mode *string `json:"mode,omitempty"`

	// tx_bytes is the raw transaction.
	// Format: byte
	TxBytes strfmt.Base64 `json:"tx_bytes,omitempty"`
}

// Validate validates this broadcast tx body
func (o *BroadcastTxBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var broadcastTxBodyTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BROADCAST_MODE_UNSPECIFIED","BROADCAST_MODE_BLOCK","BROADCAST_MODE_SYNC","BROADCAST_MODE_ASYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		broadcastTxBodyTypeModePropEnum = append(broadcastTxBodyTypeModePropEnum, v)
	}
}

const (

	// BroadcastTxBodyModeBROADCASTMODEUNSPECIFIED captures enum value "BROADCAST_MODE_UNSPECIFIED"
	BroadcastTxBodyModeBROADCASTMODEUNSPECIFIED string = "BROADCAST_MODE_UNSPECIFIED"

	// BroadcastTxBodyModeBROADCASTMODEBLOCK captures enum value "BROADCAST_MODE_BLOCK"
	BroadcastTxBodyModeBROADCASTMODEBLOCK string = "BROADCAST_MODE_BLOCK"

	// BroadcastTxBodyModeBROADCASTMODESYNC captures enum value "BROADCAST_MODE_SYNC"
	BroadcastTxBodyModeBROADCASTMODESYNC string = "BROADCAST_MODE_SYNC"

	// BroadcastTxBodyModeBROADCASTMODEASYNC captures enum value "BROADCAST_MODE_ASYNC"
	BroadcastTxBodyModeBROADCASTMODEASYNC string = "BROADCAST_MODE_ASYNC"
)

// prop value enum
func (o *BroadcastTxBody) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, broadcastTxBodyTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *BroadcastTxBody) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(o.Mode) { // not required
		return nil
	}

	// value enum
	if err := o.validateModeEnum("body"+"."+"mode", "body", *o.Mode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this broadcast tx body based on context it is used
func (o *BroadcastTxBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *BroadcastTxBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BroadcastTxBody) UnmarshalBinary(b []byte) error {
	var res BroadcastTxBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*BroadcastTxDefaultBody broadcast tx default body
swagger:model BroadcastTxDefaultBody
*/
type BroadcastTxDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*BroadcastTxDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this broadcast tx default body
func (o *BroadcastTxDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BroadcastTxDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BroadcastTx default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("BroadcastTx default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this broadcast tx default body based on the context it is used
func (o *BroadcastTxDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BroadcastTxDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BroadcastTx default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("BroadcastTx default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *BroadcastTxDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BroadcastTxDefaultBody) UnmarshalBinary(b []byte) error {
	var res BroadcastTxDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*BroadcastTxDefaultBodyDetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := ptypes.MarshalAny(foo)
//      ...
//      foo := &pb.Foo{}
//      if err := ptypes.UnmarshalAny(any, foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model BroadcastTxDefaultBodyDetailsItems0
*/
type BroadcastTxDefaultBodyDetailsItems0 struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this broadcast tx default body details items0
func (o *BroadcastTxDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this broadcast tx default body details items0 based on context it is used
func (o *BroadcastTxDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *BroadcastTxDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BroadcastTxDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res BroadcastTxDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*BroadcastTxOKBody BroadcastTxResponse is the response type for the
// Service.BroadcastTx method.
swagger:model BroadcastTxOKBody
*/
type BroadcastTxOKBody struct {

	// tx response
	TxResponse *BroadcastTxOKBodyTxResponse `json:"tx_response,omitempty"`
}

// Validate validates this broadcast tx o k body
func (o *BroadcastTxOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTxResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BroadcastTxOKBody) validateTxResponse(formats strfmt.Registry) error {
	if swag.IsZero(o.TxResponse) { // not required
		return nil
	}

	if o.TxResponse != nil {
		if err := o.TxResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("broadcastTxOK" + "." + "tx_response")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("broadcastTxOK" + "." + "tx_response")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this broadcast tx o k body based on the context it is used
func (o *BroadcastTxOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTxResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BroadcastTxOKBody) contextValidateTxResponse(ctx context.Context, formats strfmt.Registry) error {

	if o.TxResponse != nil {
		if err := o.TxResponse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("broadcastTxOK" + "." + "tx_response")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("broadcastTxOK" + "." + "tx_response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *BroadcastTxOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BroadcastTxOKBody) UnmarshalBinary(b []byte) error {
	var res BroadcastTxOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*BroadcastTxOKBodyTxResponse TxResponse defines a structure containing relevant tx data and metadata. The
// tags are stringified and the log is JSON decoded.
swagger:model BroadcastTxOKBodyTxResponse
*/
type BroadcastTxOKBodyTxResponse struct {

	// Response code.
	Code int64 `json:"code,omitempty"`

	// Namespace for the Code
	Codespace string `json:"codespace,omitempty"`

	// Result bytes, if any.
	Data string `json:"data,omitempty"`

	// Amount of gas consumed by transaction.
	GasUsed string `json:"gas_used,omitempty"`

	// Amount of gas requested for transaction.
	GasWanted string `json:"gas_wanted,omitempty"`

	// The block height
	Height string `json:"height,omitempty"`

	// Additional information. May be non-deterministic.
	Info string `json:"info,omitempty"`

	// The output of the application's logger (typed). May be non-deterministic.
	Logs []*BroadcastTxOKBodyTxResponseLogsItems0 `json:"logs"`

	// The output of the application's logger (raw string). May be
	// non-deterministic.
	RawLog string `json:"raw_log,omitempty"`

	// Time of the previous block. For heights > 1, it's the weighted median of
	// the timestamps of the valid votes in the block.LastCommit. For height == 1,
	// it's genesis time.
	Timestamp string `json:"timestamp,omitempty"`

	// tx
	Tx *BroadcastTxOKBodyTxResponseTx `json:"tx,omitempty"`

	// The transaction hash.
	Txhash string `json:"txhash,omitempty"`
}

// Validate validates this broadcast tx o k body tx response
func (o *BroadcastTxOKBodyTxResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BroadcastTxOKBodyTxResponse) validateLogs(formats strfmt.Registry) error {
	if swag.IsZero(o.Logs) { // not required
		return nil
	}

	for i := 0; i < len(o.Logs); i++ {
		if swag.IsZero(o.Logs[i]) { // not required
			continue
		}

		if o.Logs[i] != nil {
			if err := o.Logs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("broadcastTxOK" + "." + "tx_response" + "." + "logs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("broadcastTxOK" + "." + "tx_response" + "." + "logs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *BroadcastTxOKBodyTxResponse) validateTx(formats strfmt.Registry) error {
	if swag.IsZero(o.Tx) { // not required
		return nil
	}

	if o.Tx != nil {
		if err := o.Tx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("broadcastTxOK" + "." + "tx_response" + "." + "tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("broadcastTxOK" + "." + "tx_response" + "." + "tx")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this broadcast tx o k body tx response based on the context it is used
func (o *BroadcastTxOKBodyTxResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BroadcastTxOKBodyTxResponse) contextValidateLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Logs); i++ {

		if o.Logs[i] != nil {
			if err := o.Logs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("broadcastTxOK" + "." + "tx_response" + "." + "logs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("broadcastTxOK" + "." + "tx_response" + "." + "logs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *BroadcastTxOKBodyTxResponse) contextValidateTx(ctx context.Context, formats strfmt.Registry) error {

	if o.Tx != nil {
		if err := o.Tx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("broadcastTxOK" + "." + "tx_response" + "." + "tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("broadcastTxOK" + "." + "tx_response" + "." + "tx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *BroadcastTxOKBodyTxResponse) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BroadcastTxOKBodyTxResponse) UnmarshalBinary(b []byte) error {
	var res BroadcastTxOKBodyTxResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*BroadcastTxOKBodyTxResponseLogsItems0 ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
swagger:model BroadcastTxOKBodyTxResponseLogsItems0
*/
type BroadcastTxOKBodyTxResponseLogsItems0 struct {

	// Events contains a slice of Event objects that were emitted during some
	// execution.
	Events []*BroadcastTxOKBodyTxResponseLogsItems0EventsItems0 `json:"events"`

	// log
	Log string `json:"log,omitempty"`

	// msg index
	MsgIndex int64 `json:"msg_index,omitempty"`
}

// Validate validates this broadcast tx o k body tx response logs items0
func (o *BroadcastTxOKBodyTxResponseLogsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BroadcastTxOKBodyTxResponseLogsItems0) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(o.Events) { // not required
		return nil
	}

	for i := 0; i < len(o.Events); i++ {
		if swag.IsZero(o.Events[i]) { // not required
			continue
		}

		if o.Events[i] != nil {
			if err := o.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this broadcast tx o k body tx response logs items0 based on the context it is used
func (o *BroadcastTxOKBodyTxResponseLogsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BroadcastTxOKBodyTxResponseLogsItems0) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Events); i++ {

		if o.Events[i] != nil {
			if err := o.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *BroadcastTxOKBodyTxResponseLogsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BroadcastTxOKBodyTxResponseLogsItems0) UnmarshalBinary(b []byte) error {
	var res BroadcastTxOKBodyTxResponseLogsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*BroadcastTxOKBodyTxResponseLogsItems0EventsItems0 StringEvent defines en Event object wrapper where all the attributes
// contain key/value pairs that are strings instead of raw bytes.
swagger:model BroadcastTxOKBodyTxResponseLogsItems0EventsItems0
*/
type BroadcastTxOKBodyTxResponseLogsItems0EventsItems0 struct {

	// attributes
	Attributes []*BroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0 `json:"attributes"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this broadcast tx o k body tx response logs items0 events items0
func (o *BroadcastTxOKBodyTxResponseLogsItems0EventsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BroadcastTxOKBodyTxResponseLogsItems0EventsItems0) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(o.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(o.Attributes); i++ {
		if swag.IsZero(o.Attributes[i]) { // not required
			continue
		}

		if o.Attributes[i] != nil {
			if err := o.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this broadcast tx o k body tx response logs items0 events items0 based on the context it is used
func (o *BroadcastTxOKBodyTxResponseLogsItems0EventsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BroadcastTxOKBodyTxResponseLogsItems0EventsItems0) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Attributes); i++ {

		if o.Attributes[i] != nil {
			if err := o.Attributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *BroadcastTxOKBodyTxResponseLogsItems0EventsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BroadcastTxOKBodyTxResponseLogsItems0EventsItems0) UnmarshalBinary(b []byte) error {
	var res BroadcastTxOKBodyTxResponseLogsItems0EventsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*BroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0 Attribute defines an attribute wrapper where the key and value are
// strings instead of raw bytes.
swagger:model BroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0
*/
type BroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this broadcast tx o k body tx response logs items0 events items0 attributes items0
func (o *BroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this broadcast tx o k body tx response logs items0 events items0 attributes items0 based on context it is used
func (o *BroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *BroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0) UnmarshalBinary(b []byte) error {
	var res BroadcastTxOKBodyTxResponseLogsItems0EventsItems0AttributesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*BroadcastTxOKBodyTxResponseTx `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := ptypes.MarshalAny(foo)
//      ...
//      foo := &pb.Foo{}
//      if err := ptypes.UnmarshalAny(any, foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model BroadcastTxOKBodyTxResponseTx
*/
type BroadcastTxOKBodyTxResponseTx struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this broadcast tx o k body tx response tx
func (o *BroadcastTxOKBodyTxResponseTx) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this broadcast tx o k body tx response tx based on context it is used
func (o *BroadcastTxOKBodyTxResponseTx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *BroadcastTxOKBodyTxResponseTx) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BroadcastTxOKBodyTxResponseTx) UnmarshalBinary(b []byte) error {
	var res BroadcastTxOKBodyTxResponseTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
