// Code generated by go-swagger; DO NOT EDIT.

package treasury

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new treasury API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for treasury API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetTreasuryIndicators(params *GetTreasuryIndicatorsParams, opts ...ClientOption) (*GetTreasuryIndicatorsOK, error)

	GetTreasuryParameters(params *GetTreasuryParametersParams, opts ...ClientOption) (*GetTreasuryParametersOK, error)

	GetTreasuryRewardWeight(params *GetTreasuryRewardWeightParams, opts ...ClientOption) (*GetTreasuryRewardWeightOK, error)

	GetTreasurySeigniorageProceeds(params *GetTreasurySeigniorageProceedsParams, opts ...ClientOption) (*GetTreasurySeigniorageProceedsOK, error)

	GetTreasuryTaxCapDenom(params *GetTreasuryTaxCapDenomParams, opts ...ClientOption) (*GetTreasuryTaxCapDenomOK, error)

	GetTreasuryTaxCaps(params *GetTreasuryTaxCapsParams, opts ...ClientOption) (*GetTreasuryTaxCapsOK, error)

	GetTreasuryTaxProceeds(params *GetTreasuryTaxProceedsParams, opts ...ClientOption) (*GetTreasuryTaxProceedsOK, error)

	GetTreasuryTaxRate(params *GetTreasuryTaxRateParams, opts ...ClientOption) (*GetTreasuryTaxRateOK, error)

	GetV1CirculatingsupplyDenom(params *GetV1CirculatingsupplyDenomParams, opts ...ClientOption) (*GetV1CirculatingsupplyDenomOK, error)

	GetV1RichlistDenom(params *GetV1RichlistDenomParams, opts ...ClientOption) (*GetV1RichlistDenomOK, error)

	GetV1Taxproceeds(params *GetV1TaxproceedsParams, opts ...ClientOption) (*GetV1TaxproceedsOK, error)

	GetV1TotalsupplyDenom(params *GetV1TotalsupplyDenomParams, opts ...ClientOption) (*GetV1TotalsupplyDenomOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetTreasuryIndicators gets the current treasury indicators
*/
func (a *Client) GetTreasuryIndicators(params *GetTreasuryIndicatorsParams, opts ...ClientOption) (*GetTreasuryIndicatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTreasuryIndicatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTreasuryIndicators",
		Method:             "GET",
		PathPattern:        "/treasury/indicators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTreasuryIndicatorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTreasuryIndicatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTreasuryIndicators: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTreasuryParameters gets treasury module params
*/
func (a *Client) GetTreasuryParameters(params *GetTreasuryParametersParams, opts ...ClientOption) (*GetTreasuryParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTreasuryParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTreasuryParameters",
		Method:             "GET",
		PathPattern:        "/treasury/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTreasuryParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTreasuryParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTreasuryParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTreasuryRewardWeight gets current reward weight
*/
func (a *Client) GetTreasuryRewardWeight(params *GetTreasuryRewardWeightParams, opts ...ClientOption) (*GetTreasuryRewardWeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTreasuryRewardWeightParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTreasuryRewardWeight",
		Method:             "GET",
		PathPattern:        "/treasury/reward_weight",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTreasuryRewardWeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTreasuryRewardWeightOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTreasuryRewardWeight: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTreasurySeigniorageProceeds retrieves the size of the seigniorage pool
*/
func (a *Client) GetTreasurySeigniorageProceeds(params *GetTreasurySeigniorageProceedsParams, opts ...ClientOption) (*GetTreasurySeigniorageProceedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTreasurySeigniorageProceedsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTreasurySeigniorageProceeds",
		Method:             "GET",
		PathPattern:        "/treasury/seigniorage_proceeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTreasurySeigniorageProceedsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTreasurySeigniorageProceedsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTreasurySeigniorageProceeds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTreasuryTaxCapDenom gets tax cap of the denom
*/
func (a *Client) GetTreasuryTaxCapDenom(params *GetTreasuryTaxCapDenomParams, opts ...ClientOption) (*GetTreasuryTaxCapDenomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTreasuryTaxCapDenomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTreasuryTaxCapDenom",
		Method:             "GET",
		PathPattern:        "/treasury/tax_cap/{denom}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTreasuryTaxCapDenomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTreasuryTaxCapDenomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTreasuryTaxCapDenom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTreasuryTaxCaps gets tax caps for the all whitelisted denoms
*/
func (a *Client) GetTreasuryTaxCaps(params *GetTreasuryTaxCapsParams, opts ...ClientOption) (*GetTreasuryTaxCapsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTreasuryTaxCapsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTreasuryTaxCaps",
		Method:             "GET",
		PathPattern:        "/treasury/tax_caps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTreasuryTaxCapsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTreasuryTaxCapsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTreasuryTaxCaps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTreasuryTaxProceeds gets current tax proceeds
*/
func (a *Client) GetTreasuryTaxProceeds(params *GetTreasuryTaxProceedsParams, opts ...ClientOption) (*GetTreasuryTaxProceedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTreasuryTaxProceedsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTreasuryTaxProceeds",
		Method:             "GET",
		PathPattern:        "/treasury/tax_proceeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTreasuryTaxProceedsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTreasuryTaxProceedsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTreasuryTaxProceeds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTreasuryTaxRate gets current tax rate
*/
func (a *Client) GetTreasuryTaxRate(params *GetTreasuryTaxRateParams, opts ...ClientOption) (*GetTreasuryTaxRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTreasuryTaxRateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTreasuryTaxRate",
		Method:             "GET",
		PathPattern:        "/treasury/tax_rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTreasuryTaxRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTreasuryTaxRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTreasuryTaxRate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1CirculatingsupplyDenom gets circulating supply of coins

  Get circulating supply of coins
*/
func (a *Client) GetV1CirculatingsupplyDenom(params *GetV1CirculatingsupplyDenomParams, opts ...ClientOption) (*GetV1CirculatingsupplyDenomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1CirculatingsupplyDenomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1CirculatingsupplyDenom",
		Method:             "GET",
		PathPattern:        "/v1/circulatingsupply/{denom}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1CirculatingsupplyDenomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1CirculatingsupplyDenomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1CirculatingsupplyDenom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1RichlistDenom gets richlist of coins

  Get richlist of coins
*/
func (a *Client) GetV1RichlistDenom(params *GetV1RichlistDenomParams, opts ...ClientOption) (*GetV1RichlistDenomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1RichlistDenomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1RichlistDenom",
		Method:             "GET",
		PathPattern:        "/v1/richlist/{denom}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1RichlistDenomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1RichlistDenomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1RichlistDenom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1Taxproceeds gets taxproceeds

  Get taxproceeds
*/
func (a *Client) GetV1Taxproceeds(params *GetV1TaxproceedsParams, opts ...ClientOption) (*GetV1TaxproceedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TaxproceedsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Taxproceeds",
		Method:             "GET",
		PathPattern:        "/v1/taxproceeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1TaxproceedsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TaxproceedsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Taxproceeds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1TotalsupplyDenom gets total supply of coins

  Get total supply of coins
*/
func (a *Client) GetV1TotalsupplyDenom(params *GetV1TotalsupplyDenomParams, opts ...ClientOption) (*GetV1TotalsupplyDenomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1TotalsupplyDenomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1TotalsupplyDenom",
		Method:             "GET",
		PathPattern:        "/v1/totalsupply/{denom}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1TotalsupplyDenomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1TotalsupplyDenomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1TotalsupplyDenom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
