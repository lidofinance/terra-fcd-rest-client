// Code generated by go-swagger; DO NOT EDIT.

package wasm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new wasm API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for wasm API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetV1WasmCodeCodeID(params *GetV1WasmCodeCodeIDParams, opts ...ClientOption) (*GetV1WasmCodeCodeIDOK, error)

	GetV1WasmContractContractAddress(params *GetV1WasmContractContractAddressParams, opts ...ClientOption) (*GetV1WasmContractContractAddressOK, error)

	GetV1WasmContracts(params *GetV1WasmContractsParams, opts ...ClientOption) (*GetV1WasmContractsOK, error)

	GetWasmCodesCodeID(params *GetWasmCodesCodeIDParams, opts ...ClientOption) (*GetWasmCodesCodeIDOK, error)

	GetWasmContractsContractAddress(params *GetWasmContractsContractAddressParams, opts ...ClientOption) (*GetWasmContractsContractAddressOK, error)

	GetWasmContractsContractAddressStore(params *GetWasmContractsContractAddressStoreParams, opts ...ClientOption) (*GetWasmContractsContractAddressStoreOK, error)

	GetWasmContractsContractAddressStoreRaw(params *GetWasmContractsContractAddressStoreRawParams, opts ...ClientOption) (*GetWasmContractsContractAddressStoreRawOK, error)

	GetWasmParameters(params *GetWasmParametersParams, opts ...ClientOption) (*GetWasmParametersOK, error)

	PostWasmCodes(params *PostWasmCodesParams, opts ...ClientOption) (*PostWasmCodesOK, error)

	PostWasmCodesCodeID(params *PostWasmCodesCodeIDParams, opts ...ClientOption) (*PostWasmCodesCodeIDOK, error)

	PostWasmCodesCodeIDMigrate(params *PostWasmCodesCodeIDMigrateParams, opts ...ClientOption) (*PostWasmCodesCodeIDMigrateOK, error)

	PostWasmContractsContractAddress(params *PostWasmContractsContractAddressParams, opts ...ClientOption) (*PostWasmContractsContractAddressOK, error)

	PostWasmContractsContractAddressAdminClear(params *PostWasmContractsContractAddressAdminClearParams, opts ...ClientOption) (*PostWasmContractsContractAddressAdminClearOK, error)

	PostWasmContractsContractAddressAdminUpdate(params *PostWasmContractsContractAddressAdminUpdateParams, opts ...ClientOption) (*PostWasmContractsContractAddressAdminUpdateOK, error)

	PostWasmContractsContractAddressMigrate(params *PostWasmContractsContractAddressMigrateParams, opts ...ClientOption) (*PostWasmContractsContractAddressMigrateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetV1WasmCodeCodeID gets single wasm code details

  Get single wasm code details
*/
func (a *Client) GetV1WasmCodeCodeID(params *GetV1WasmCodeCodeIDParams, opts ...ClientOption) (*GetV1WasmCodeCodeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1WasmCodeCodeIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1WasmCodeCodeID",
		Method:             "GET",
		PathPattern:        "/v1/wasm/code/{code_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1WasmCodeCodeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1WasmCodeCodeIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1WasmCodeCodeID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1WasmContractContractAddress gets single wasm contract details

  Get single wasm contract details
*/
func (a *Client) GetV1WasmContractContractAddress(params *GetV1WasmContractContractAddressParams, opts ...ClientOption) (*GetV1WasmContractContractAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1WasmContractContractAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1WasmContractContractAddress",
		Method:             "GET",
		PathPattern:        "/v1/wasm/contract/{contractAddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1WasmContractContractAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1WasmContractContractAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1WasmContractContractAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1WasmContracts gets wasm codes info

  Get wasm codes info
*/
func (a *Client) GetV1WasmContracts(params *GetV1WasmContractsParams, opts ...ClientOption) (*GetV1WasmContractsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1WasmContractsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1WasmContracts",
		Method:             "GET",
		PathPattern:        "/v1/wasm/contracts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1WasmContractsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1WasmContractsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1WasmContracts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWasmCodesCodeID gets code info of the code ID
*/
func (a *Client) GetWasmCodesCodeID(params *GetWasmCodesCodeIDParams, opts ...ClientOption) (*GetWasmCodesCodeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWasmCodesCodeIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWasmCodesCodeID",
		Method:             "GET",
		PathPattern:        "/wasm/codes/{codeID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWasmCodesCodeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWasmCodesCodeIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWasmCodesCodeID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWasmContractsContractAddress gets contract info of the contract address
*/
func (a *Client) GetWasmContractsContractAddress(params *GetWasmContractsContractAddressParams, opts ...ClientOption) (*GetWasmContractsContractAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWasmContractsContractAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWasmContractsContractAddress",
		Method:             "GET",
		PathPattern:        "/wasm/contracts/{contractAddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWasmContractsContractAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWasmContractsContractAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWasmContractsContractAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWasmContractsContractAddressStore gets stored information with query msg
*/
func (a *Client) GetWasmContractsContractAddressStore(params *GetWasmContractsContractAddressStoreParams, opts ...ClientOption) (*GetWasmContractsContractAddressStoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWasmContractsContractAddressStoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWasmContractsContractAddressStore",
		Method:             "GET",
		PathPattern:        "/wasm/contracts/{contractAddress}/store",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWasmContractsContractAddressStoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWasmContractsContractAddressStoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWasmContractsContractAddressStore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWasmContractsContractAddressStoreRaw gets stored information with store key
*/
func (a *Client) GetWasmContractsContractAddressStoreRaw(params *GetWasmContractsContractAddressStoreRawParams, opts ...ClientOption) (*GetWasmContractsContractAddressStoreRawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWasmContractsContractAddressStoreRawParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWasmContractsContractAddressStoreRaw",
		Method:             "GET",
		PathPattern:        "/wasm/contracts/{contractAddress}/store/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWasmContractsContractAddressStoreRawReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWasmContractsContractAddressStoreRawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWasmContractsContractAddressStoreRaw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWasmParameters gets wasm module params
*/
func (a *Client) GetWasmParameters(params *GetWasmParametersParams, opts ...ClientOption) (*GetWasmParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWasmParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWasmParameters",
		Method:             "GET",
		PathPattern:        "/wasm/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWasmParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWasmParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWasmParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostWasmCodes generates wasm store code message
*/
func (a *Client) PostWasmCodes(params *PostWasmCodesParams, opts ...ClientOption) (*PostWasmCodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWasmCodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWasmCodes",
		Method:             "POST",
		PathPattern:        "/wasm/codes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostWasmCodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWasmCodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWasmCodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostWasmCodesCodeID instantiates wasm contract
*/
func (a *Client) PostWasmCodesCodeID(params *PostWasmCodesCodeIDParams, opts ...ClientOption) (*PostWasmCodesCodeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWasmCodesCodeIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWasmCodesCodeID",
		Method:             "POST",
		PathPattern:        "/wasm/codes/{codeID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostWasmCodesCodeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWasmCodesCodeIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWasmCodesCodeID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostWasmCodesCodeIDMigrate migrates old wasm code to new wasm code
*/
func (a *Client) PostWasmCodesCodeIDMigrate(params *PostWasmCodesCodeIDMigrateParams, opts ...ClientOption) (*PostWasmCodesCodeIDMigrateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWasmCodesCodeIDMigrateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWasmCodesCodeIDMigrate",
		Method:             "POST",
		PathPattern:        "/wasm/codes/{codeID}/migrate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostWasmCodesCodeIDMigrateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWasmCodesCodeIDMigrateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWasmCodesCodeIDMigrate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostWasmContractsContractAddress executes wasm contract message
*/
func (a *Client) PostWasmContractsContractAddress(params *PostWasmContractsContractAddressParams, opts ...ClientOption) (*PostWasmContractsContractAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWasmContractsContractAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWasmContractsContractAddress",
		Method:             "POST",
		PathPattern:        "/wasm/contracts/{contractAddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostWasmContractsContractAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWasmContractsContractAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWasmContractsContractAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostWasmContractsContractAddressAdminClear clears wasm contract admin to make the contract un migratable
*/
func (a *Client) PostWasmContractsContractAddressAdminClear(params *PostWasmContractsContractAddressAdminClearParams, opts ...ClientOption) (*PostWasmContractsContractAddressAdminClearOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWasmContractsContractAddressAdminClearParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWasmContractsContractAddressAdminClear",
		Method:             "POST",
		PathPattern:        "/wasm/contracts/{contractAddress}/admin/clear",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostWasmContractsContractAddressAdminClearReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWasmContractsContractAddressAdminClearOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWasmContractsContractAddressAdminClear: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostWasmContractsContractAddressAdminUpdate updates wasm contract admin to new address
*/
func (a *Client) PostWasmContractsContractAddressAdminUpdate(params *PostWasmContractsContractAddressAdminUpdateParams, opts ...ClientOption) (*PostWasmContractsContractAddressAdminUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWasmContractsContractAddressAdminUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWasmContractsContractAddressAdminUpdate",
		Method:             "POST",
		PathPattern:        "/wasm/contracts/{contractAddress}/admin/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostWasmContractsContractAddressAdminUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWasmContractsContractAddressAdminUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWasmContractsContractAddressAdminUpdate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostWasmContractsContractAddressMigrate migrates wasm contract to new code base
*/
func (a *Client) PostWasmContractsContractAddressMigrate(params *PostWasmContractsContractAddressMigrateParams, opts ...ClientOption) (*PostWasmContractsContractAddressMigrateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWasmContractsContractAddressMigrateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWasmContractsContractAddressMigrate",
		Method:             "POST",
		PathPattern:        "/wasm/contracts/{contractAddress}/migrate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostWasmContractsContractAddressMigrateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWasmContractsContractAddressMigrateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWasmContractsContractAddressMigrate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
