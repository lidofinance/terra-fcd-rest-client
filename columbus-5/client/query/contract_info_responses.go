// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContractInfoReader is a Reader for the ContractInfo structure.
type ContractInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ContractInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewContractInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewContractInfoDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewContractInfoOK creates a ContractInfoOK with default headers values
func NewContractInfoOK() *ContractInfoOK {
	return &ContractInfoOK{}
}

/* ContractInfoOK describes a response with status code 200, with default header values.

A successful response.
*/
type ContractInfoOK struct {
	Payload *ContractInfoOKBody
}

func (o *ContractInfoOK) Error() string {
	return fmt.Sprintf("[GET /terra/wasm/v1beta1/contracts/{contract_address}][%d] contractInfoOK  %+v", 200, o.Payload)
}
func (o *ContractInfoOK) GetPayload() *ContractInfoOKBody {
	return o.Payload
}

func (o *ContractInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ContractInfoOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContractInfoDefault creates a ContractInfoDefault with default headers values
func NewContractInfoDefault(code int) *ContractInfoDefault {
	return &ContractInfoDefault{
		_statusCode: code,
	}
}

/* ContractInfoDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type ContractInfoDefault struct {
	_statusCode int

	Payload *ContractInfoDefaultBody
}

// Code gets the status code for the contract info default response
func (o *ContractInfoDefault) Code() int {
	return o._statusCode
}

func (o *ContractInfoDefault) Error() string {
	return fmt.Sprintf("[GET /terra/wasm/v1beta1/contracts/{contract_address}][%d] ContractInfo default  %+v", o._statusCode, o.Payload)
}
func (o *ContractInfoDefault) GetPayload() *ContractInfoDefaultBody {
	return o.Payload
}

func (o *ContractInfoDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ContractInfoDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ContractInfoDefaultBody contract info default body
swagger:model ContractInfoDefaultBody
*/
type ContractInfoDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*ContractInfoDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this contract info default body
func (o *ContractInfoDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ContractInfoDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ContractInfo default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ContractInfo default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this contract info default body based on the context it is used
func (o *ContractInfoDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ContractInfoDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ContractInfo default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ContractInfo default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ContractInfoDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContractInfoDefaultBody) UnmarshalBinary(b []byte) error {
	var res ContractInfoDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ContractInfoDefaultBodyDetailsItems0 contract info default body details items0
swagger:model ContractInfoDefaultBodyDetailsItems0
*/
type ContractInfoDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this contract info default body details items0
func (o *ContractInfoDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this contract info default body details items0 based on context it is used
func (o *ContractInfoDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ContractInfoDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContractInfoDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ContractInfoDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ContractInfoOKBody QueryContractInfoResponse is response type for the
// Query/ContractInfo RPC method.
swagger:model ContractInfoOKBody
*/
type ContractInfoOKBody struct {

	// contract info
	ContractInfo *ContractInfoOKBodyContractInfo `json:"contract_info,omitempty"`
}

// Validate validates this contract info o k body
func (o *ContractInfoOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContractInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ContractInfoOKBody) validateContractInfo(formats strfmt.Registry) error {
	if swag.IsZero(o.ContractInfo) { // not required
		return nil
	}

	if o.ContractInfo != nil {
		if err := o.ContractInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contractInfoOK" + "." + "contract_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contractInfoOK" + "." + "contract_info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this contract info o k body based on the context it is used
func (o *ContractInfoOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateContractInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ContractInfoOKBody) contextValidateContractInfo(ctx context.Context, formats strfmt.Registry) error {

	if o.ContractInfo != nil {
		if err := o.ContractInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contractInfoOK" + "." + "contract_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contractInfoOK" + "." + "contract_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ContractInfoOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContractInfoOKBody) UnmarshalBinary(b []byte) error {
	var res ContractInfoOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ContractInfoOKBodyContractInfo ContractInfo stores a WASM contract instance
swagger:model ContractInfoOKBodyContractInfo
*/
type ContractInfoOKBodyContractInfo struct {

	// Address is the address of the contract
	Address string `json:"address,omitempty"`

	// Admin is who can execute the contract migration
	Admin string `json:"admin,omitempty"`

	// CodeID is the reference to the stored Wasm code
	CodeID string `json:"code_id,omitempty"`

	// Creator is the contract creator address
	Creator string `json:"creator,omitempty"`

	// InitMsg is the raw message used when instantiating a contract
	// Format: byte
	InitMsg strfmt.Base64 `json:"init_msg,omitempty"`
}

// Validate validates this contract info o k body contract info
func (o *ContractInfoOKBodyContractInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this contract info o k body contract info based on context it is used
func (o *ContractInfoOKBodyContractInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ContractInfoOKBodyContractInfo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContractInfoOKBodyContractInfo) UnmarshalBinary(b []byte) error {
	var res ContractInfoOKBodyContractInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
