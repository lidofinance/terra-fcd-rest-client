// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WasmParamsReader is a Reader for the WasmParams structure.
type WasmParamsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WasmParamsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWasmParamsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewWasmParamsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewWasmParamsOK creates a WasmParamsOK with default headers values
func NewWasmParamsOK() *WasmParamsOK {
	return &WasmParamsOK{}
}

/* WasmParamsOK describes a response with status code 200, with default header values.

A successful response.
*/
type WasmParamsOK struct {
	Payload *WasmParamsOKBody
}

func (o *WasmParamsOK) Error() string {
	return fmt.Sprintf("[GET /terra/wasm/v1beta1/params][%d] wasmParamsOK  %+v", 200, o.Payload)
}
func (o *WasmParamsOK) GetPayload() *WasmParamsOKBody {
	return o.Payload
}

func (o *WasmParamsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(WasmParamsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWasmParamsDefault creates a WasmParamsDefault with default headers values
func NewWasmParamsDefault(code int) *WasmParamsDefault {
	return &WasmParamsDefault{
		_statusCode: code,
	}
}

/* WasmParamsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type WasmParamsDefault struct {
	_statusCode int

	Payload *WasmParamsDefaultBody
}

// Code gets the status code for the wasm params default response
func (o *WasmParamsDefault) Code() int {
	return o._statusCode
}

func (o *WasmParamsDefault) Error() string {
	return fmt.Sprintf("[GET /terra/wasm/v1beta1/params][%d] WasmParams default  %+v", o._statusCode, o.Payload)
}
func (o *WasmParamsDefault) GetPayload() *WasmParamsDefaultBody {
	return o.Payload
}

func (o *WasmParamsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(WasmParamsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*WasmParamsDefaultBody wasm params default body
swagger:model WasmParamsDefaultBody
*/
type WasmParamsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*WasmParamsDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this wasm params default body
func (o *WasmParamsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *WasmParamsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("WasmParams default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("WasmParams default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this wasm params default body based on the context it is used
func (o *WasmParamsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *WasmParamsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("WasmParams default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("WasmParams default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *WasmParamsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WasmParamsDefaultBody) UnmarshalBinary(b []byte) error {
	var res WasmParamsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*WasmParamsDefaultBodyDetailsItems0 wasm params default body details items0
swagger:model WasmParamsDefaultBodyDetailsItems0
*/
type WasmParamsDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this wasm params default body details items0
func (o *WasmParamsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this wasm params default body details items0 based on context it is used
func (o *WasmParamsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *WasmParamsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WasmParamsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res WasmParamsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*WasmParamsOKBody QueryParamsResponse is the response type for the Query/Params RPC method.
swagger:model WasmParamsOKBody
*/
type WasmParamsOKBody struct {

	// params
	Params *WasmParamsOKBodyParams `json:"params,omitempty"`
}

// Validate validates this wasm params o k body
func (o *WasmParamsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *WasmParamsOKBody) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wasmParamsOK" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wasmParamsOK" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this wasm params o k body based on the context it is used
func (o *WasmParamsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *WasmParamsOKBody) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if o.Params != nil {
		if err := o.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wasmParamsOK" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wasmParamsOK" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *WasmParamsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WasmParamsOKBody) UnmarshalBinary(b []byte) error {
	var res WasmParamsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*WasmParamsOKBodyParams params defines the parameters of the module.
swagger:model WasmParamsOKBodyParams
*/
type WasmParamsOKBodyParams struct {

	// max contract gas
	MaxContractGas string `json:"max_contract_gas,omitempty"`

	// max contract msg size
	MaxContractMsgSize string `json:"max_contract_msg_size,omitempty"`

	// max contract size
	MaxContractSize string `json:"max_contract_size,omitempty"`
}

// Validate validates this wasm params o k body params
func (o *WasmParamsOKBodyParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this wasm params o k body params based on context it is used
func (o *WasmParamsOKBodyParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *WasmParamsOKBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WasmParamsOKBodyParams) UnmarshalBinary(b []byte) error {
	var res WasmParamsOKBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
