// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSwapParams creates a new SwapParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSwapParams() *SwapParams {
	return &SwapParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSwapParamsWithTimeout creates a new SwapParams object
// with the ability to set a timeout on a request.
func NewSwapParamsWithTimeout(timeout time.Duration) *SwapParams {
	return &SwapParams{
		timeout: timeout,
	}
}

// NewSwapParamsWithContext creates a new SwapParams object
// with the ability to set a context for a request.
func NewSwapParamsWithContext(ctx context.Context) *SwapParams {
	return &SwapParams{
		Context: ctx,
	}
}

// NewSwapParamsWithHTTPClient creates a new SwapParams object
// with the ability to set a custom HTTPClient for a request.
func NewSwapParamsWithHTTPClient(client *http.Client) *SwapParams {
	return &SwapParams{
		HTTPClient: client,
	}
}

/* SwapParams contains all the parameters to send to the API endpoint
   for the swap operation.

   Typically these are written to a http.Request.
*/
type SwapParams struct {

	/* AskDenom.

	   ask_denom defines the denom of the coin to swap to.
	*/
	AskDenom *string

	/* OfferCoin.

	   offer_coin defines the coin being offered (i.e. 1000000uluna).
	*/
	OfferCoin *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the swap params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SwapParams) WithDefaults() *SwapParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the swap params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SwapParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the swap params
func (o *SwapParams) WithTimeout(timeout time.Duration) *SwapParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the swap params
func (o *SwapParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the swap params
func (o *SwapParams) WithContext(ctx context.Context) *SwapParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the swap params
func (o *SwapParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the swap params
func (o *SwapParams) WithHTTPClient(client *http.Client) *SwapParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the swap params
func (o *SwapParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAskDenom adds the askDenom to the swap params
func (o *SwapParams) WithAskDenom(askDenom *string) *SwapParams {
	o.SetAskDenom(askDenom)
	return o
}

// SetAskDenom adds the askDenom to the swap params
func (o *SwapParams) SetAskDenom(askDenom *string) {
	o.AskDenom = askDenom
}

// WithOfferCoin adds the offerCoin to the swap params
func (o *SwapParams) WithOfferCoin(offerCoin *string) *SwapParams {
	o.SetOfferCoin(offerCoin)
	return o
}

// SetOfferCoin adds the offerCoin to the swap params
func (o *SwapParams) SetOfferCoin(offerCoin *string) {
	o.OfferCoin = offerCoin
}

// WriteToRequest writes these params to a swagger request
func (o *SwapParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AskDenom != nil {

		// query param ask_denom
		var qrAskDenom string

		if o.AskDenom != nil {
			qrAskDenom = *o.AskDenom
		}
		qAskDenom := qrAskDenom
		if qAskDenom != "" {

			if err := r.SetQueryParam("ask_denom", qAskDenom); err != nil {
				return err
			}
		}
	}

	if o.OfferCoin != nil {

		// query param offer_coin
		var qrOfferCoin string

		if o.OfferCoin != nil {
			qrOfferCoin = *o.OfferCoin
		}
		qOfferCoin := qrOfferCoin
		if qOfferCoin != "" {

			if err := r.SetQueryParam("offer_coin", qOfferCoin); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
