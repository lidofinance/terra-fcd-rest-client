// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChannelsReader is a Reader for the Channels structure.
type ChannelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChannelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChannelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewChannelsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewChannelsOK creates a ChannelsOK with default headers values
func NewChannelsOK() *ChannelsOK {
	return &ChannelsOK{}
}

/* ChannelsOK describes a response with status code 200, with default header values.

A successful response.
*/
type ChannelsOK struct {
	Payload *ChannelsOKBody
}

func (o *ChannelsOK) Error() string {
	return fmt.Sprintf("[GET /ibc/core/channel/v1/channels][%d] channelsOK  %+v", 200, o.Payload)
}
func (o *ChannelsOK) GetPayload() *ChannelsOKBody {
	return o.Payload
}

func (o *ChannelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChannelsDefault creates a ChannelsDefault with default headers values
func NewChannelsDefault(code int) *ChannelsDefault {
	return &ChannelsDefault{
		_statusCode: code,
	}
}

/* ChannelsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type ChannelsDefault struct {
	_statusCode int

	Payload *ChannelsDefaultBody
}

// Code gets the status code for the channels default response
func (o *ChannelsDefault) Code() int {
	return o._statusCode
}

func (o *ChannelsDefault) Error() string {
	return fmt.Sprintf("[GET /ibc/core/channel/v1/channels][%d] Channels default  %+v", o._statusCode, o.Payload)
}
func (o *ChannelsDefault) GetPayload() *ChannelsDefaultBody {
	return o.Payload
}

func (o *ChannelsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ChannelsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ChannelsDefaultBody channels default body
swagger:model ChannelsDefaultBody
*/
type ChannelsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*ChannelsDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this channels default body
func (o *ChannelsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Channels default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Channels default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this channels default body based on the context it is used
func (o *ChannelsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Channels default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Channels default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsDefaultBody) UnmarshalBinary(b []byte) error {
	var res ChannelsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsDefaultBodyDetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := ptypes.MarshalAny(foo)
//      ...
//      foo := &pb.Foo{}
//      if err := ptypes.UnmarshalAny(any, foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model ChannelsDefaultBodyDetailsItems0
*/
type ChannelsDefaultBodyDetailsItems0 struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this channels default body details items0
func (o *ChannelsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this channels default body details items0 based on context it is used
func (o *ChannelsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ChannelsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsOKBody QueryChannelsResponse is the response type for the Query/Channels RPC method.
swagger:model ChannelsOKBody
*/
type ChannelsOKBody struct {

	// list of stored channels of the chain.
	Channels []*ChannelsOKBodyChannelsItems0 `json:"channels"`

	// height
	Height *ChannelsOKBodyHeight `json:"height,omitempty"`

	// pagination
	Pagination *ChannelsOKBodyPagination `json:"pagination,omitempty"`
}

// Validate validates this channels o k body
func (o *ChannelsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChannels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsOKBody) validateChannels(formats strfmt.Registry) error {
	if swag.IsZero(o.Channels) { // not required
		return nil
	}

	for i := 0; i < len(o.Channels); i++ {
		if swag.IsZero(o.Channels[i]) { // not required
			continue
		}

		if o.Channels[i] != nil {
			if err := o.Channels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("channelsOK" + "." + "channels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("channelsOK" + "." + "channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ChannelsOKBody) validateHeight(formats strfmt.Registry) error {
	if swag.IsZero(o.Height) { // not required
		return nil
	}

	if o.Height != nil {
		if err := o.Height.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channelsOK" + "." + "height")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channelsOK" + "." + "height")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsOKBody) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channelsOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channelsOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this channels o k body based on the context it is used
func (o *ChannelsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateChannels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsOKBody) contextValidateChannels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Channels); i++ {

		if o.Channels[i] != nil {
			if err := o.Channels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("channelsOK" + "." + "channels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("channelsOK" + "." + "channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ChannelsOKBody) contextValidateHeight(ctx context.Context, formats strfmt.Registry) error {

	if o.Height != nil {
		if err := o.Height.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channelsOK" + "." + "height")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channelsOK" + "." + "height")
			}
			return err
		}
	}

	return nil
}

func (o *ChannelsOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {
		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channelsOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channelsOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsOKBody) UnmarshalBinary(b []byte) error {
	var res ChannelsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsOKBodyChannelsItems0 IdentifiedChannel defines a channel with additional port and channel
// identifier fields.
swagger:model ChannelsOKBodyChannelsItems0
*/
type ChannelsOKBodyChannelsItems0 struct {

	// channel identifier
	ChannelID string `json:"channel_id,omitempty"`

	// list of connection identifiers, in order, along which packets sent on
	// this channel will travel
	ConnectionHops []string `json:"connection_hops"`

	// counterparty
	Counterparty *ChannelsOKBodyChannelsItems0Counterparty `json:"counterparty,omitempty"`

	// whether the channel is ordered or unordered
	//
	// - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
	//  - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
	// which they were sent.
	//  - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
	// Enum: [ORDER_NONE_UNSPECIFIED ORDER_UNORDERED ORDER_ORDERED]
	Ordering *string `json:"ordering,omitempty"`

	// port identifier
	PortID string `json:"port_id,omitempty"`

	// current state of the channel end
	//
	// State defines if a channel is in one of the following states:
	// CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.
	//
	//  - STATE_UNINITIALIZED_UNSPECIFIED: Default State
	//  - STATE_INIT: A channel has just started the opening handshake.
	//  - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
	//  - STATE_OPEN: A channel has completed the handshake. Open channels are
	// ready to send and receive packets.
	//  - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
	// packets.
	// Enum: [STATE_UNINITIALIZED_UNSPECIFIED STATE_INIT STATE_TRYOPEN STATE_OPEN STATE_CLOSED]
	State *string `json:"state,omitempty"`

	// opaque channel version, which is agreed upon during the handshake
	Version string `json:"version,omitempty"`
}

// Validate validates this channels o k body channels items0
func (o *ChannelsOKBodyChannelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCounterparty(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrdering(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsOKBodyChannelsItems0) validateCounterparty(formats strfmt.Registry) error {
	if swag.IsZero(o.Counterparty) { // not required
		return nil
	}

	if o.Counterparty != nil {
		if err := o.Counterparty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counterparty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("counterparty")
			}
			return err
		}
	}

	return nil
}

var channelsOKBodyChannelsItems0TypeOrderingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ORDER_NONE_UNSPECIFIED","ORDER_UNORDERED","ORDER_ORDERED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		channelsOKBodyChannelsItems0TypeOrderingPropEnum = append(channelsOKBodyChannelsItems0TypeOrderingPropEnum, v)
	}
}

const (

	// ChannelsOKBodyChannelsItems0OrderingORDERNONEUNSPECIFIED captures enum value "ORDER_NONE_UNSPECIFIED"
	ChannelsOKBodyChannelsItems0OrderingORDERNONEUNSPECIFIED string = "ORDER_NONE_UNSPECIFIED"

	// ChannelsOKBodyChannelsItems0OrderingORDERUNORDERED captures enum value "ORDER_UNORDERED"
	ChannelsOKBodyChannelsItems0OrderingORDERUNORDERED string = "ORDER_UNORDERED"

	// ChannelsOKBodyChannelsItems0OrderingORDERORDERED captures enum value "ORDER_ORDERED"
	ChannelsOKBodyChannelsItems0OrderingORDERORDERED string = "ORDER_ORDERED"
)

// prop value enum
func (o *ChannelsOKBodyChannelsItems0) validateOrderingEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, channelsOKBodyChannelsItems0TypeOrderingPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ChannelsOKBodyChannelsItems0) validateOrdering(formats strfmt.Registry) error {
	if swag.IsZero(o.Ordering) { // not required
		return nil
	}

	// value enum
	if err := o.validateOrderingEnum("ordering", "body", *o.Ordering); err != nil {
		return err
	}

	return nil
}

var channelsOKBodyChannelsItems0TypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STATE_UNINITIALIZED_UNSPECIFIED","STATE_INIT","STATE_TRYOPEN","STATE_OPEN","STATE_CLOSED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		channelsOKBodyChannelsItems0TypeStatePropEnum = append(channelsOKBodyChannelsItems0TypeStatePropEnum, v)
	}
}

const (

	// ChannelsOKBodyChannelsItems0StateSTATEUNINITIALIZEDUNSPECIFIED captures enum value "STATE_UNINITIALIZED_UNSPECIFIED"
	ChannelsOKBodyChannelsItems0StateSTATEUNINITIALIZEDUNSPECIFIED string = "STATE_UNINITIALIZED_UNSPECIFIED"

	// ChannelsOKBodyChannelsItems0StateSTATEINIT captures enum value "STATE_INIT"
	ChannelsOKBodyChannelsItems0StateSTATEINIT string = "STATE_INIT"

	// ChannelsOKBodyChannelsItems0StateSTATETRYOPEN captures enum value "STATE_TRYOPEN"
	ChannelsOKBodyChannelsItems0StateSTATETRYOPEN string = "STATE_TRYOPEN"

	// ChannelsOKBodyChannelsItems0StateSTATEOPEN captures enum value "STATE_OPEN"
	ChannelsOKBodyChannelsItems0StateSTATEOPEN string = "STATE_OPEN"

	// ChannelsOKBodyChannelsItems0StateSTATECLOSED captures enum value "STATE_CLOSED"
	ChannelsOKBodyChannelsItems0StateSTATECLOSED string = "STATE_CLOSED"
)

// prop value enum
func (o *ChannelsOKBodyChannelsItems0) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, channelsOKBodyChannelsItems0TypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ChannelsOKBodyChannelsItems0) validateState(formats strfmt.Registry) error {
	if swag.IsZero(o.State) { // not required
		return nil
	}

	// value enum
	if err := o.validateStateEnum("state", "body", *o.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this channels o k body channels items0 based on the context it is used
func (o *ChannelsOKBodyChannelsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCounterparty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChannelsOKBodyChannelsItems0) contextValidateCounterparty(ctx context.Context, formats strfmt.Registry) error {

	if o.Counterparty != nil {
		if err := o.Counterparty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("counterparty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("counterparty")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsOKBodyChannelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsOKBodyChannelsItems0) UnmarshalBinary(b []byte) error {
	var res ChannelsOKBodyChannelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsOKBodyChannelsItems0Counterparty counterparty channel end
swagger:model ChannelsOKBodyChannelsItems0Counterparty
*/
type ChannelsOKBodyChannelsItems0Counterparty struct {

	// channel end on the counterparty chain
	ChannelID string `json:"channel_id,omitempty"`

	// port on the counterparty chain which owns the other end of the channel.
	PortID string `json:"port_id,omitempty"`
}

// Validate validates this channels o k body channels items0 counterparty
func (o *ChannelsOKBodyChannelsItems0Counterparty) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this channels o k body channels items0 counterparty based on context it is used
func (o *ChannelsOKBodyChannelsItems0Counterparty) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsOKBodyChannelsItems0Counterparty) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsOKBodyChannelsItems0Counterparty) UnmarshalBinary(b []byte) error {
	var res ChannelsOKBodyChannelsItems0Counterparty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsOKBodyHeight query block height
//
// Normally the RevisionHeight is incremented at each height while keeping
// RevisionNumber the same. However some consensus algorithms may choose to
// reset the height in certain conditions e.g. hard forks, state-machine
// breaking changes In these cases, the RevisionNumber is incremented so that
// height continues to be monitonically increasing even as the RevisionHeight
// gets reset
swagger:model ChannelsOKBodyHeight
*/
type ChannelsOKBodyHeight struct {

	// the height within the given revision
	RevisionHeight string `json:"revision_height,omitempty"`

	// the revision that the client is currently on
	RevisionNumber string `json:"revision_number,omitempty"`
}

// Validate validates this channels o k body height
func (o *ChannelsOKBodyHeight) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this channels o k body height based on context it is used
func (o *ChannelsOKBodyHeight) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsOKBodyHeight) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsOKBodyHeight) UnmarshalBinary(b []byte) error {
	var res ChannelsOKBodyHeight
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChannelsOKBodyPagination pagination response
//
// PageResponse is to be embedded in gRPC response messages where the
// corresponding request message has used PageRequest.
//
//  message SomeResponse {
//          repeated Bar results = 1;
//          PageResponse page = 2;
//  }
swagger:model ChannelsOKBodyPagination
*/
type ChannelsOKBodyPagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this channels o k body pagination
func (o *ChannelsOKBodyPagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this channels o k body pagination based on context it is used
func (o *ChannelsOKBodyPagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChannelsOKBodyPagination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChannelsOKBodyPagination) UnmarshalBinary(b []byte) error {
	var res ChannelsOKBodyPagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
