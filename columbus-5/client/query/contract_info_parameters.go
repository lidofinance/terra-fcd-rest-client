// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewContractInfoParams creates a new ContractInfoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewContractInfoParams() *ContractInfoParams {
	return &ContractInfoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewContractInfoParamsWithTimeout creates a new ContractInfoParams object
// with the ability to set a timeout on a request.
func NewContractInfoParamsWithTimeout(timeout time.Duration) *ContractInfoParams {
	return &ContractInfoParams{
		timeout: timeout,
	}
}

// NewContractInfoParamsWithContext creates a new ContractInfoParams object
// with the ability to set a context for a request.
func NewContractInfoParamsWithContext(ctx context.Context) *ContractInfoParams {
	return &ContractInfoParams{
		Context: ctx,
	}
}

// NewContractInfoParamsWithHTTPClient creates a new ContractInfoParams object
// with the ability to set a custom HTTPClient for a request.
func NewContractInfoParamsWithHTTPClient(client *http.Client) *ContractInfoParams {
	return &ContractInfoParams{
		HTTPClient: client,
	}
}

/* ContractInfoParams contains all the parameters to send to the API endpoint
   for the contract info operation.

   Typically these are written to a http.Request.
*/
type ContractInfoParams struct {

	// ContractAddress.
	ContractAddress string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the contract info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ContractInfoParams) WithDefaults() *ContractInfoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the contract info params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ContractInfoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the contract info params
func (o *ContractInfoParams) WithTimeout(timeout time.Duration) *ContractInfoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the contract info params
func (o *ContractInfoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the contract info params
func (o *ContractInfoParams) WithContext(ctx context.Context) *ContractInfoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the contract info params
func (o *ContractInfoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the contract info params
func (o *ContractInfoParams) WithHTTPClient(client *http.Client) *ContractInfoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the contract info params
func (o *ContractInfoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContractAddress adds the contractAddress to the contract info params
func (o *ContractInfoParams) WithContractAddress(contractAddress string) *ContractInfoParams {
	o.SetContractAddress(contractAddress)
	return o
}

// SetContractAddress adds the contractAddress to the contract info params
func (o *ContractInfoParams) SetContractAddress(contractAddress string) {
	o.ContractAddress = contractAddress
}

// WriteToRequest writes these params to a swagger request
func (o *ContractInfoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param contract_address
	if err := r.SetPathParam("contract_address", o.ContractAddress); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
