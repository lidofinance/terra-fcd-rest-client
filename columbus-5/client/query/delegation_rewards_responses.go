// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DelegationRewardsReader is a Reader for the DelegationRewards structure.
type DelegationRewardsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DelegationRewardsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDelegationRewardsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDelegationRewardsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDelegationRewardsOK creates a DelegationRewardsOK with default headers values
func NewDelegationRewardsOK() *DelegationRewardsOK {
	return &DelegationRewardsOK{}
}

/* DelegationRewardsOK describes a response with status code 200, with default header values.

A successful response.
*/
type DelegationRewardsOK struct {
	Payload *DelegationRewardsOKBody
}

func (o *DelegationRewardsOK) Error() string {
	return fmt.Sprintf("[GET /cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}][%d] delegationRewardsOK  %+v", 200, o.Payload)
}
func (o *DelegationRewardsOK) GetPayload() *DelegationRewardsOKBody {
	return o.Payload
}

func (o *DelegationRewardsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DelegationRewardsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDelegationRewardsDefault creates a DelegationRewardsDefault with default headers values
func NewDelegationRewardsDefault(code int) *DelegationRewardsDefault {
	return &DelegationRewardsDefault{
		_statusCode: code,
	}
}

/* DelegationRewardsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type DelegationRewardsDefault struct {
	_statusCode int

	Payload *DelegationRewardsDefaultBody
}

// Code gets the status code for the delegation rewards default response
func (o *DelegationRewardsDefault) Code() int {
	return o._statusCode
}

func (o *DelegationRewardsDefault) Error() string {
	return fmt.Sprintf("[GET /cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}][%d] DelegationRewards default  %+v", o._statusCode, o.Payload)
}
func (o *DelegationRewardsDefault) GetPayload() *DelegationRewardsDefaultBody {
	return o.Payload
}

func (o *DelegationRewardsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DelegationRewardsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DelegationRewardsDefaultBody delegation rewards default body
swagger:model DelegationRewardsDefaultBody
*/
type DelegationRewardsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*DelegationRewardsDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delegation rewards default body
func (o *DelegationRewardsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DelegationRewardsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DelegationRewards default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DelegationRewards default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delegation rewards default body based on the context it is used
func (o *DelegationRewardsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DelegationRewardsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DelegationRewards default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DelegationRewards default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DelegationRewardsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DelegationRewardsDefaultBody) UnmarshalBinary(b []byte) error {
	var res DelegationRewardsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DelegationRewardsDefaultBodyDetailsItems0 delegation rewards default body details items0
swagger:model DelegationRewardsDefaultBodyDetailsItems0
*/
type DelegationRewardsDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this delegation rewards default body details items0
func (o *DelegationRewardsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delegation rewards default body details items0 based on context it is used
func (o *DelegationRewardsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DelegationRewardsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DelegationRewardsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res DelegationRewardsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DelegationRewardsOKBody QueryDelegationRewardsResponse is the response type for the
// Query/DelegationRewards RPC method.
swagger:model DelegationRewardsOKBody
*/
type DelegationRewardsOKBody struct {

	// rewards defines the rewards accrued by a delegation.
	Rewards []*DelegationRewardsOKBodyRewardsItems0 `json:"rewards"`
}

// Validate validates this delegation rewards o k body
func (o *DelegationRewardsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRewards(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DelegationRewardsOKBody) validateRewards(formats strfmt.Registry) error {
	if swag.IsZero(o.Rewards) { // not required
		return nil
	}

	for i := 0; i < len(o.Rewards); i++ {
		if swag.IsZero(o.Rewards[i]) { // not required
			continue
		}

		if o.Rewards[i] != nil {
			if err := o.Rewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delegationRewardsOK" + "." + "rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("delegationRewardsOK" + "." + "rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delegation rewards o k body based on the context it is used
func (o *DelegationRewardsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRewards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DelegationRewardsOKBody) contextValidateRewards(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Rewards); i++ {

		if o.Rewards[i] != nil {
			if err := o.Rewards[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delegationRewardsOK" + "." + "rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("delegationRewardsOK" + "." + "rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DelegationRewardsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DelegationRewardsOKBody) UnmarshalBinary(b []byte) error {
	var res DelegationRewardsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DelegationRewardsOKBodyRewardsItems0 DecCoin defines a token with a denomination and a decimal amount.
//
// NOTE: The amount field is an Dec which implements the custom method
// signatures required by gogoproto.
swagger:model DelegationRewardsOKBodyRewardsItems0
*/
type DelegationRewardsOKBodyRewardsItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this delegation rewards o k body rewards items0
func (o *DelegationRewardsOKBodyRewardsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delegation rewards o k body rewards items0 based on context it is used
func (o *DelegationRewardsOKBodyRewardsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DelegationRewardsOKBodyRewardsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DelegationRewardsOKBodyRewardsItems0) UnmarshalBinary(b []byte) error {
	var res DelegationRewardsOKBodyRewardsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
