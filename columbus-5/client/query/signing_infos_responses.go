// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SigningInfosReader is a Reader for the SigningInfos structure.
type SigningInfosReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SigningInfosReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSigningInfosOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSigningInfosDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSigningInfosOK creates a SigningInfosOK with default headers values
func NewSigningInfosOK() *SigningInfosOK {
	return &SigningInfosOK{}
}

/* SigningInfosOK describes a response with status code 200, with default header values.

A successful response.
*/
type SigningInfosOK struct {
	Payload *SigningInfosOKBody
}

func (o *SigningInfosOK) Error() string {
	return fmt.Sprintf("[GET /cosmos/slashing/v1beta1/signing_infos][%d] signingInfosOK  %+v", 200, o.Payload)
}
func (o *SigningInfosOK) GetPayload() *SigningInfosOKBody {
	return o.Payload
}

func (o *SigningInfosOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SigningInfosOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSigningInfosDefault creates a SigningInfosDefault with default headers values
func NewSigningInfosDefault(code int) *SigningInfosDefault {
	return &SigningInfosDefault{
		_statusCode: code,
	}
}

/* SigningInfosDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type SigningInfosDefault struct {
	_statusCode int

	Payload *SigningInfosDefaultBody
}

// Code gets the status code for the signing infos default response
func (o *SigningInfosDefault) Code() int {
	return o._statusCode
}

func (o *SigningInfosDefault) Error() string {
	return fmt.Sprintf("[GET /cosmos/slashing/v1beta1/signing_infos][%d] SigningInfos default  %+v", o._statusCode, o.Payload)
}
func (o *SigningInfosDefault) GetPayload() *SigningInfosDefaultBody {
	return o.Payload
}

func (o *SigningInfosDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SigningInfosDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SigningInfosDefaultBody signing infos default body
swagger:model SigningInfosDefaultBody
*/
type SigningInfosDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*SigningInfosDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this signing infos default body
func (o *SigningInfosDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SigningInfosDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SigningInfos default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SigningInfos default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this signing infos default body based on the context it is used
func (o *SigningInfosDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SigningInfosDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SigningInfos default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SigningInfos default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SigningInfosDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SigningInfosDefaultBody) UnmarshalBinary(b []byte) error {
	var res SigningInfosDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SigningInfosDefaultBodyDetailsItems0 signing infos default body details items0
swagger:model SigningInfosDefaultBodyDetailsItems0
*/
type SigningInfosDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this signing infos default body details items0
func (o *SigningInfosDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this signing infos default body details items0 based on context it is used
func (o *SigningInfosDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SigningInfosDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SigningInfosDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res SigningInfosDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SigningInfosOKBody QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC
// method
swagger:model SigningInfosOKBody
*/
type SigningInfosOKBody struct {

	// info is the signing info of all validators
	Info []*SigningInfosOKBodyInfoItems0 `json:"info"`

	// pagination
	Pagination *SigningInfosOKBodyPagination `json:"pagination,omitempty"`
}

// Validate validates this signing infos o k body
func (o *SigningInfosOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SigningInfosOKBody) validateInfo(formats strfmt.Registry) error {
	if swag.IsZero(o.Info) { // not required
		return nil
	}

	for i := 0; i < len(o.Info); i++ {
		if swag.IsZero(o.Info[i]) { // not required
			continue
		}

		if o.Info[i] != nil {
			if err := o.Info[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signingInfosOK" + "." + "info" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("signingInfosOK" + "." + "info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SigningInfosOKBody) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signingInfosOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signingInfosOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this signing infos o k body based on the context it is used
func (o *SigningInfosOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SigningInfosOKBody) contextValidateInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Info); i++ {

		if o.Info[i] != nil {
			if err := o.Info[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signingInfosOK" + "." + "info" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("signingInfosOK" + "." + "info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SigningInfosOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {
		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signingInfosOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signingInfosOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SigningInfosOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SigningInfosOKBody) UnmarshalBinary(b []byte) error {
	var res SigningInfosOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SigningInfosOKBodyInfoItems0 ValidatorSigningInfo defines a validator's signing info for monitoring their
// liveness activity.
swagger:model SigningInfosOKBodyInfoItems0
*/
type SigningInfosOKBodyInfoItems0 struct {

	// address
	Address string `json:"address,omitempty"`

	// Index which is incremented each time the validator was a bonded
	// in a block and may have signed a precommit or not. This in conjunction with the
	// `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`.
	IndexOffset string `json:"index_offset,omitempty"`

	// Timestamp until which the validator is jailed due to liveness downtime.
	// Format: date-time
	JailedUntil strfmt.DateTime `json:"jailed_until,omitempty"`

	// A counter kept to avoid unnecessary array reads.
	// Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.
	MissedBlocksCounter string `json:"missed_blocks_counter,omitempty"`

	// Height at which validator was first a candidate OR was unjailed
	StartHeight string `json:"start_height,omitempty"`

	// Whether or not a validator has been tombstoned (killed out of validator set). It is set
	// once the validator commits an equivocation or for any other configured misbehiavor.
	Tombstoned bool `json:"tombstoned,omitempty"`
}

// Validate validates this signing infos o k body info items0
func (o *SigningInfosOKBodyInfoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateJailedUntil(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SigningInfosOKBodyInfoItems0) validateJailedUntil(formats strfmt.Registry) error {
	if swag.IsZero(o.JailedUntil) { // not required
		return nil
	}

	if err := validate.FormatOf("jailed_until", "body", "date-time", o.JailedUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this signing infos o k body info items0 based on context it is used
func (o *SigningInfosOKBodyInfoItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SigningInfosOKBodyInfoItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SigningInfosOKBodyInfoItems0) UnmarshalBinary(b []byte) error {
	var res SigningInfosOKBodyInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SigningInfosOKBodyPagination PageResponse is to be embedded in gRPC response messages where the
// corresponding request message has used PageRequest.
//
//  message SomeResponse {
//          repeated Bar results = 1;
//          PageResponse page = 2;
//  }
swagger:model SigningInfosOKBodyPagination
*/
type SigningInfosOKBodyPagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this signing infos o k body pagination
func (o *SigningInfosOKBodyPagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this signing infos o k body pagination based on context it is used
func (o *SigningInfosOKBodyPagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SigningInfosOKBodyPagination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SigningInfosOKBodyPagination) UnmarshalBinary(b []byte) error {
	var res SigningInfosOKBodyPagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
