// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewConnectionParams creates a new ConnectionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewConnectionParams() *ConnectionParams {
	return &ConnectionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewConnectionParamsWithTimeout creates a new ConnectionParams object
// with the ability to set a timeout on a request.
func NewConnectionParamsWithTimeout(timeout time.Duration) *ConnectionParams {
	return &ConnectionParams{
		timeout: timeout,
	}
}

// NewConnectionParamsWithContext creates a new ConnectionParams object
// with the ability to set a context for a request.
func NewConnectionParamsWithContext(ctx context.Context) *ConnectionParams {
	return &ConnectionParams{
		Context: ctx,
	}
}

// NewConnectionParamsWithHTTPClient creates a new ConnectionParams object
// with the ability to set a custom HTTPClient for a request.
func NewConnectionParamsWithHTTPClient(client *http.Client) *ConnectionParams {
	return &ConnectionParams{
		HTTPClient: client,
	}
}

/* ConnectionParams contains all the parameters to send to the API endpoint
   for the connection operation.

   Typically these are written to a http.Request.
*/
type ConnectionParams struct {

	/* ConnectionID.

	   connection unique identifier
	*/
	ConnectionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the connection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ConnectionParams) WithDefaults() *ConnectionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the connection params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ConnectionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the connection params
func (o *ConnectionParams) WithTimeout(timeout time.Duration) *ConnectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the connection params
func (o *ConnectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the connection params
func (o *ConnectionParams) WithContext(ctx context.Context) *ConnectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the connection params
func (o *ConnectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the connection params
func (o *ConnectionParams) WithHTTPClient(client *http.Client) *ConnectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the connection params
func (o *ConnectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnectionID adds the connectionID to the connection params
func (o *ConnectionParams) WithConnectionID(connectionID string) *ConnectionParams {
	o.SetConnectionID(connectionID)
	return o
}

// SetConnectionID adds the connectionId to the connection params
func (o *ConnectionParams) SetConnectionID(connectionID string) {
	o.ConnectionID = connectionID
}

// WriteToRequest writes these params to a swagger request
func (o *ConnectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param connection_id
	if err := r.SetPathParam("connection_id", o.ConnectionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
