// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewParamsParams creates a new ParamsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewParamsParams() *ParamsParams {
	return &ParamsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewParamsParamsWithTimeout creates a new ParamsParams object
// with the ability to set a timeout on a request.
func NewParamsParamsWithTimeout(timeout time.Duration) *ParamsParams {
	return &ParamsParams{
		timeout: timeout,
	}
}

// NewParamsParamsWithContext creates a new ParamsParams object
// with the ability to set a context for a request.
func NewParamsParamsWithContext(ctx context.Context) *ParamsParams {
	return &ParamsParams{
		Context: ctx,
	}
}

// NewParamsParamsWithHTTPClient creates a new ParamsParams object
// with the ability to set a custom HTTPClient for a request.
func NewParamsParamsWithHTTPClient(client *http.Client) *ParamsParams {
	return &ParamsParams{
		HTTPClient: client,
	}
}

/* ParamsParams contains all the parameters to send to the API endpoint
   for the params operation.

   Typically these are written to a http.Request.
*/
type ParamsParams struct {

	/* Key.

	   key defines the key of the parameter in the subspace.
	*/
	Key *string

	/* Subspace.

	   subspace defines the module to query the parameter for.
	*/
	Subspace *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the params params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ParamsParams) WithDefaults() *ParamsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the params params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ParamsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the params params
func (o *ParamsParams) WithTimeout(timeout time.Duration) *ParamsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the params params
func (o *ParamsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the params params
func (o *ParamsParams) WithContext(ctx context.Context) *ParamsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the params params
func (o *ParamsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the params params
func (o *ParamsParams) WithHTTPClient(client *http.Client) *ParamsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the params params
func (o *ParamsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKey adds the key to the params params
func (o *ParamsParams) WithKey(key *string) *ParamsParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the params params
func (o *ParamsParams) SetKey(key *string) {
	o.Key = key
}

// WithSubspace adds the subspace to the params params
func (o *ParamsParams) WithSubspace(subspace *string) *ParamsParams {
	o.SetSubspace(subspace)
	return o
}

// SetSubspace adds the subspace to the params params
func (o *ParamsParams) SetSubspace(subspace *string) {
	o.Subspace = subspace
}

// WriteToRequest writes these params to a swagger request
func (o *ParamsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Key != nil {

		// query param key
		var qrKey string

		if o.Key != nil {
			qrKey = *o.Key
		}
		qKey := qrKey
		if qKey != "" {

			if err := r.SetQueryParam("key", qKey); err != nil {
				return err
			}
		}
	}

	if o.Subspace != nil {

		// query param subspace
		var qrSubspace string

		if o.Subspace != nil {
			qrSubspace = *o.Subspace
		}
		qSubspace := qrSubspace
		if qSubspace != "" {

			if err := r.SetQueryParam("subspace", qSubspace); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
