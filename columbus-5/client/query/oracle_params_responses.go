// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OracleParamsReader is a Reader for the OracleParams structure.
type OracleParamsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OracleParamsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOracleParamsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewOracleParamsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewOracleParamsOK creates a OracleParamsOK with default headers values
func NewOracleParamsOK() *OracleParamsOK {
	return &OracleParamsOK{}
}

/* OracleParamsOK describes a response with status code 200, with default header values.

A successful response.
*/
type OracleParamsOK struct {
	Payload *OracleParamsOKBody
}

func (o *OracleParamsOK) Error() string {
	return fmt.Sprintf("[GET /terra/oracle/v1beta1/params][%d] oracleParamsOK  %+v", 200, o.Payload)
}
func (o *OracleParamsOK) GetPayload() *OracleParamsOKBody {
	return o.Payload
}

func (o *OracleParamsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OracleParamsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOracleParamsDefault creates a OracleParamsDefault with default headers values
func NewOracleParamsDefault(code int) *OracleParamsDefault {
	return &OracleParamsDefault{
		_statusCode: code,
	}
}

/* OracleParamsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type OracleParamsDefault struct {
	_statusCode int

	Payload *OracleParamsDefaultBody
}

// Code gets the status code for the oracle params default response
func (o *OracleParamsDefault) Code() int {
	return o._statusCode
}

func (o *OracleParamsDefault) Error() string {
	return fmt.Sprintf("[GET /terra/oracle/v1beta1/params][%d] OracleParams default  %+v", o._statusCode, o.Payload)
}
func (o *OracleParamsDefault) GetPayload() *OracleParamsDefaultBody {
	return o.Payload
}

func (o *OracleParamsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OracleParamsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*OracleParamsDefaultBody oracle params default body
swagger:model OracleParamsDefaultBody
*/
type OracleParamsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*OracleParamsDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this oracle params default body
func (o *OracleParamsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OracleParamsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OracleParams default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OracleParams default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this oracle params default body based on the context it is used
func (o *OracleParamsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OracleParamsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OracleParams default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OracleParams default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *OracleParamsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OracleParamsDefaultBody) UnmarshalBinary(b []byte) error {
	var res OracleParamsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OracleParamsDefaultBodyDetailsItems0 oracle params default body details items0
swagger:model OracleParamsDefaultBodyDetailsItems0
*/
type OracleParamsDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this oracle params default body details items0
func (o *OracleParamsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this oracle params default body details items0 based on context it is used
func (o *OracleParamsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OracleParamsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OracleParamsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res OracleParamsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OracleParamsOKBody QueryParamsResponse is the response type for the Query/Params RPC method.
swagger:model OracleParamsOKBody
*/
type OracleParamsOKBody struct {

	// params
	Params *OracleParamsOKBodyParams `json:"params,omitempty"`
}

// Validate validates this oracle params o k body
func (o *OracleParamsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OracleParamsOKBody) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParamsOK" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParamsOK" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this oracle params o k body based on the context it is used
func (o *OracleParamsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OracleParamsOKBody) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if o.Params != nil {
		if err := o.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleParamsOK" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleParamsOK" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OracleParamsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OracleParamsOKBody) UnmarshalBinary(b []byte) error {
	var res OracleParamsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OracleParamsOKBodyParams params defines the parameters of the module.
swagger:model OracleParamsOKBodyParams
*/
type OracleParamsOKBodyParams struct {

	// min valid per window
	MinValidPerWindow string `json:"min_valid_per_window,omitempty"`

	// reward band
	RewardBand string `json:"reward_band,omitempty"`

	// reward distribution window
	RewardDistributionWindow string `json:"reward_distribution_window,omitempty"`

	// slash fraction
	SlashFraction string `json:"slash_fraction,omitempty"`

	// slash window
	SlashWindow string `json:"slash_window,omitempty"`

	// vote period
	VotePeriod string `json:"vote_period,omitempty"`

	// vote threshold
	VoteThreshold string `json:"vote_threshold,omitempty"`

	// whitelist
	Whitelist []*OracleParamsOKBodyParamsWhitelistItems0 `json:"whitelist"`
}

// Validate validates this oracle params o k body params
func (o *OracleParamsOKBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OracleParamsOKBodyParams) validateWhitelist(formats strfmt.Registry) error {
	if swag.IsZero(o.Whitelist) { // not required
		return nil
	}

	for i := 0; i < len(o.Whitelist); i++ {
		if swag.IsZero(o.Whitelist[i]) { // not required
			continue
		}

		if o.Whitelist[i] != nil {
			if err := o.Whitelist[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("oracleParamsOK" + "." + "params" + "." + "whitelist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("oracleParamsOK" + "." + "params" + "." + "whitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this oracle params o k body params based on the context it is used
func (o *OracleParamsOKBodyParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateWhitelist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OracleParamsOKBodyParams) contextValidateWhitelist(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Whitelist); i++ {

		if o.Whitelist[i] != nil {
			if err := o.Whitelist[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("oracleParamsOK" + "." + "params" + "." + "whitelist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("oracleParamsOK" + "." + "params" + "." + "whitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *OracleParamsOKBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OracleParamsOKBodyParams) UnmarshalBinary(b []byte) error {
	var res OracleParamsOKBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OracleParamsOKBodyParamsWhitelistItems0 Denom - the object to hold configurations of each denom
swagger:model OracleParamsOKBodyParamsWhitelistItems0
*/
type OracleParamsOKBodyParamsWhitelistItems0 struct {

	// name
	Name string `json:"name,omitempty"`

	// tobin tax
	TobinTax string `json:"tobin_tax,omitempty"`
}

// Validate validates this oracle params o k body params whitelist items0
func (o *OracleParamsOKBodyParamsWhitelistItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this oracle params o k body params whitelist items0 based on context it is used
func (o *OracleParamsOKBodyParamsWhitelistItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OracleParamsOKBodyParamsWhitelistItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OracleParamsOKBodyParamsWhitelistItems0) UnmarshalBinary(b []byte) error {
	var res OracleParamsOKBodyParamsWhitelistItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
