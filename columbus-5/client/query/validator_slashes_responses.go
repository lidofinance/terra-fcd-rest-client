// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ValidatorSlashesReader is a Reader for the ValidatorSlashes structure.
type ValidatorSlashesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidatorSlashesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidatorSlashesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewValidatorSlashesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewValidatorSlashesOK creates a ValidatorSlashesOK with default headers values
func NewValidatorSlashesOK() *ValidatorSlashesOK {
	return &ValidatorSlashesOK{}
}

/* ValidatorSlashesOK describes a response with status code 200, with default header values.

A successful response.
*/
type ValidatorSlashesOK struct {
	Payload *ValidatorSlashesOKBody
}

func (o *ValidatorSlashesOK) Error() string {
	return fmt.Sprintf("[GET /cosmos/distribution/v1beta1/validators/{validator_address}/slashes][%d] validatorSlashesOK  %+v", 200, o.Payload)
}
func (o *ValidatorSlashesOK) GetPayload() *ValidatorSlashesOKBody {
	return o.Payload
}

func (o *ValidatorSlashesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ValidatorSlashesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidatorSlashesDefault creates a ValidatorSlashesDefault with default headers values
func NewValidatorSlashesDefault(code int) *ValidatorSlashesDefault {
	return &ValidatorSlashesDefault{
		_statusCode: code,
	}
}

/* ValidatorSlashesDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type ValidatorSlashesDefault struct {
	_statusCode int

	Payload *ValidatorSlashesDefaultBody
}

// Code gets the status code for the validator slashes default response
func (o *ValidatorSlashesDefault) Code() int {
	return o._statusCode
}

func (o *ValidatorSlashesDefault) Error() string {
	return fmt.Sprintf("[GET /cosmos/distribution/v1beta1/validators/{validator_address}/slashes][%d] ValidatorSlashes default  %+v", o._statusCode, o.Payload)
}
func (o *ValidatorSlashesDefault) GetPayload() *ValidatorSlashesDefaultBody {
	return o.Payload
}

func (o *ValidatorSlashesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ValidatorSlashesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ValidatorSlashesDefaultBody validator slashes default body
swagger:model ValidatorSlashesDefaultBody
*/
type ValidatorSlashesDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*ValidatorSlashesDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this validator slashes default body
func (o *ValidatorSlashesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidatorSlashesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ValidatorSlashes default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ValidatorSlashes default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this validator slashes default body based on the context it is used
func (o *ValidatorSlashesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidatorSlashesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ValidatorSlashes default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ValidatorSlashes default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidatorSlashesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidatorSlashesDefaultBody) UnmarshalBinary(b []byte) error {
	var res ValidatorSlashesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidatorSlashesDefaultBodyDetailsItems0 validator slashes default body details items0
swagger:model ValidatorSlashesDefaultBodyDetailsItems0
*/
type ValidatorSlashesDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this validator slashes default body details items0
func (o *ValidatorSlashesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this validator slashes default body details items0 based on context it is used
func (o *ValidatorSlashesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ValidatorSlashesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidatorSlashesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ValidatorSlashesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidatorSlashesOKBody QueryValidatorSlashesResponse is the response type for the
// Query/ValidatorSlashes RPC method.
swagger:model ValidatorSlashesOKBody
*/
type ValidatorSlashesOKBody struct {

	// pagination
	Pagination *ValidatorSlashesOKBodyPagination `json:"pagination,omitempty"`

	// slashes defines the slashes the validator received.
	Slashes []*ValidatorSlashesOKBodySlashesItems0 `json:"slashes"`
}

// Validate validates this validator slashes o k body
func (o *ValidatorSlashesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSlashes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidatorSlashesOKBody) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validatorSlashesOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validatorSlashesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

func (o *ValidatorSlashesOKBody) validateSlashes(formats strfmt.Registry) error {
	if swag.IsZero(o.Slashes) { // not required
		return nil
	}

	for i := 0; i < len(o.Slashes); i++ {
		if swag.IsZero(o.Slashes[i]) { // not required
			continue
		}

		if o.Slashes[i] != nil {
			if err := o.Slashes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validatorSlashesOK" + "." + "slashes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("validatorSlashesOK" + "." + "slashes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this validator slashes o k body based on the context it is used
func (o *ValidatorSlashesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSlashes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidatorSlashesOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {
		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validatorSlashesOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validatorSlashesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

func (o *ValidatorSlashesOKBody) contextValidateSlashes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Slashes); i++ {

		if o.Slashes[i] != nil {
			if err := o.Slashes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validatorSlashesOK" + "." + "slashes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("validatorSlashesOK" + "." + "slashes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidatorSlashesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidatorSlashesOKBody) UnmarshalBinary(b []byte) error {
	var res ValidatorSlashesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidatorSlashesOKBodyPagination pagination defines the pagination in the response.
swagger:model ValidatorSlashesOKBodyPagination
*/
type ValidatorSlashesOKBodyPagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this validator slashes o k body pagination
func (o *ValidatorSlashesOKBodyPagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this validator slashes o k body pagination based on context it is used
func (o *ValidatorSlashesOKBodyPagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ValidatorSlashesOKBodyPagination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidatorSlashesOKBodyPagination) UnmarshalBinary(b []byte) error {
	var res ValidatorSlashesOKBodyPagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidatorSlashesOKBodySlashesItems0 ValidatorSlashEvent represents a validator slash event.
// Height is implicit within the store key.
// This is needed to calculate appropriate amount of staking tokens
// for delegations which are withdrawn after a slash has occurred.
swagger:model ValidatorSlashesOKBodySlashesItems0
*/
type ValidatorSlashesOKBodySlashesItems0 struct {

	// fraction
	Fraction string `json:"fraction,omitempty"`

	// validator period
	ValidatorPeriod string `json:"validator_period,omitempty"`
}

// Validate validates this validator slashes o k body slashes items0
func (o *ValidatorSlashesOKBodySlashesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this validator slashes o k body slashes items0 based on context it is used
func (o *ValidatorSlashesOKBodySlashesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ValidatorSlashesOKBodySlashesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidatorSlashesOKBodySlashesItems0) UnmarshalBinary(b []byte) error {
	var res ValidatorSlashesOKBodySlashesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
