// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUnreceivedAcksParams creates a new UnreceivedAcksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUnreceivedAcksParams() *UnreceivedAcksParams {
	return &UnreceivedAcksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUnreceivedAcksParamsWithTimeout creates a new UnreceivedAcksParams object
// with the ability to set a timeout on a request.
func NewUnreceivedAcksParamsWithTimeout(timeout time.Duration) *UnreceivedAcksParams {
	return &UnreceivedAcksParams{
		timeout: timeout,
	}
}

// NewUnreceivedAcksParamsWithContext creates a new UnreceivedAcksParams object
// with the ability to set a context for a request.
func NewUnreceivedAcksParamsWithContext(ctx context.Context) *UnreceivedAcksParams {
	return &UnreceivedAcksParams{
		Context: ctx,
	}
}

// NewUnreceivedAcksParamsWithHTTPClient creates a new UnreceivedAcksParams object
// with the ability to set a custom HTTPClient for a request.
func NewUnreceivedAcksParamsWithHTTPClient(client *http.Client) *UnreceivedAcksParams {
	return &UnreceivedAcksParams{
		HTTPClient: client,
	}
}

/* UnreceivedAcksParams contains all the parameters to send to the API endpoint
   for the unreceived acks operation.

   Typically these are written to a http.Request.
*/
type UnreceivedAcksParams struct {

	/* ChannelID.

	   channel unique identifier
	*/
	ChannelID string

	/* PacketAckSequences.

	   list of acknowledgement sequences
	*/
	PacketAckSequences []string

	/* PortID.

	   port unique identifier
	*/
	PortID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the unreceived acks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UnreceivedAcksParams) WithDefaults() *UnreceivedAcksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the unreceived acks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UnreceivedAcksParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the unreceived acks params
func (o *UnreceivedAcksParams) WithTimeout(timeout time.Duration) *UnreceivedAcksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the unreceived acks params
func (o *UnreceivedAcksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the unreceived acks params
func (o *UnreceivedAcksParams) WithContext(ctx context.Context) *UnreceivedAcksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the unreceived acks params
func (o *UnreceivedAcksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the unreceived acks params
func (o *UnreceivedAcksParams) WithHTTPClient(client *http.Client) *UnreceivedAcksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the unreceived acks params
func (o *UnreceivedAcksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChannelID adds the channelID to the unreceived acks params
func (o *UnreceivedAcksParams) WithChannelID(channelID string) *UnreceivedAcksParams {
	o.SetChannelID(channelID)
	return o
}

// SetChannelID adds the channelId to the unreceived acks params
func (o *UnreceivedAcksParams) SetChannelID(channelID string) {
	o.ChannelID = channelID
}

// WithPacketAckSequences adds the packetAckSequences to the unreceived acks params
func (o *UnreceivedAcksParams) WithPacketAckSequences(packetAckSequences []string) *UnreceivedAcksParams {
	o.SetPacketAckSequences(packetAckSequences)
	return o
}

// SetPacketAckSequences adds the packetAckSequences to the unreceived acks params
func (o *UnreceivedAcksParams) SetPacketAckSequences(packetAckSequences []string) {
	o.PacketAckSequences = packetAckSequences
}

// WithPortID adds the portID to the unreceived acks params
func (o *UnreceivedAcksParams) WithPortID(portID string) *UnreceivedAcksParams {
	o.SetPortID(portID)
	return o
}

// SetPortID adds the portId to the unreceived acks params
func (o *UnreceivedAcksParams) SetPortID(portID string) {
	o.PortID = portID
}

// WriteToRequest writes these params to a swagger request
func (o *UnreceivedAcksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param channel_id
	if err := r.SetPathParam("channel_id", o.ChannelID); err != nil {
		return err
	}

	if o.PacketAckSequences != nil {

		// binding items for packet_ack_sequences
		joinedPacketAckSequences := o.bindParamPacketAckSequences(reg)

		// path array param packet_ack_sequences
		// SetPathParam does not support variadic arguments, since we used JoinByFormat
		// we can send the first item in the array as it's all the items of the previous
		// array joined together
		if len(joinedPacketAckSequences) > 0 {
			if err := r.SetPathParam("packet_ack_sequences", joinedPacketAckSequences[0]); err != nil {
				return err
			}
		}
	}

	// path param port_id
	if err := r.SetPathParam("port_id", o.PortID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamUnreceivedAcks binds the parameter packet_ack_sequences
func (o *UnreceivedAcksParams) bindParamPacketAckSequences(formats strfmt.Registry) []string {
	packetAckSequencesIR := o.PacketAckSequences

	var packetAckSequencesIC []string
	for _, packetAckSequencesIIR := range packetAckSequencesIR { // explode []string

		packetAckSequencesIIV := packetAckSequencesIIR // string as string
		packetAckSequencesIC = append(packetAckSequencesIC, packetAckSequencesIIV)
	}

	// items.CollectionFormat: "csv"
	packetAckSequencesIS := swag.JoinByFormat(packetAckSequencesIC, "csv")

	return packetAckSequencesIS
}
