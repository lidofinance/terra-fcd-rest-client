// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VotesReader is a Reader for the Votes structure.
type VotesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VotesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVotesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewVotesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewVotesOK creates a VotesOK with default headers values
func NewVotesOK() *VotesOK {
	return &VotesOK{}
}

/* VotesOK describes a response with status code 200, with default header values.

A successful response.
*/
type VotesOK struct {
	Payload *VotesOKBody
}

func (o *VotesOK) Error() string {
	return fmt.Sprintf("[GET /cosmos/gov/v1beta1/proposals/{proposal_id}/votes][%d] votesOK  %+v", 200, o.Payload)
}
func (o *VotesOK) GetPayload() *VotesOKBody {
	return o.Payload
}

func (o *VotesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(VotesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVotesDefault creates a VotesDefault with default headers values
func NewVotesDefault(code int) *VotesDefault {
	return &VotesDefault{
		_statusCode: code,
	}
}

/* VotesDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type VotesDefault struct {
	_statusCode int

	Payload *VotesDefaultBody
}

// Code gets the status code for the votes default response
func (o *VotesDefault) Code() int {
	return o._statusCode
}

func (o *VotesDefault) Error() string {
	return fmt.Sprintf("[GET /cosmos/gov/v1beta1/proposals/{proposal_id}/votes][%d] Votes default  %+v", o._statusCode, o.Payload)
}
func (o *VotesDefault) GetPayload() *VotesDefaultBody {
	return o.Payload
}

func (o *VotesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(VotesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*VotesDefaultBody votes default body
swagger:model VotesDefaultBody
*/
type VotesDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*VotesDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this votes default body
func (o *VotesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VotesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Votes default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Votes default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this votes default body based on the context it is used
func (o *VotesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VotesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Votes default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Votes default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *VotesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VotesDefaultBody) UnmarshalBinary(b []byte) error {
	var res VotesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*VotesDefaultBodyDetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := ptypes.MarshalAny(foo)
//      ...
//      foo := &pb.Foo{}
//      if err := ptypes.UnmarshalAny(any, foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model VotesDefaultBodyDetailsItems0
*/
type VotesDefaultBodyDetailsItems0 struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this votes default body details items0
func (o *VotesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this votes default body details items0 based on context it is used
func (o *VotesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VotesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VotesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res VotesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*VotesOKBody QueryVotesResponse is the response type for the Query/Votes RPC method.
swagger:model VotesOKBody
*/
type VotesOKBody struct {

	// pagination
	Pagination *VotesOKBodyPagination `json:"pagination,omitempty"`

	// votes defined the queried votes.
	Votes []*VotesOKBodyVotesItems0 `json:"votes"`
}

// Validate validates this votes o k body
func (o *VotesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VotesOKBody) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("votesOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("votesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

func (o *VotesOKBody) validateVotes(formats strfmt.Registry) error {
	if swag.IsZero(o.Votes) { // not required
		return nil
	}

	for i := 0; i < len(o.Votes); i++ {
		if swag.IsZero(o.Votes[i]) { // not required
			continue
		}

		if o.Votes[i] != nil {
			if err := o.Votes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("votesOK" + "." + "votes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("votesOK" + "." + "votes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this votes o k body based on the context it is used
func (o *VotesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVotes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VotesOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {
		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("votesOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("votesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

func (o *VotesOKBody) contextValidateVotes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Votes); i++ {

		if o.Votes[i] != nil {
			if err := o.Votes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("votesOK" + "." + "votes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("votesOK" + "." + "votes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *VotesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VotesOKBody) UnmarshalBinary(b []byte) error {
	var res VotesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*VotesOKBodyPagination pagination defines the pagination in the response.
swagger:model VotesOKBodyPagination
*/
type VotesOKBodyPagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this votes o k body pagination
func (o *VotesOKBodyPagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this votes o k body pagination based on context it is used
func (o *VotesOKBodyPagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VotesOKBodyPagination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VotesOKBodyPagination) UnmarshalBinary(b []byte) error {
	var res VotesOKBodyPagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*VotesOKBodyVotesItems0 Vote defines a vote on a governance proposal.
// A Vote consists of a proposal ID, the voter, and the vote option.
swagger:model VotesOKBodyVotesItems0
*/
type VotesOKBodyVotesItems0 struct {

	// Deprecated: Prefer to use `options` instead. This field is set in queries
	// if and only if `len(options) == 1` and that option has weight 1. In all
	// other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
	// Enum: [VOTE_OPTION_UNSPECIFIED VOTE_OPTION_YES VOTE_OPTION_ABSTAIN VOTE_OPTION_NO VOTE_OPTION_NO_WITH_VETO]
	Option string `json:"option,omitempty"`

	// options
	Options []*VotesOKBodyVotesItems0OptionsItems0 `json:"options"`

	// proposal id
	ProposalID string `json:"proposal_id,omitempty"`

	// voter
	Voter string `json:"voter,omitempty"`
}

// Validate validates this votes o k body votes items0
func (o *VotesOKBodyVotesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOption(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var votesOKBodyVotesItems0TypeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		votesOKBodyVotesItems0TypeOptionPropEnum = append(votesOKBodyVotesItems0TypeOptionPropEnum, v)
	}
}

const (

	// VotesOKBodyVotesItems0OptionVOTEOPTIONUNSPECIFIED captures enum value "VOTE_OPTION_UNSPECIFIED"
	VotesOKBodyVotesItems0OptionVOTEOPTIONUNSPECIFIED string = "VOTE_OPTION_UNSPECIFIED"

	// VotesOKBodyVotesItems0OptionVOTEOPTIONYES captures enum value "VOTE_OPTION_YES"
	VotesOKBodyVotesItems0OptionVOTEOPTIONYES string = "VOTE_OPTION_YES"

	// VotesOKBodyVotesItems0OptionVOTEOPTIONABSTAIN captures enum value "VOTE_OPTION_ABSTAIN"
	VotesOKBodyVotesItems0OptionVOTEOPTIONABSTAIN string = "VOTE_OPTION_ABSTAIN"

	// VotesOKBodyVotesItems0OptionVOTEOPTIONNO captures enum value "VOTE_OPTION_NO"
	VotesOKBodyVotesItems0OptionVOTEOPTIONNO string = "VOTE_OPTION_NO"

	// VotesOKBodyVotesItems0OptionVOTEOPTIONNOWITHVETO captures enum value "VOTE_OPTION_NO_WITH_VETO"
	VotesOKBodyVotesItems0OptionVOTEOPTIONNOWITHVETO string = "VOTE_OPTION_NO_WITH_VETO"
)

// prop value enum
func (o *VotesOKBodyVotesItems0) validateOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, votesOKBodyVotesItems0TypeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *VotesOKBodyVotesItems0) validateOption(formats strfmt.Registry) error {
	if swag.IsZero(o.Option) { // not required
		return nil
	}

	// value enum
	if err := o.validateOptionEnum("option", "body", o.Option); err != nil {
		return err
	}

	return nil
}

func (o *VotesOKBodyVotesItems0) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.Options) { // not required
		return nil
	}

	for i := 0; i < len(o.Options); i++ {
		if swag.IsZero(o.Options[i]) { // not required
			continue
		}

		if o.Options[i] != nil {
			if err := o.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this votes o k body votes items0 based on the context it is used
func (o *VotesOKBodyVotesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VotesOKBodyVotesItems0) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Options); i++ {

		if o.Options[i] != nil {
			if err := o.Options[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *VotesOKBodyVotesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VotesOKBodyVotesItems0) UnmarshalBinary(b []byte) error {
	var res VotesOKBodyVotesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*VotesOKBodyVotesItems0OptionsItems0 WeightedVoteOption defines a unit of vote for vote split.
swagger:model VotesOKBodyVotesItems0OptionsItems0
*/
type VotesOKBodyVotesItems0OptionsItems0 struct {

	// VoteOption enumerates the valid vote options for a given governance proposal.
	//
	//  - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
	//  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
	//  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
	//  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
	//  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
	// Enum: [VOTE_OPTION_UNSPECIFIED VOTE_OPTION_YES VOTE_OPTION_ABSTAIN VOTE_OPTION_NO VOTE_OPTION_NO_WITH_VETO]
	Option string `json:"option,omitempty"`

	// weight
	Weight string `json:"weight,omitempty"`
}

// Validate validates this votes o k body votes items0 options items0
func (o *VotesOKBodyVotesItems0OptionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var votesOKBodyVotesItems0OptionsItems0TypeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		votesOKBodyVotesItems0OptionsItems0TypeOptionPropEnum = append(votesOKBodyVotesItems0OptionsItems0TypeOptionPropEnum, v)
	}
}

const (

	// VotesOKBodyVotesItems0OptionsItems0OptionVOTEOPTIONUNSPECIFIED captures enum value "VOTE_OPTION_UNSPECIFIED"
	VotesOKBodyVotesItems0OptionsItems0OptionVOTEOPTIONUNSPECIFIED string = "VOTE_OPTION_UNSPECIFIED"

	// VotesOKBodyVotesItems0OptionsItems0OptionVOTEOPTIONYES captures enum value "VOTE_OPTION_YES"
	VotesOKBodyVotesItems0OptionsItems0OptionVOTEOPTIONYES string = "VOTE_OPTION_YES"

	// VotesOKBodyVotesItems0OptionsItems0OptionVOTEOPTIONABSTAIN captures enum value "VOTE_OPTION_ABSTAIN"
	VotesOKBodyVotesItems0OptionsItems0OptionVOTEOPTIONABSTAIN string = "VOTE_OPTION_ABSTAIN"

	// VotesOKBodyVotesItems0OptionsItems0OptionVOTEOPTIONNO captures enum value "VOTE_OPTION_NO"
	VotesOKBodyVotesItems0OptionsItems0OptionVOTEOPTIONNO string = "VOTE_OPTION_NO"

	// VotesOKBodyVotesItems0OptionsItems0OptionVOTEOPTIONNOWITHVETO captures enum value "VOTE_OPTION_NO_WITH_VETO"
	VotesOKBodyVotesItems0OptionsItems0OptionVOTEOPTIONNOWITHVETO string = "VOTE_OPTION_NO_WITH_VETO"
)

// prop value enum
func (o *VotesOKBodyVotesItems0OptionsItems0) validateOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, votesOKBodyVotesItems0OptionsItems0TypeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *VotesOKBodyVotesItems0OptionsItems0) validateOption(formats strfmt.Registry) error {
	if swag.IsZero(o.Option) { // not required
		return nil
	}

	// value enum
	if err := o.validateOptionEnum("option", "body", o.Option); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this votes o k body votes items0 options items0 based on context it is used
func (o *VotesOKBodyVotesItems0OptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VotesOKBodyVotesItems0OptionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VotesOKBodyVotesItems0OptionsItems0) UnmarshalBinary(b []byte) error {
	var res VotesOKBodyVotesItems0OptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
