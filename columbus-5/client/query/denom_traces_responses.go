// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DenomTracesReader is a Reader for the DenomTraces structure.
type DenomTracesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DenomTracesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDenomTracesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDenomTracesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDenomTracesOK creates a DenomTracesOK with default headers values
func NewDenomTracesOK() *DenomTracesOK {
	return &DenomTracesOK{}
}

/* DenomTracesOK describes a response with status code 200, with default header values.

A successful response.
*/
type DenomTracesOK struct {
	Payload *DenomTracesOKBody
}

func (o *DenomTracesOK) Error() string {
	return fmt.Sprintf("[GET /ibc/apps/transfer/v1/denom_traces][%d] denomTracesOK  %+v", 200, o.Payload)
}
func (o *DenomTracesOK) GetPayload() *DenomTracesOKBody {
	return o.Payload
}

func (o *DenomTracesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DenomTracesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDenomTracesDefault creates a DenomTracesDefault with default headers values
func NewDenomTracesDefault(code int) *DenomTracesDefault {
	return &DenomTracesDefault{
		_statusCode: code,
	}
}

/* DenomTracesDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type DenomTracesDefault struct {
	_statusCode int

	Payload *DenomTracesDefaultBody
}

// Code gets the status code for the denom traces default response
func (o *DenomTracesDefault) Code() int {
	return o._statusCode
}

func (o *DenomTracesDefault) Error() string {
	return fmt.Sprintf("[GET /ibc/apps/transfer/v1/denom_traces][%d] DenomTraces default  %+v", o._statusCode, o.Payload)
}
func (o *DenomTracesDefault) GetPayload() *DenomTracesDefaultBody {
	return o.Payload
}

func (o *DenomTracesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DenomTracesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DenomTracesDefaultBody denom traces default body
swagger:model DenomTracesDefaultBody
*/
type DenomTracesDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*DenomTracesDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this denom traces default body
func (o *DenomTracesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DenomTracesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DenomTraces default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DenomTraces default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this denom traces default body based on the context it is used
func (o *DenomTracesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DenomTracesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DenomTraces default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DenomTraces default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DenomTracesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomTracesDefaultBody) UnmarshalBinary(b []byte) error {
	var res DenomTracesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DenomTracesDefaultBodyDetailsItems0 denom traces default body details items0
swagger:model DenomTracesDefaultBodyDetailsItems0
*/
type DenomTracesDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this denom traces default body details items0
func (o *DenomTracesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this denom traces default body details items0 based on context it is used
func (o *DenomTracesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DenomTracesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomTracesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res DenomTracesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DenomTracesOKBody QueryConnectionsResponse is the response type for the Query/DenomTraces RPC
// method.
swagger:model DenomTracesOKBody
*/
type DenomTracesOKBody struct {

	// denom_traces returns all denominations trace information.
	DenomTraces []*DenomTracesOKBodyDenomTracesItems0 `json:"denom_traces"`

	// pagination
	Pagination *DenomTracesOKBodyPagination `json:"pagination,omitempty"`
}

// Validate validates this denom traces o k body
func (o *DenomTracesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDenomTraces(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DenomTracesOKBody) validateDenomTraces(formats strfmt.Registry) error {
	if swag.IsZero(o.DenomTraces) { // not required
		return nil
	}

	for i := 0; i < len(o.DenomTraces); i++ {
		if swag.IsZero(o.DenomTraces[i]) { // not required
			continue
		}

		if o.DenomTraces[i] != nil {
			if err := o.DenomTraces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("denomTracesOK" + "." + "denom_traces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("denomTracesOK" + "." + "denom_traces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *DenomTracesOKBody) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("denomTracesOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("denomTracesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this denom traces o k body based on the context it is used
func (o *DenomTracesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDenomTraces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DenomTracesOKBody) contextValidateDenomTraces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.DenomTraces); i++ {

		if o.DenomTraces[i] != nil {
			if err := o.DenomTraces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("denomTracesOK" + "." + "denom_traces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("denomTracesOK" + "." + "denom_traces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *DenomTracesOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {
		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("denomTracesOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("denomTracesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DenomTracesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomTracesOKBody) UnmarshalBinary(b []byte) error {
	var res DenomTracesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DenomTracesOKBodyDenomTracesItems0 DenomTrace contains the base denomination for ICS20 fungible tokens and the
// source tracing information path.
swagger:model DenomTracesOKBodyDenomTracesItems0
*/
type DenomTracesOKBodyDenomTracesItems0 struct {

	// base denomination of the relayed fungible token.
	BaseDenom string `json:"base_denom,omitempty"`

	// path defines the chain of port/channel identifiers used for tracing the
	// source of the fungible token.
	Path string `json:"path,omitempty"`
}

// Validate validates this denom traces o k body denom traces items0
func (o *DenomTracesOKBodyDenomTracesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this denom traces o k body denom traces items0 based on context it is used
func (o *DenomTracesOKBodyDenomTracesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DenomTracesOKBodyDenomTracesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomTracesOKBodyDenomTracesItems0) UnmarshalBinary(b []byte) error {
	var res DenomTracesOKBodyDenomTracesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DenomTracesOKBodyPagination pagination defines the pagination in the response.
swagger:model DenomTracesOKBodyPagination
*/
type DenomTracesOKBodyPagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this denom traces o k body pagination
func (o *DenomTracesOKBodyPagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this denom traces o k body pagination based on context it is used
func (o *DenomTracesOKBodyPagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DenomTracesOKBodyPagination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomTracesOKBodyPagination) UnmarshalBinary(b []byte) error {
	var res DenomTracesOKBodyPagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
