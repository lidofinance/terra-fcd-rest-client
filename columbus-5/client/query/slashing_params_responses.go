// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SlashingParamsReader is a Reader for the SlashingParams structure.
type SlashingParamsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SlashingParamsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSlashingParamsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSlashingParamsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSlashingParamsOK creates a SlashingParamsOK with default headers values
func NewSlashingParamsOK() *SlashingParamsOK {
	return &SlashingParamsOK{}
}

/* SlashingParamsOK describes a response with status code 200, with default header values.

A successful response.
*/
type SlashingParamsOK struct {
	Payload *SlashingParamsOKBody
}

func (o *SlashingParamsOK) Error() string {
	return fmt.Sprintf("[GET /cosmos/slashing/v1beta1/params][%d] slashingParamsOK  %+v", 200, o.Payload)
}
func (o *SlashingParamsOK) GetPayload() *SlashingParamsOKBody {
	return o.Payload
}

func (o *SlashingParamsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SlashingParamsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSlashingParamsDefault creates a SlashingParamsDefault with default headers values
func NewSlashingParamsDefault(code int) *SlashingParamsDefault {
	return &SlashingParamsDefault{
		_statusCode: code,
	}
}

/* SlashingParamsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type SlashingParamsDefault struct {
	_statusCode int

	Payload *SlashingParamsDefaultBody
}

// Code gets the status code for the slashing params default response
func (o *SlashingParamsDefault) Code() int {
	return o._statusCode
}

func (o *SlashingParamsDefault) Error() string {
	return fmt.Sprintf("[GET /cosmos/slashing/v1beta1/params][%d] SlashingParams default  %+v", o._statusCode, o.Payload)
}
func (o *SlashingParamsDefault) GetPayload() *SlashingParamsDefaultBody {
	return o.Payload
}

func (o *SlashingParamsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SlashingParamsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SlashingParamsDefaultBody slashing params default body
swagger:model SlashingParamsDefaultBody
*/
type SlashingParamsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*SlashingParamsDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this slashing params default body
func (o *SlashingParamsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SlashingParamsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SlashingParams default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SlashingParams default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this slashing params default body based on the context it is used
func (o *SlashingParamsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SlashingParamsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SlashingParams default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SlashingParams default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SlashingParamsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlashingParamsDefaultBody) UnmarshalBinary(b []byte) error {
	var res SlashingParamsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SlashingParamsDefaultBodyDetailsItems0 slashing params default body details items0
swagger:model SlashingParamsDefaultBodyDetailsItems0
*/
type SlashingParamsDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this slashing params default body details items0
func (o *SlashingParamsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this slashing params default body details items0 based on context it is used
func (o *SlashingParamsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SlashingParamsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlashingParamsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res SlashingParamsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SlashingParamsOKBody QueryParamsResponse is the response type for the Query/Params RPC method
swagger:model SlashingParamsOKBody
*/
type SlashingParamsOKBody struct {

	// params
	Params *SlashingParamsOKBodyParams `json:"params,omitempty"`
}

// Validate validates this slashing params o k body
func (o *SlashingParamsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SlashingParamsOKBody) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slashingParamsOK" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slashingParamsOK" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this slashing params o k body based on the context it is used
func (o *SlashingParamsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SlashingParamsOKBody) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if o.Params != nil {
		if err := o.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slashingParamsOK" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slashingParamsOK" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SlashingParamsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlashingParamsOKBody) UnmarshalBinary(b []byte) error {
	var res SlashingParamsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SlashingParamsOKBodyParams Params represents the parameters used for by the slashing module.
swagger:model SlashingParamsOKBodyParams
*/
type SlashingParamsOKBodyParams struct {

	// downtime jail duration
	DowntimeJailDuration string `json:"downtime_jail_duration,omitempty"`

	// min signed per window
	MinSignedPerWindow string `json:"min_signed_per_window,omitempty"`

	// signed blocks window
	SignedBlocksWindow string `json:"signed_blocks_window,omitempty"`

	// slash fraction double sign
	SlashFractionDoubleSign string `json:"slash_fraction_double_sign,omitempty"`

	// slash fraction downtime
	SlashFractionDowntime string `json:"slash_fraction_downtime,omitempty"`
}

// Validate validates this slashing params o k body params
func (o *SlashingParamsOKBodyParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this slashing params o k body params based on context it is used
func (o *SlashingParamsOKBodyParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SlashingParamsOKBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SlashingParamsOKBodyParams) UnmarshalBinary(b []byte) error {
	var res SlashingParamsOKBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
