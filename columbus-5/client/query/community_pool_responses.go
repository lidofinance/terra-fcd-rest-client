// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CommunityPoolReader is a Reader for the CommunityPool structure.
type CommunityPoolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommunityPoolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCommunityPoolOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCommunityPoolDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCommunityPoolOK creates a CommunityPoolOK with default headers values
func NewCommunityPoolOK() *CommunityPoolOK {
	return &CommunityPoolOK{}
}

/* CommunityPoolOK describes a response with status code 200, with default header values.

A successful response.
*/
type CommunityPoolOK struct {
	Payload *CommunityPoolOKBody
}

func (o *CommunityPoolOK) Error() string {
	return fmt.Sprintf("[GET /cosmos/distribution/v1beta1/community_pool][%d] communityPoolOK  %+v", 200, o.Payload)
}
func (o *CommunityPoolOK) GetPayload() *CommunityPoolOKBody {
	return o.Payload
}

func (o *CommunityPoolOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CommunityPoolOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommunityPoolDefault creates a CommunityPoolDefault with default headers values
func NewCommunityPoolDefault(code int) *CommunityPoolDefault {
	return &CommunityPoolDefault{
		_statusCode: code,
	}
}

/* CommunityPoolDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type CommunityPoolDefault struct {
	_statusCode int

	Payload *CommunityPoolDefaultBody
}

// Code gets the status code for the community pool default response
func (o *CommunityPoolDefault) Code() int {
	return o._statusCode
}

func (o *CommunityPoolDefault) Error() string {
	return fmt.Sprintf("[GET /cosmos/distribution/v1beta1/community_pool][%d] CommunityPool default  %+v", o._statusCode, o.Payload)
}
func (o *CommunityPoolDefault) GetPayload() *CommunityPoolDefaultBody {
	return o.Payload
}

func (o *CommunityPoolDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CommunityPoolDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CommunityPoolDefaultBody community pool default body
swagger:model CommunityPoolDefaultBody
*/
type CommunityPoolDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*CommunityPoolDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this community pool default body
func (o *CommunityPoolDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommunityPoolDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CommunityPool default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CommunityPool default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this community pool default body based on the context it is used
func (o *CommunityPoolDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommunityPoolDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("CommunityPool default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("CommunityPool default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CommunityPoolDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommunityPoolDefaultBody) UnmarshalBinary(b []byte) error {
	var res CommunityPoolDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CommunityPoolDefaultBodyDetailsItems0 community pool default body details items0
swagger:model CommunityPoolDefaultBodyDetailsItems0
*/
type CommunityPoolDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this community pool default body details items0
func (o *CommunityPoolDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this community pool default body details items0 based on context it is used
func (o *CommunityPoolDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommunityPoolDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommunityPoolDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CommunityPoolDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CommunityPoolOKBody QueryCommunityPoolResponse is the response type for the Query/CommunityPool
// RPC method.
swagger:model CommunityPoolOKBody
*/
type CommunityPoolOKBody struct {

	// pool defines community pool's coins.
	Pool []*CommunityPoolOKBodyPoolItems0 `json:"pool"`
}

// Validate validates this community pool o k body
func (o *CommunityPoolOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommunityPoolOKBody) validatePool(formats strfmt.Registry) error {
	if swag.IsZero(o.Pool) { // not required
		return nil
	}

	for i := 0; i < len(o.Pool); i++ {
		if swag.IsZero(o.Pool[i]) { // not required
			continue
		}

		if o.Pool[i] != nil {
			if err := o.Pool[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("communityPoolOK" + "." + "pool" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("communityPoolOK" + "." + "pool" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this community pool o k body based on the context it is used
func (o *CommunityPoolOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommunityPoolOKBody) contextValidatePool(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Pool); i++ {

		if o.Pool[i] != nil {
			if err := o.Pool[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("communityPoolOK" + "." + "pool" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("communityPoolOK" + "." + "pool" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CommunityPoolOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommunityPoolOKBody) UnmarshalBinary(b []byte) error {
	var res CommunityPoolOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CommunityPoolOKBodyPoolItems0 DecCoin defines a token with a denomination and a decimal amount.
//
// NOTE: The amount field is an Dec which implements the custom method
// signatures required by gogoproto.
swagger:model CommunityPoolOKBodyPoolItems0
*/
type CommunityPoolOKBodyPoolItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this community pool o k body pool items0
func (o *CommunityPoolOKBodyPoolItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this community pool o k body pool items0 based on context it is used
func (o *CommunityPoolOKBodyPoolItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CommunityPoolOKBodyPoolItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CommunityPoolOKBodyPoolItems0) UnmarshalBinary(b []byte) error {
	var res CommunityPoolOKBodyPoolItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
