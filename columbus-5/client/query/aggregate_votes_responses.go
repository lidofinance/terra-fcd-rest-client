// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AggregateVotesReader is a Reader for the AggregateVotes structure.
type AggregateVotesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AggregateVotesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAggregateVotesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAggregateVotesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAggregateVotesOK creates a AggregateVotesOK with default headers values
func NewAggregateVotesOK() *AggregateVotesOK {
	return &AggregateVotesOK{}
}

/* AggregateVotesOK describes a response with status code 200, with default header values.

A successful response.
*/
type AggregateVotesOK struct {
	Payload *AggregateVotesOKBody
}

func (o *AggregateVotesOK) Error() string {
	return fmt.Sprintf("[GET /terra/oracle/v1beta1/validators/aggregate_votes][%d] aggregateVotesOK  %+v", 200, o.Payload)
}
func (o *AggregateVotesOK) GetPayload() *AggregateVotesOKBody {
	return o.Payload
}

func (o *AggregateVotesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AggregateVotesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregateVotesDefault creates a AggregateVotesDefault with default headers values
func NewAggregateVotesDefault(code int) *AggregateVotesDefault {
	return &AggregateVotesDefault{
		_statusCode: code,
	}
}

/* AggregateVotesDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type AggregateVotesDefault struct {
	_statusCode int

	Payload *AggregateVotesDefaultBody
}

// Code gets the status code for the aggregate votes default response
func (o *AggregateVotesDefault) Code() int {
	return o._statusCode
}

func (o *AggregateVotesDefault) Error() string {
	return fmt.Sprintf("[GET /terra/oracle/v1beta1/validators/aggregate_votes][%d] AggregateVotes default  %+v", o._statusCode, o.Payload)
}
func (o *AggregateVotesDefault) GetPayload() *AggregateVotesDefaultBody {
	return o.Payload
}

func (o *AggregateVotesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AggregateVotesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AggregateVotesDefaultBody aggregate votes default body
swagger:model AggregateVotesDefaultBody
*/
type AggregateVotesDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*AggregateVotesDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this aggregate votes default body
func (o *AggregateVotesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AggregateVotesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AggregateVotes default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AggregateVotes default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this aggregate votes default body based on the context it is used
func (o *AggregateVotesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AggregateVotesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AggregateVotes default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AggregateVotes default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AggregateVotesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AggregateVotesDefaultBody) UnmarshalBinary(b []byte) error {
	var res AggregateVotesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AggregateVotesDefaultBodyDetailsItems0 aggregate votes default body details items0
swagger:model AggregateVotesDefaultBodyDetailsItems0
*/
type AggregateVotesDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this aggregate votes default body details items0
func (o *AggregateVotesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this aggregate votes default body details items0 based on context it is used
func (o *AggregateVotesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AggregateVotesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AggregateVotesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res AggregateVotesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AggregateVotesOKBody QueryAggregateVotesResponse is response type for the
// Query/AggregateVotes RPC method.
swagger:model AggregateVotesOKBody
*/
type AggregateVotesOKBody struct {

	// aggregate_votes defines all oracle aggregate votes submitted in the current vote period
	AggregateVotes []*AggregateVotesOKBodyAggregateVotesItems0 `json:"aggregate_votes"`
}

// Validate validates this aggregate votes o k body
func (o *AggregateVotesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAggregateVotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AggregateVotesOKBody) validateAggregateVotes(formats strfmt.Registry) error {
	if swag.IsZero(o.AggregateVotes) { // not required
		return nil
	}

	for i := 0; i < len(o.AggregateVotes); i++ {
		if swag.IsZero(o.AggregateVotes[i]) { // not required
			continue
		}

		if o.AggregateVotes[i] != nil {
			if err := o.AggregateVotes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggregateVotesOK" + "." + "aggregate_votes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aggregateVotesOK" + "." + "aggregate_votes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this aggregate votes o k body based on the context it is used
func (o *AggregateVotesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAggregateVotes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AggregateVotesOKBody) contextValidateAggregateVotes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AggregateVotes); i++ {

		if o.AggregateVotes[i] != nil {
			if err := o.AggregateVotes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggregateVotesOK" + "." + "aggregate_votes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("aggregateVotesOK" + "." + "aggregate_votes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AggregateVotesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AggregateVotesOKBody) UnmarshalBinary(b []byte) error {
	var res AggregateVotesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AggregateVotesOKBodyAggregateVotesItems0 MsgAggregateExchangeRateVote - struct for voting on
// the exchange rates of Luna denominated in various Terra assets.
swagger:model AggregateVotesOKBodyAggregateVotesItems0
*/
type AggregateVotesOKBodyAggregateVotesItems0 struct {

	// exchange rate tuples
	ExchangeRateTuples []*AggregateVotesOKBodyAggregateVotesItems0ExchangeRateTuplesItems0 `json:"exchange_rate_tuples"`

	// voter
	Voter string `json:"voter,omitempty"`
}

// Validate validates this aggregate votes o k body aggregate votes items0
func (o *AggregateVotesOKBodyAggregateVotesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExchangeRateTuples(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AggregateVotesOKBodyAggregateVotesItems0) validateExchangeRateTuples(formats strfmt.Registry) error {
	if swag.IsZero(o.ExchangeRateTuples) { // not required
		return nil
	}

	for i := 0; i < len(o.ExchangeRateTuples); i++ {
		if swag.IsZero(o.ExchangeRateTuples[i]) { // not required
			continue
		}

		if o.ExchangeRateTuples[i] != nil {
			if err := o.ExchangeRateTuples[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exchange_rate_tuples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exchange_rate_tuples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this aggregate votes o k body aggregate votes items0 based on the context it is used
func (o *AggregateVotesOKBodyAggregateVotesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateExchangeRateTuples(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AggregateVotesOKBodyAggregateVotesItems0) contextValidateExchangeRateTuples(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ExchangeRateTuples); i++ {

		if o.ExchangeRateTuples[i] != nil {
			if err := o.ExchangeRateTuples[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exchange_rate_tuples" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exchange_rate_tuples" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AggregateVotesOKBodyAggregateVotesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AggregateVotesOKBodyAggregateVotesItems0) UnmarshalBinary(b []byte) error {
	var res AggregateVotesOKBodyAggregateVotesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AggregateVotesOKBodyAggregateVotesItems0ExchangeRateTuplesItems0 ExchangeRateTuple - struct to store interpreted exchange rates data to store
swagger:model AggregateVotesOKBodyAggregateVotesItems0ExchangeRateTuplesItems0
*/
type AggregateVotesOKBodyAggregateVotesItems0ExchangeRateTuplesItems0 struct {

	// denom
	Denom string `json:"denom,omitempty"`

	// exchange rate
	ExchangeRate string `json:"exchange_rate,omitempty"`
}

// Validate validates this aggregate votes o k body aggregate votes items0 exchange rate tuples items0
func (o *AggregateVotesOKBodyAggregateVotesItems0ExchangeRateTuplesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this aggregate votes o k body aggregate votes items0 exchange rate tuples items0 based on context it is used
func (o *AggregateVotesOKBodyAggregateVotesItems0ExchangeRateTuplesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AggregateVotesOKBodyAggregateVotesItems0ExchangeRateTuplesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AggregateVotesOKBodyAggregateVotesItems0ExchangeRateTuplesItems0) UnmarshalBinary(b []byte) error {
	var res AggregateVotesOKBodyAggregateVotesItems0ExchangeRateTuplesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
