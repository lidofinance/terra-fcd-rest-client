// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TreasuryParamsReader is a Reader for the TreasuryParams structure.
type TreasuryParamsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TreasuryParamsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTreasuryParamsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewTreasuryParamsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewTreasuryParamsOK creates a TreasuryParamsOK with default headers values
func NewTreasuryParamsOK() *TreasuryParamsOK {
	return &TreasuryParamsOK{}
}

/* TreasuryParamsOK describes a response with status code 200, with default header values.

A successful response.
*/
type TreasuryParamsOK struct {
	Payload *TreasuryParamsOKBody
}

func (o *TreasuryParamsOK) Error() string {
	return fmt.Sprintf("[GET /terra/treasury/v1beta1/params][%d] treasuryParamsOK  %+v", 200, o.Payload)
}
func (o *TreasuryParamsOK) GetPayload() *TreasuryParamsOKBody {
	return o.Payload
}

func (o *TreasuryParamsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TreasuryParamsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTreasuryParamsDefault creates a TreasuryParamsDefault with default headers values
func NewTreasuryParamsDefault(code int) *TreasuryParamsDefault {
	return &TreasuryParamsDefault{
		_statusCode: code,
	}
}

/* TreasuryParamsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type TreasuryParamsDefault struct {
	_statusCode int

	Payload *TreasuryParamsDefaultBody
}

// Code gets the status code for the treasury params default response
func (o *TreasuryParamsDefault) Code() int {
	return o._statusCode
}

func (o *TreasuryParamsDefault) Error() string {
	return fmt.Sprintf("[GET /terra/treasury/v1beta1/params][%d] TreasuryParams default  %+v", o._statusCode, o.Payload)
}
func (o *TreasuryParamsDefault) GetPayload() *TreasuryParamsDefaultBody {
	return o.Payload
}

func (o *TreasuryParamsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TreasuryParamsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*TreasuryParamsDefaultBody treasury params default body
swagger:model TreasuryParamsDefaultBody
*/
type TreasuryParamsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*TreasuryParamsDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this treasury params default body
func (o *TreasuryParamsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TreasuryParamsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TreasuryParams default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TreasuryParams default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this treasury params default body based on the context it is used
func (o *TreasuryParamsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TreasuryParamsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TreasuryParams default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TreasuryParams default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *TreasuryParamsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TreasuryParamsDefaultBody) UnmarshalBinary(b []byte) error {
	var res TreasuryParamsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*TreasuryParamsDefaultBodyDetailsItems0 treasury params default body details items0
swagger:model TreasuryParamsDefaultBodyDetailsItems0
*/
type TreasuryParamsDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this treasury params default body details items0
func (o *TreasuryParamsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this treasury params default body details items0 based on context it is used
func (o *TreasuryParamsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TreasuryParamsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TreasuryParamsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res TreasuryParamsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*TreasuryParamsOKBody QueryParamsResponse is the response type for the Query/Params RPC method.
swagger:model TreasuryParamsOKBody
*/
type TreasuryParamsOKBody struct {

	// params
	Params *TreasuryParamsOKBodyParams `json:"params,omitempty"`
}

// Validate validates this treasury params o k body
func (o *TreasuryParamsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TreasuryParamsOKBody) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treasuryParamsOK" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treasuryParamsOK" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this treasury params o k body based on the context it is used
func (o *TreasuryParamsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TreasuryParamsOKBody) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if o.Params != nil {
		if err := o.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treasuryParamsOK" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treasuryParamsOK" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *TreasuryParamsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TreasuryParamsOKBody) UnmarshalBinary(b []byte) error {
	var res TreasuryParamsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*TreasuryParamsOKBodyParams params defines the parameters of the module.
swagger:model TreasuryParamsOKBodyParams
*/
type TreasuryParamsOKBodyParams struct {

	// mining increment
	MiningIncrement string `json:"mining_increment,omitempty"`

	// reward policy
	RewardPolicy *TreasuryParamsOKBodyParamsRewardPolicy `json:"reward_policy,omitempty"`

	// seigniorage burden target
	SeigniorageBurdenTarget string `json:"seigniorage_burden_target,omitempty"`

	// tax policy
	TaxPolicy *TreasuryParamsOKBodyParamsTaxPolicy `json:"tax_policy,omitempty"`

	// window long
	WindowLong string `json:"window_long,omitempty"`

	// window probation
	WindowProbation string `json:"window_probation,omitempty"`

	// window short
	WindowShort string `json:"window_short,omitempty"`
}

// Validate validates this treasury params o k body params
func (o *TreasuryParamsOKBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRewardPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTaxPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TreasuryParamsOKBodyParams) validateRewardPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.RewardPolicy) { // not required
		return nil
	}

	if o.RewardPolicy != nil {
		if err := o.RewardPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treasuryParamsOK" + "." + "params" + "." + "reward_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treasuryParamsOK" + "." + "params" + "." + "reward_policy")
			}
			return err
		}
	}

	return nil
}

func (o *TreasuryParamsOKBodyParams) validateTaxPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.TaxPolicy) { // not required
		return nil
	}

	if o.TaxPolicy != nil {
		if err := o.TaxPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treasuryParamsOK" + "." + "params" + "." + "tax_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treasuryParamsOK" + "." + "params" + "." + "tax_policy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this treasury params o k body params based on the context it is used
func (o *TreasuryParamsOKBodyParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRewardPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTaxPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TreasuryParamsOKBodyParams) contextValidateRewardPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.RewardPolicy != nil {
		if err := o.RewardPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treasuryParamsOK" + "." + "params" + "." + "reward_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treasuryParamsOK" + "." + "params" + "." + "reward_policy")
			}
			return err
		}
	}

	return nil
}

func (o *TreasuryParamsOKBodyParams) contextValidateTaxPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.TaxPolicy != nil {
		if err := o.TaxPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treasuryParamsOK" + "." + "params" + "." + "tax_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treasuryParamsOK" + "." + "params" + "." + "tax_policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *TreasuryParamsOKBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TreasuryParamsOKBodyParams) UnmarshalBinary(b []byte) error {
	var res TreasuryParamsOKBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*TreasuryParamsOKBodyParamsRewardPolicy PolicyConstraints - defines policy constraints can be applied in tax & reward policies
swagger:model TreasuryParamsOKBodyParamsRewardPolicy
*/
type TreasuryParamsOKBodyParamsRewardPolicy struct {

	// cap
	Cap *TreasuryParamsOKBodyParamsRewardPolicyCap `json:"cap,omitempty"`

	// change rate max
	ChangeRateMax string `json:"change_rate_max,omitempty"`

	// rate max
	RateMax string `json:"rate_max,omitempty"`

	// rate min
	RateMin string `json:"rate_min,omitempty"`
}

// Validate validates this treasury params o k body params reward policy
func (o *TreasuryParamsOKBodyParamsRewardPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TreasuryParamsOKBodyParamsRewardPolicy) validateCap(formats strfmt.Registry) error {
	if swag.IsZero(o.Cap) { // not required
		return nil
	}

	if o.Cap != nil {
		if err := o.Cap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treasuryParamsOK" + "." + "params" + "." + "reward_policy" + "." + "cap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treasuryParamsOK" + "." + "params" + "." + "reward_policy" + "." + "cap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this treasury params o k body params reward policy based on the context it is used
func (o *TreasuryParamsOKBodyParamsRewardPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TreasuryParamsOKBodyParamsRewardPolicy) contextValidateCap(ctx context.Context, formats strfmt.Registry) error {

	if o.Cap != nil {
		if err := o.Cap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treasuryParamsOK" + "." + "params" + "." + "reward_policy" + "." + "cap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treasuryParamsOK" + "." + "params" + "." + "reward_policy" + "." + "cap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *TreasuryParamsOKBodyParamsRewardPolicy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TreasuryParamsOKBodyParamsRewardPolicy) UnmarshalBinary(b []byte) error {
	var res TreasuryParamsOKBodyParamsRewardPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*TreasuryParamsOKBodyParamsRewardPolicyCap Coin defines a token with a denomination and an amount.
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
swagger:model TreasuryParamsOKBodyParamsRewardPolicyCap
*/
type TreasuryParamsOKBodyParamsRewardPolicyCap struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this treasury params o k body params reward policy cap
func (o *TreasuryParamsOKBodyParamsRewardPolicyCap) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this treasury params o k body params reward policy cap based on context it is used
func (o *TreasuryParamsOKBodyParamsRewardPolicyCap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TreasuryParamsOKBodyParamsRewardPolicyCap) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TreasuryParamsOKBodyParamsRewardPolicyCap) UnmarshalBinary(b []byte) error {
	var res TreasuryParamsOKBodyParamsRewardPolicyCap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*TreasuryParamsOKBodyParamsTaxPolicy PolicyConstraints - defines policy constraints can be applied in tax & reward policies
swagger:model TreasuryParamsOKBodyParamsTaxPolicy
*/
type TreasuryParamsOKBodyParamsTaxPolicy struct {

	// cap
	Cap *TreasuryParamsOKBodyParamsTaxPolicyCap `json:"cap,omitempty"`

	// change rate max
	ChangeRateMax string `json:"change_rate_max,omitempty"`

	// rate max
	RateMax string `json:"rate_max,omitempty"`

	// rate min
	RateMin string `json:"rate_min,omitempty"`
}

// Validate validates this treasury params o k body params tax policy
func (o *TreasuryParamsOKBodyParamsTaxPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TreasuryParamsOKBodyParamsTaxPolicy) validateCap(formats strfmt.Registry) error {
	if swag.IsZero(o.Cap) { // not required
		return nil
	}

	if o.Cap != nil {
		if err := o.Cap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treasuryParamsOK" + "." + "params" + "." + "tax_policy" + "." + "cap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treasuryParamsOK" + "." + "params" + "." + "tax_policy" + "." + "cap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this treasury params o k body params tax policy based on the context it is used
func (o *TreasuryParamsOKBodyParamsTaxPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TreasuryParamsOKBodyParamsTaxPolicy) contextValidateCap(ctx context.Context, formats strfmt.Registry) error {

	if o.Cap != nil {
		if err := o.Cap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("treasuryParamsOK" + "." + "params" + "." + "tax_policy" + "." + "cap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("treasuryParamsOK" + "." + "params" + "." + "tax_policy" + "." + "cap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *TreasuryParamsOKBodyParamsTaxPolicy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TreasuryParamsOKBodyParamsTaxPolicy) UnmarshalBinary(b []byte) error {
	var res TreasuryParamsOKBodyParamsTaxPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*TreasuryParamsOKBodyParamsTaxPolicyCap Coin defines a token with a denomination and an amount.
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
swagger:model TreasuryParamsOKBodyParamsTaxPolicyCap
*/
type TreasuryParamsOKBodyParamsTaxPolicyCap struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this treasury params o k body params tax policy cap
func (o *TreasuryParamsOKBodyParamsTaxPolicyCap) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this treasury params o k body params tax policy cap based on context it is used
func (o *TreasuryParamsOKBodyParamsTaxPolicyCap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TreasuryParamsOKBodyParamsTaxPolicyCap) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TreasuryParamsOKBodyParamsTaxPolicyCap) UnmarshalBinary(b []byte) error {
	var res TreasuryParamsOKBodyParamsTaxPolicyCap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
