// Code generated by go-swagger; DO NOT EDIT.

package oracle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostOracleVotersValidatorAggregateVoteReader is a Reader for the PostOracleVotersValidatorAggregateVote structure.
type PostOracleVotersValidatorAggregateVoteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostOracleVotersValidatorAggregateVoteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostOracleVotersValidatorAggregateVoteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostOracleVotersValidatorAggregateVoteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostOracleVotersValidatorAggregateVoteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostOracleVotersValidatorAggregateVoteOK creates a PostOracleVotersValidatorAggregateVoteOK with default headers values
func NewPostOracleVotersValidatorAggregateVoteOK() *PostOracleVotersValidatorAggregateVoteOK {
	return &PostOracleVotersValidatorAggregateVoteOK{}
}

/* PostOracleVotersValidatorAggregateVoteOK describes a response with status code 200, with default header values.

OK
*/
type PostOracleVotersValidatorAggregateVoteOK struct {
	Payload *PostOracleVotersValidatorAggregateVoteOKBody
}

func (o *PostOracleVotersValidatorAggregateVoteOK) Error() string {
	return fmt.Sprintf("[POST /oracle/voters/{validator}/aggregate_vote][%d] postOracleVotersValidatorAggregateVoteOK  %+v", 200, o.Payload)
}
func (o *PostOracleVotersValidatorAggregateVoteOK) GetPayload() *PostOracleVotersValidatorAggregateVoteOKBody {
	return o.Payload
}

func (o *PostOracleVotersValidatorAggregateVoteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostOracleVotersValidatorAggregateVoteOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOracleVotersValidatorAggregateVoteBadRequest creates a PostOracleVotersValidatorAggregateVoteBadRequest with default headers values
func NewPostOracleVotersValidatorAggregateVoteBadRequest() *PostOracleVotersValidatorAggregateVoteBadRequest {
	return &PostOracleVotersValidatorAggregateVoteBadRequest{}
}

/* PostOracleVotersValidatorAggregateVoteBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PostOracleVotersValidatorAggregateVoteBadRequest struct {
}

func (o *PostOracleVotersValidatorAggregateVoteBadRequest) Error() string {
	return fmt.Sprintf("[POST /oracle/voters/{validator}/aggregate_vote][%d] postOracleVotersValidatorAggregateVoteBadRequest ", 400)
}

func (o *PostOracleVotersValidatorAggregateVoteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostOracleVotersValidatorAggregateVoteInternalServerError creates a PostOracleVotersValidatorAggregateVoteInternalServerError with default headers values
func NewPostOracleVotersValidatorAggregateVoteInternalServerError() *PostOracleVotersValidatorAggregateVoteInternalServerError {
	return &PostOracleVotersValidatorAggregateVoteInternalServerError{}
}

/* PostOracleVotersValidatorAggregateVoteInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostOracleVotersValidatorAggregateVoteInternalServerError struct {
}

func (o *PostOracleVotersValidatorAggregateVoteInternalServerError) Error() string {
	return fmt.Sprintf("[POST /oracle/voters/{validator}/aggregate_vote][%d] postOracleVotersValidatorAggregateVoteInternalServerError ", 500)
}

func (o *PostOracleVotersValidatorAggregateVoteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostOracleVotersValidatorAggregateVoteBody post oracle voters validator aggregate vote body
swagger:model PostOracleVotersValidatorAggregateVoteBody
*/
type PostOracleVotersValidatorAggregateVoteBody struct {

	// base req
	BaseReq *PostOracleVotersValidatorAggregateVoteParamsBodyBaseReq `json:"base_req,omitempty"`

	// proof exchange rates of Luna in denom currency were used to make aggregate prevote hash
	// Example: 1000.0ukrw,1.2uusd,0.99usdr
	ExchangeRates string `json:"exchange_rates,omitempty"`

	// proof salt was used to make prevote hash; initial prevote does not require this field
	// Example: abcd
	Salt string `json:"salt,omitempty"`
}

// Validate validates this post oracle voters validator aggregate vote body
func (o *PostOracleVotersValidatorAggregateVoteBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOracleVotersValidatorAggregateVoteBody) validateBaseReq(formats strfmt.Registry) error {
	if swag.IsZero(o.BaseReq) { // not required
		return nil
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Aggregate Vote request body" + "." + "base_req")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Aggregate Vote request body" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post oracle voters validator aggregate vote body based on the context it is used
func (o *PostOracleVotersValidatorAggregateVoteBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBaseReq(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOracleVotersValidatorAggregateVoteBody) contextValidateBaseReq(ctx context.Context, formats strfmt.Registry) error {

	if o.BaseReq != nil {
		if err := o.BaseReq.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Aggregate Vote request body" + "." + "base_req")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Aggregate Vote request body" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteBody) UnmarshalBinary(b []byte) error {
	var res PostOracleVotersValidatorAggregateVoteBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostOracleVotersValidatorAggregateVoteOKBody post oracle voters validator aggregate vote o k body
swagger:model PostOracleVotersValidatorAggregateVoteOKBody
*/
type PostOracleVotersValidatorAggregateVoteOKBody struct {

	// fee
	Fee *PostOracleVotersValidatorAggregateVoteOKBodyFee `json:"fee,omitempty"`

	// memo
	Memo string `json:"memo,omitempty"`

	// msg
	Msg []string `json:"msg"`

	// signature
	Signature *PostOracleVotersValidatorAggregateVoteOKBodySignature `json:"signature,omitempty"`
}

// Validate validates this post oracle voters validator aggregate vote o k body
func (o *PostOracleVotersValidatorAggregateVoteOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOracleVotersValidatorAggregateVoteOKBody) validateFee(formats strfmt.Registry) error {
	if swag.IsZero(o.Fee) { // not required
		return nil
	}

	if o.Fee != nil {
		if err := o.Fee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *PostOracleVotersValidatorAggregateVoteOKBody) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(o.Signature) { // not required
		return nil
	}

	if o.Signature != nil {
		if err := o.Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post oracle voters validator aggregate vote o k body based on the context it is used
func (o *PostOracleVotersValidatorAggregateVoteOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOracleVotersValidatorAggregateVoteOKBody) contextValidateFee(ctx context.Context, formats strfmt.Registry) error {

	if o.Fee != nil {
		if err := o.Fee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *PostOracleVotersValidatorAggregateVoteOKBody) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if o.Signature != nil {
		if err := o.Signature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteOKBody) UnmarshalBinary(b []byte) error {
	var res PostOracleVotersValidatorAggregateVoteOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostOracleVotersValidatorAggregateVoteOKBodyFee post oracle voters validator aggregate vote o k body fee
swagger:model PostOracleVotersValidatorAggregateVoteOKBodyFee
*/
type PostOracleVotersValidatorAggregateVoteOKBodyFee struct {

	// amount
	Amount []*PostOracleVotersValidatorAggregateVoteOKBodyFeeAmountItems0 `json:"amount"`

	// gas
	Gas string `json:"gas,omitempty"`
}

// Validate validates this post oracle voters validator aggregate vote o k body fee
func (o *PostOracleVotersValidatorAggregateVoteOKBodyFee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOracleVotersValidatorAggregateVoteOKBodyFee) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	for i := 0; i < len(o.Amount); i++ {
		if swag.IsZero(o.Amount[i]) { // not required
			continue
		}

		if o.Amount[i] != nil {
			if err := o.Amount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post oracle voters validator aggregate vote o k body fee based on the context it is used
func (o *PostOracleVotersValidatorAggregateVoteOKBodyFee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOracleVotersValidatorAggregateVoteOKBodyFee) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Amount); i++ {

		if o.Amount[i] != nil {
			if err := o.Amount[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteOKBodyFee) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteOKBodyFee) UnmarshalBinary(b []byte) error {
	var res PostOracleVotersValidatorAggregateVoteOKBodyFee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostOracleVotersValidatorAggregateVoteOKBodyFeeAmountItems0 post oracle voters validator aggregate vote o k body fee amount items0
swagger:model PostOracleVotersValidatorAggregateVoteOKBodyFeeAmountItems0
*/
type PostOracleVotersValidatorAggregateVoteOKBodyFeeAmountItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this post oracle voters validator aggregate vote o k body fee amount items0
func (o *PostOracleVotersValidatorAggregateVoteOKBodyFeeAmountItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post oracle voters validator aggregate vote o k body fee amount items0 based on context it is used
func (o *PostOracleVotersValidatorAggregateVoteOKBodyFeeAmountItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteOKBodyFeeAmountItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteOKBodyFeeAmountItems0) UnmarshalBinary(b []byte) error {
	var res PostOracleVotersValidatorAggregateVoteOKBodyFeeAmountItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostOracleVotersValidatorAggregateVoteOKBodySignature post oracle voters validator aggregate vote o k body signature
swagger:model PostOracleVotersValidatorAggregateVoteOKBodySignature
*/
type PostOracleVotersValidatorAggregateVoteOKBodySignature struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// pub key
	PubKey *PostOracleVotersValidatorAggregateVoteOKBodySignaturePubKey `json:"pub_key,omitempty"`

	// sequence
	// Example: 0
	Sequence string `json:"sequence,omitempty"`

	// signature
	// Example: MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
	Signature string `json:"signature,omitempty"`
}

// Validate validates this post oracle voters validator aggregate vote o k body signature
func (o *PostOracleVotersValidatorAggregateVoteOKBodySignature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePubKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOracleVotersValidatorAggregateVoteOKBodySignature) validatePubKey(formats strfmt.Registry) error {
	if swag.IsZero(o.PubKey) { // not required
		return nil
	}

	if o.PubKey != nil {
		if err := o.PubKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post oracle voters validator aggregate vote o k body signature based on the context it is used
func (o *PostOracleVotersValidatorAggregateVoteOKBodySignature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePubKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOracleVotersValidatorAggregateVoteOKBodySignature) contextValidatePubKey(ctx context.Context, formats strfmt.Registry) error {

	if o.PubKey != nil {
		if err := o.PubKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postOracleVotersValidatorAggregateVoteOK" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteOKBodySignature) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteOKBodySignature) UnmarshalBinary(b []byte) error {
	var res PostOracleVotersValidatorAggregateVoteOKBodySignature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostOracleVotersValidatorAggregateVoteOKBodySignaturePubKey post oracle voters validator aggregate vote o k body signature pub key
swagger:model PostOracleVotersValidatorAggregateVoteOKBodySignaturePubKey
*/
type PostOracleVotersValidatorAggregateVoteOKBodySignaturePubKey struct {

	// type
	// Example: tendermint/PubKeySecp256k1
	Type string `json:"type,omitempty"`

	// value
	// Example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
	Value string `json:"value,omitempty"`
}

// Validate validates this post oracle voters validator aggregate vote o k body signature pub key
func (o *PostOracleVotersValidatorAggregateVoteOKBodySignaturePubKey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post oracle voters validator aggregate vote o k body signature pub key based on context it is used
func (o *PostOracleVotersValidatorAggregateVoteOKBodySignaturePubKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteOKBodySignaturePubKey) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteOKBodySignaturePubKey) UnmarshalBinary(b []byte) error {
	var res PostOracleVotersValidatorAggregateVoteOKBodySignaturePubKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostOracleVotersValidatorAggregateVoteParamsBodyBaseReq post oracle voters validator aggregate vote params body base req
swagger:model PostOracleVotersValidatorAggregateVoteParamsBodyBaseReq
*/
type PostOracleVotersValidatorAggregateVoteParamsBodyBaseReq struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// chain id
	// Example: Columbus-5
	ChainID string `json:"chain_id,omitempty"`

	// fees
	Fees []*PostOracleVotersValidatorAggregateVoteParamsBodyBaseReqFeesItems0 `json:"fees"`

	// Sender address or Keybase name to generate a transaction
	// Example: terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv
	From string `json:"from,omitempty"`

	// gas
	// Example: 200000
	Gas string `json:"gas,omitempty"`

	// gas adjustment
	// Example: 1.2
	GasAdjustment string `json:"gas_adjustment,omitempty"`

	// memo
	// Example: Sent via Terra Station 🚀
	Memo string `json:"memo,omitempty"`

	// sequence
	// Example: 1
	Sequence string `json:"sequence,omitempty"`

	// Estimate gas for a transaction (cannot be used in conjunction with generate_only)
	// Example: false
	Simulate bool `json:"simulate,omitempty"`
}

// Validate validates this post oracle voters validator aggregate vote params body base req
func (o *PostOracleVotersValidatorAggregateVoteParamsBodyBaseReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFees(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOracleVotersValidatorAggregateVoteParamsBodyBaseReq) validateFees(formats strfmt.Registry) error {
	if swag.IsZero(o.Fees) { // not required
		return nil
	}

	for i := 0; i < len(o.Fees); i++ {
		if swag.IsZero(o.Fees[i]) { // not required
			continue
		}

		if o.Fees[i] != nil {
			if err := o.Fees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Aggregate Vote request body" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Aggregate Vote request body" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post oracle voters validator aggregate vote params body base req based on the context it is used
func (o *PostOracleVotersValidatorAggregateVoteParamsBodyBaseReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostOracleVotersValidatorAggregateVoteParamsBodyBaseReq) contextValidateFees(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Fees); i++ {

		if o.Fees[i] != nil {
			if err := o.Fees[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Aggregate Vote request body" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Aggregate Vote request body" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteParamsBodyBaseReq) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteParamsBodyBaseReq) UnmarshalBinary(b []byte) error {
	var res PostOracleVotersValidatorAggregateVoteParamsBodyBaseReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostOracleVotersValidatorAggregateVoteParamsBodyBaseReqFeesItems0 post oracle voters validator aggregate vote params body base req fees items0
swagger:model PostOracleVotersValidatorAggregateVoteParamsBodyBaseReqFeesItems0
*/
type PostOracleVotersValidatorAggregateVoteParamsBodyBaseReqFeesItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this post oracle voters validator aggregate vote params body base req fees items0
func (o *PostOracleVotersValidatorAggregateVoteParamsBodyBaseReqFeesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post oracle voters validator aggregate vote params body base req fees items0 based on context it is used
func (o *PostOracleVotersValidatorAggregateVoteParamsBodyBaseReqFeesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteParamsBodyBaseReqFeesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostOracleVotersValidatorAggregateVoteParamsBodyBaseReqFeesItems0) UnmarshalBinary(b []byte) error {
	var res PostOracleVotersValidatorAggregateVoteParamsBodyBaseReqFeesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
