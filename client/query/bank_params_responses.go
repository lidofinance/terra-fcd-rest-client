// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BankParamsReader is a Reader for the BankParams structure.
type BankParamsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BankParamsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBankParamsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewBankParamsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewBankParamsOK creates a BankParamsOK with default headers values
func NewBankParamsOK() *BankParamsOK {
	return &BankParamsOK{}
}

/* BankParamsOK describes a response with status code 200, with default header values.

A successful response.
*/
type BankParamsOK struct {
	Payload *BankParamsOKBody
}

func (o *BankParamsOK) Error() string {
	return fmt.Sprintf("[GET /cosmos/bank/v1beta1/params][%d] bankParamsOK  %+v", 200, o.Payload)
}
func (o *BankParamsOK) GetPayload() *BankParamsOKBody {
	return o.Payload
}

func (o *BankParamsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(BankParamsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBankParamsDefault creates a BankParamsDefault with default headers values
func NewBankParamsDefault(code int) *BankParamsDefault {
	return &BankParamsDefault{
		_statusCode: code,
	}
}

/* BankParamsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type BankParamsDefault struct {
	_statusCode int

	Payload *BankParamsDefaultBody
}

// Code gets the status code for the bank params default response
func (o *BankParamsDefault) Code() int {
	return o._statusCode
}

func (o *BankParamsDefault) Error() string {
	return fmt.Sprintf("[GET /cosmos/bank/v1beta1/params][%d] BankParams default  %+v", o._statusCode, o.Payload)
}
func (o *BankParamsDefault) GetPayload() *BankParamsDefaultBody {
	return o.Payload
}

func (o *BankParamsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(BankParamsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*BankParamsDefaultBody bank params default body
swagger:model BankParamsDefaultBody
*/
type BankParamsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*BankParamsDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this bank params default body
func (o *BankParamsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BankParamsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BankParams default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("BankParams default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this bank params default body based on the context it is used
func (o *BankParamsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BankParamsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("BankParams default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("BankParams default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *BankParamsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BankParamsDefaultBody) UnmarshalBinary(b []byte) error {
	var res BankParamsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*BankParamsDefaultBodyDetailsItems0 bank params default body details items0
swagger:model BankParamsDefaultBodyDetailsItems0
*/
type BankParamsDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this bank params default body details items0
func (o *BankParamsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this bank params default body details items0 based on context it is used
func (o *BankParamsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *BankParamsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BankParamsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res BankParamsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*BankParamsOKBody QueryParamsResponse defines the response type for querying x/bank parameters.
swagger:model BankParamsOKBody
*/
type BankParamsOKBody struct {

	// params
	Params *BankParamsOKBodyParams `json:"params,omitempty"`
}

// Validate validates this bank params o k body
func (o *BankParamsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BankParamsOKBody) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bankParamsOK" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bankParamsOK" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bank params o k body based on the context it is used
func (o *BankParamsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BankParamsOKBody) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if o.Params != nil {
		if err := o.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bankParamsOK" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bankParamsOK" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *BankParamsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BankParamsOKBody) UnmarshalBinary(b []byte) error {
	var res BankParamsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*BankParamsOKBodyParams Params defines the parameters for the bank module.
swagger:model BankParamsOKBodyParams
*/
type BankParamsOKBodyParams struct {

	// default send enabled
	DefaultSendEnabled bool `json:"default_send_enabled,omitempty"`

	// send enabled
	SendEnabled []*BankParamsOKBodyParamsSendEnabledItems0 `json:"send_enabled"`
}

// Validate validates this bank params o k body params
func (o *BankParamsOKBodyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSendEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BankParamsOKBodyParams) validateSendEnabled(formats strfmt.Registry) error {
	if swag.IsZero(o.SendEnabled) { // not required
		return nil
	}

	for i := 0; i < len(o.SendEnabled); i++ {
		if swag.IsZero(o.SendEnabled[i]) { // not required
			continue
		}

		if o.SendEnabled[i] != nil {
			if err := o.SendEnabled[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bankParamsOK" + "." + "params" + "." + "send_enabled" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bankParamsOK" + "." + "params" + "." + "send_enabled" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this bank params o k body params based on the context it is used
func (o *BankParamsOKBodyParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSendEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BankParamsOKBodyParams) contextValidateSendEnabled(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.SendEnabled); i++ {

		if o.SendEnabled[i] != nil {
			if err := o.SendEnabled[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bankParamsOK" + "." + "params" + "." + "send_enabled" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bankParamsOK" + "." + "params" + "." + "send_enabled" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *BankParamsOKBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BankParamsOKBodyParams) UnmarshalBinary(b []byte) error {
	var res BankParamsOKBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*BankParamsOKBodyParamsSendEnabledItems0 SendEnabled maps coin denom to a send_enabled status (whether a denom is
// sendable).
swagger:model BankParamsOKBodyParamsSendEnabledItems0
*/
type BankParamsOKBodyParamsSendEnabledItems0 struct {

	// denom
	Denom string `json:"denom,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`
}

// Validate validates this bank params o k body params send enabled items0
func (o *BankParamsOKBodyParamsSendEnabledItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this bank params o k body params send enabled items0 based on context it is used
func (o *BankParamsOKBodyParamsSendEnabledItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *BankParamsOKBodyParamsSendEnabledItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BankParamsOKBodyParamsSendEnabledItems0) UnmarshalBinary(b []byte) error {
	var res BankParamsOKBodyParamsSendEnabledItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
