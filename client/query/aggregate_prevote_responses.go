// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AggregatePrevoteReader is a Reader for the AggregatePrevote structure.
type AggregatePrevoteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AggregatePrevoteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAggregatePrevoteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAggregatePrevoteDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAggregatePrevoteOK creates a AggregatePrevoteOK with default headers values
func NewAggregatePrevoteOK() *AggregatePrevoteOK {
	return &AggregatePrevoteOK{}
}

/* AggregatePrevoteOK describes a response with status code 200, with default header values.

A successful response.
*/
type AggregatePrevoteOK struct {
	Payload *AggregatePrevoteOKBody
}

func (o *AggregatePrevoteOK) Error() string {
	return fmt.Sprintf("[GET /terra/oracle/v1beta1/validators/{validator_addr}/aggregate_prevote][%d] aggregatePrevoteOK  %+v", 200, o.Payload)
}
func (o *AggregatePrevoteOK) GetPayload() *AggregatePrevoteOKBody {
	return o.Payload
}

func (o *AggregatePrevoteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AggregatePrevoteOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAggregatePrevoteDefault creates a AggregatePrevoteDefault with default headers values
func NewAggregatePrevoteDefault(code int) *AggregatePrevoteDefault {
	return &AggregatePrevoteDefault{
		_statusCode: code,
	}
}

/* AggregatePrevoteDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type AggregatePrevoteDefault struct {
	_statusCode int

	Payload *AggregatePrevoteDefaultBody
}

// Code gets the status code for the aggregate prevote default response
func (o *AggregatePrevoteDefault) Code() int {
	return o._statusCode
}

func (o *AggregatePrevoteDefault) Error() string {
	return fmt.Sprintf("[GET /terra/oracle/v1beta1/validators/{validator_addr}/aggregate_prevote][%d] AggregatePrevote default  %+v", o._statusCode, o.Payload)
}
func (o *AggregatePrevoteDefault) GetPayload() *AggregatePrevoteDefaultBody {
	return o.Payload
}

func (o *AggregatePrevoteDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AggregatePrevoteDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AggregatePrevoteDefaultBody aggregate prevote default body
swagger:model AggregatePrevoteDefaultBody
*/
type AggregatePrevoteDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*AggregatePrevoteDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this aggregate prevote default body
func (o *AggregatePrevoteDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AggregatePrevoteDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AggregatePrevote default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AggregatePrevote default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this aggregate prevote default body based on the context it is used
func (o *AggregatePrevoteDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AggregatePrevoteDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AggregatePrevote default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AggregatePrevote default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AggregatePrevoteDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AggregatePrevoteDefaultBody) UnmarshalBinary(b []byte) error {
	var res AggregatePrevoteDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AggregatePrevoteDefaultBodyDetailsItems0 aggregate prevote default body details items0
swagger:model AggregatePrevoteDefaultBodyDetailsItems0
*/
type AggregatePrevoteDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this aggregate prevote default body details items0
func (o *AggregatePrevoteDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this aggregate prevote default body details items0 based on context it is used
func (o *AggregatePrevoteDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AggregatePrevoteDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AggregatePrevoteDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res AggregatePrevoteDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AggregatePrevoteOKBody QueryAggregatePrevoteResponse is response type for the
// Query/AggregatePrevote RPC method.
swagger:model AggregatePrevoteOKBody
*/
type AggregatePrevoteOKBody struct {

	// aggregate prevote
	AggregatePrevote *AggregatePrevoteOKBodyAggregatePrevote `json:"aggregate_prevote,omitempty"`
}

// Validate validates this aggregate prevote o k body
func (o *AggregatePrevoteOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAggregatePrevote(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AggregatePrevoteOKBody) validateAggregatePrevote(formats strfmt.Registry) error {
	if swag.IsZero(o.AggregatePrevote) { // not required
		return nil
	}

	if o.AggregatePrevote != nil {
		if err := o.AggregatePrevote.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregatePrevoteOK" + "." + "aggregate_prevote")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aggregatePrevoteOK" + "." + "aggregate_prevote")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this aggregate prevote o k body based on the context it is used
func (o *AggregatePrevoteOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAggregatePrevote(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AggregatePrevoteOKBody) contextValidateAggregatePrevote(ctx context.Context, formats strfmt.Registry) error {

	if o.AggregatePrevote != nil {
		if err := o.AggregatePrevote.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregatePrevoteOK" + "." + "aggregate_prevote")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aggregatePrevoteOK" + "." + "aggregate_prevote")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AggregatePrevoteOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AggregatePrevoteOKBody) UnmarshalBinary(b []byte) error {
	var res AggregatePrevoteOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AggregatePrevoteOKBodyAggregatePrevote struct for aggregate prevoting on the ExchangeRateVote.
// The purpose of aggregate prevote is to hide vote exchange rates with hash
// which is formatted as hex string in SHA256("{salt}:{exchange rate}{denom},...,{exchange rate}{denom}:{voter}")
swagger:model AggregatePrevoteOKBodyAggregatePrevote
*/
type AggregatePrevoteOKBodyAggregatePrevote struct {

	// hash
	Hash string `json:"hash,omitempty"`

	// submit block
	SubmitBlock string `json:"submit_block,omitempty"`

	// voter
	Voter string `json:"voter,omitempty"`
}

// Validate validates this aggregate prevote o k body aggregate prevote
func (o *AggregatePrevoteOKBodyAggregatePrevote) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this aggregate prevote o k body aggregate prevote based on context it is used
func (o *AggregatePrevoteOKBodyAggregatePrevote) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AggregatePrevoteOKBodyAggregatePrevote) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AggregatePrevoteOKBodyAggregatePrevote) UnmarshalBinary(b []byte) error {
	var res AggregatePrevoteOKBodyAggregatePrevote
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
