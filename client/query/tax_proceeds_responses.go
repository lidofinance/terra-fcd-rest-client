// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TaxProceedsReader is a Reader for the TaxProceeds structure.
type TaxProceedsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TaxProceedsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTaxProceedsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewTaxProceedsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewTaxProceedsOK creates a TaxProceedsOK with default headers values
func NewTaxProceedsOK() *TaxProceedsOK {
	return &TaxProceedsOK{}
}

/* TaxProceedsOK describes a response with status code 200, with default header values.

A successful response.
*/
type TaxProceedsOK struct {
	Payload *TaxProceedsOKBody
}

func (o *TaxProceedsOK) Error() string {
	return fmt.Sprintf("[GET /terra/treasury/v1beta1/tax_proceeds][%d] taxProceedsOK  %+v", 200, o.Payload)
}
func (o *TaxProceedsOK) GetPayload() *TaxProceedsOKBody {
	return o.Payload
}

func (o *TaxProceedsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TaxProceedsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTaxProceedsDefault creates a TaxProceedsDefault with default headers values
func NewTaxProceedsDefault(code int) *TaxProceedsDefault {
	return &TaxProceedsDefault{
		_statusCode: code,
	}
}

/* TaxProceedsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type TaxProceedsDefault struct {
	_statusCode int

	Payload *TaxProceedsDefaultBody
}

// Code gets the status code for the tax proceeds default response
func (o *TaxProceedsDefault) Code() int {
	return o._statusCode
}

func (o *TaxProceedsDefault) Error() string {
	return fmt.Sprintf("[GET /terra/treasury/v1beta1/tax_proceeds][%d] TaxProceeds default  %+v", o._statusCode, o.Payload)
}
func (o *TaxProceedsDefault) GetPayload() *TaxProceedsDefaultBody {
	return o.Payload
}

func (o *TaxProceedsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TaxProceedsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*TaxProceedsDefaultBody tax proceeds default body
swagger:model TaxProceedsDefaultBody
*/
type TaxProceedsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*TaxProceedsDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this tax proceeds default body
func (o *TaxProceedsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TaxProceedsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TaxProceeds default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TaxProceeds default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tax proceeds default body based on the context it is used
func (o *TaxProceedsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TaxProceedsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TaxProceeds default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TaxProceeds default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *TaxProceedsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TaxProceedsDefaultBody) UnmarshalBinary(b []byte) error {
	var res TaxProceedsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*TaxProceedsDefaultBodyDetailsItems0 tax proceeds default body details items0
swagger:model TaxProceedsDefaultBodyDetailsItems0
*/
type TaxProceedsDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this tax proceeds default body details items0
func (o *TaxProceedsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this tax proceeds default body details items0 based on context it is used
func (o *TaxProceedsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TaxProceedsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TaxProceedsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res TaxProceedsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*TaxProceedsOKBody QueryTaxProceedsResponse is response type for the
// Query/TaxProceeds RPC method.
swagger:model TaxProceedsOKBody
*/
type TaxProceedsOKBody struct {

	// tax proceeds
	TaxProceeds []*TaxProceedsOKBodyTaxProceedsItems0 `json:"tax_proceeds"`
}

// Validate validates this tax proceeds o k body
func (o *TaxProceedsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTaxProceeds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TaxProceedsOKBody) validateTaxProceeds(formats strfmt.Registry) error {
	if swag.IsZero(o.TaxProceeds) { // not required
		return nil
	}

	for i := 0; i < len(o.TaxProceeds); i++ {
		if swag.IsZero(o.TaxProceeds[i]) { // not required
			continue
		}

		if o.TaxProceeds[i] != nil {
			if err := o.TaxProceeds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxProceedsOK" + "." + "tax_proceeds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taxProceedsOK" + "." + "tax_proceeds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tax proceeds o k body based on the context it is used
func (o *TaxProceedsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTaxProceeds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TaxProceedsOKBody) contextValidateTaxProceeds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.TaxProceeds); i++ {

		if o.TaxProceeds[i] != nil {
			if err := o.TaxProceeds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxProceedsOK" + "." + "tax_proceeds" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taxProceedsOK" + "." + "tax_proceeds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *TaxProceedsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TaxProceedsOKBody) UnmarshalBinary(b []byte) error {
	var res TaxProceedsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*TaxProceedsOKBodyTaxProceedsItems0 Coin defines a token with a denomination and an amount.
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
swagger:model TaxProceedsOKBodyTaxProceedsItems0
*/
type TaxProceedsOKBodyTaxProceedsItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this tax proceeds o k body tax proceeds items0
func (o *TaxProceedsOKBodyTaxProceedsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this tax proceeds o k body tax proceeds items0 based on context it is used
func (o *TaxProceedsOKBodyTaxProceedsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TaxProceedsOKBodyTaxProceedsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TaxProceedsOKBodyTaxProceedsItems0) UnmarshalBinary(b []byte) error {
	var res TaxProceedsOKBodyTaxProceedsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
