// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StakingDelegatorValidatorsReader is a Reader for the StakingDelegatorValidators structure.
type StakingDelegatorValidatorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StakingDelegatorValidatorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStakingDelegatorValidatorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewStakingDelegatorValidatorsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStakingDelegatorValidatorsOK creates a StakingDelegatorValidatorsOK with default headers values
func NewStakingDelegatorValidatorsOK() *StakingDelegatorValidatorsOK {
	return &StakingDelegatorValidatorsOK{}
}

/* StakingDelegatorValidatorsOK describes a response with status code 200, with default header values.

A successful response.
*/
type StakingDelegatorValidatorsOK struct {
	Payload *StakingDelegatorValidatorsOKBody
}

func (o *StakingDelegatorValidatorsOK) Error() string {
	return fmt.Sprintf("[GET /cosmos/staking/v1beta1/delegators/{delegator_addr}/validators][%d] stakingDelegatorValidatorsOK  %+v", 200, o.Payload)
}
func (o *StakingDelegatorValidatorsOK) GetPayload() *StakingDelegatorValidatorsOKBody {
	return o.Payload
}

func (o *StakingDelegatorValidatorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StakingDelegatorValidatorsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStakingDelegatorValidatorsDefault creates a StakingDelegatorValidatorsDefault with default headers values
func NewStakingDelegatorValidatorsDefault(code int) *StakingDelegatorValidatorsDefault {
	return &StakingDelegatorValidatorsDefault{
		_statusCode: code,
	}
}

/* StakingDelegatorValidatorsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type StakingDelegatorValidatorsDefault struct {
	_statusCode int

	Payload *StakingDelegatorValidatorsDefaultBody
}

// Code gets the status code for the staking delegator validators default response
func (o *StakingDelegatorValidatorsDefault) Code() int {
	return o._statusCode
}

func (o *StakingDelegatorValidatorsDefault) Error() string {
	return fmt.Sprintf("[GET /cosmos/staking/v1beta1/delegators/{delegator_addr}/validators][%d] StakingDelegatorValidators default  %+v", o._statusCode, o.Payload)
}
func (o *StakingDelegatorValidatorsDefault) GetPayload() *StakingDelegatorValidatorsDefaultBody {
	return o.Payload
}

func (o *StakingDelegatorValidatorsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StakingDelegatorValidatorsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*StakingDelegatorValidatorsDefaultBody staking delegator validators default body
swagger:model StakingDelegatorValidatorsDefaultBody
*/
type StakingDelegatorValidatorsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*StakingDelegatorValidatorsDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this staking delegator validators default body
func (o *StakingDelegatorValidatorsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StakingDelegatorValidatorsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StakingDelegatorValidators default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("StakingDelegatorValidators default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this staking delegator validators default body based on the context it is used
func (o *StakingDelegatorValidatorsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StakingDelegatorValidatorsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StakingDelegatorValidators default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("StakingDelegatorValidators default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StakingDelegatorValidatorsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StakingDelegatorValidatorsDefaultBody) UnmarshalBinary(b []byte) error {
	var res StakingDelegatorValidatorsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StakingDelegatorValidatorsDefaultBodyDetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := ptypes.MarshalAny(foo)
//      ...
//      foo := &pb.Foo{}
//      if err := ptypes.UnmarshalAny(any, foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model StakingDelegatorValidatorsDefaultBodyDetailsItems0
*/
type StakingDelegatorValidatorsDefaultBodyDetailsItems0 struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this staking delegator validators default body details items0
func (o *StakingDelegatorValidatorsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this staking delegator validators default body details items0 based on context it is used
func (o *StakingDelegatorValidatorsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StakingDelegatorValidatorsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StakingDelegatorValidatorsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res StakingDelegatorValidatorsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StakingDelegatorValidatorsOKBody QueryDelegatorValidatorsResponse is response type for the
// Query/DelegatorValidators RPC method.
swagger:model StakingDelegatorValidatorsOKBody
*/
type StakingDelegatorValidatorsOKBody struct {

	// pagination
	Pagination *StakingDelegatorValidatorsOKBodyPagination `json:"pagination,omitempty"`

	// validators defines the the validators' info of a delegator.
	Validators []*StakingDelegatorValidatorsOKBodyValidatorsItems0 `json:"validators"`
}

// Validate validates this staking delegator validators o k body
func (o *StakingDelegatorValidatorsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValidators(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StakingDelegatorValidatorsOKBody) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stakingDelegatorValidatorsOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stakingDelegatorValidatorsOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

func (o *StakingDelegatorValidatorsOKBody) validateValidators(formats strfmt.Registry) error {
	if swag.IsZero(o.Validators) { // not required
		return nil
	}

	for i := 0; i < len(o.Validators); i++ {
		if swag.IsZero(o.Validators[i]) { // not required
			continue
		}

		if o.Validators[i] != nil {
			if err := o.Validators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stakingDelegatorValidatorsOK" + "." + "validators" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stakingDelegatorValidatorsOK" + "." + "validators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this staking delegator validators o k body based on the context it is used
func (o *StakingDelegatorValidatorsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateValidators(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StakingDelegatorValidatorsOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {
		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stakingDelegatorValidatorsOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stakingDelegatorValidatorsOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

func (o *StakingDelegatorValidatorsOKBody) contextValidateValidators(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Validators); i++ {

		if o.Validators[i] != nil {
			if err := o.Validators[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stakingDelegatorValidatorsOK" + "." + "validators" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stakingDelegatorValidatorsOK" + "." + "validators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StakingDelegatorValidatorsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StakingDelegatorValidatorsOKBody) UnmarshalBinary(b []byte) error {
	var res StakingDelegatorValidatorsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StakingDelegatorValidatorsOKBodyPagination pagination defines the pagination in the response.
swagger:model StakingDelegatorValidatorsOKBodyPagination
*/
type StakingDelegatorValidatorsOKBodyPagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this staking delegator validators o k body pagination
func (o *StakingDelegatorValidatorsOKBodyPagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this staking delegator validators o k body pagination based on context it is used
func (o *StakingDelegatorValidatorsOKBodyPagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StakingDelegatorValidatorsOKBodyPagination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StakingDelegatorValidatorsOKBodyPagination) UnmarshalBinary(b []byte) error {
	var res StakingDelegatorValidatorsOKBodyPagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StakingDelegatorValidatorsOKBodyValidatorsItems0 Validator defines a validator, together with the total amount of the
// Validator's bond shares and their exchange rate to coins. Slashing results in
// a decrease in the exchange rate, allowing correct calculation of future
// undelegations without iterating over delegators. When coins are delegated to
// this validator, the validator is credited with a delegation whose number of
// bond shares is based on the amount of coins delegated divided by the current
// exchange rate. Voting power can be calculated as total bonded shares
// multiplied by exchange rate.
swagger:model StakingDelegatorValidatorsOKBodyValidatorsItems0
*/
type StakingDelegatorValidatorsOKBodyValidatorsItems0 struct {

	// commission
	Commission *StakingDelegatorValidatorsOKBodyValidatorsItems0Commission `json:"commission,omitempty"`

	// consensus pubkey
	ConsensusPubkey *StakingDelegatorValidatorsOKBodyValidatorsItems0ConsensusPubkey `json:"consensus_pubkey,omitempty"`

	// delegator_shares defines total shares issued to a validator's delegators.
	DelegatorShares string `json:"delegator_shares,omitempty"`

	// description
	Description *StakingDelegatorValidatorsOKBodyValidatorsItems0Description `json:"description,omitempty"`

	// jailed defined whether the validator has been jailed from bonded status or not.
	Jailed bool `json:"jailed,omitempty"`

	// min_self_delegation is the validator's self declared minimum self delegation.
	MinSelfDelegation string `json:"min_self_delegation,omitempty"`

	// operator_address defines the address of the validator's operator; bech encoded in JSON.
	OperatorAddress string `json:"operator_address,omitempty"`

	// status is the validator status (bonded/unbonding/unbonded).
	// Enum: [BOND_STATUS_UNSPECIFIED BOND_STATUS_UNBONDED BOND_STATUS_UNBONDING BOND_STATUS_BONDED]
	Status *string `json:"status,omitempty"`

	// tokens define the delegated tokens (incl. self-delegation).
	Tokens string `json:"tokens,omitempty"`

	// unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
	UnbondingHeight string `json:"unbonding_height,omitempty"`

	// unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.
	// Format: date-time
	UnbondingTime strfmt.DateTime `json:"unbonding_time,omitempty"`
}

// Validate validates this staking delegator validators o k body validators items0
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommission(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConsensusPubkey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnbondingTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0) validateCommission(formats strfmt.Registry) error {
	if swag.IsZero(o.Commission) { // not required
		return nil
	}

	if o.Commission != nil {
		if err := o.Commission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commission")
			}
			return err
		}
	}

	return nil
}

func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0) validateConsensusPubkey(formats strfmt.Registry) error {
	if swag.IsZero(o.ConsensusPubkey) { // not required
		return nil
	}

	if o.ConsensusPubkey != nil {
		if err := o.ConsensusPubkey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consensus_pubkey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consensus_pubkey")
			}
			return err
		}
	}

	return nil
}

func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if o.Description != nil {
		if err := o.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

var stakingDelegatorValidatorsOKBodyValidatorsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stakingDelegatorValidatorsOKBodyValidatorsItems0TypeStatusPropEnum = append(stakingDelegatorValidatorsOKBodyValidatorsItems0TypeStatusPropEnum, v)
	}
}

const (

	// StakingDelegatorValidatorsOKBodyValidatorsItems0StatusBONDSTATUSUNSPECIFIED captures enum value "BOND_STATUS_UNSPECIFIED"
	StakingDelegatorValidatorsOKBodyValidatorsItems0StatusBONDSTATUSUNSPECIFIED string = "BOND_STATUS_UNSPECIFIED"

	// StakingDelegatorValidatorsOKBodyValidatorsItems0StatusBONDSTATUSUNBONDED captures enum value "BOND_STATUS_UNBONDED"
	StakingDelegatorValidatorsOKBodyValidatorsItems0StatusBONDSTATUSUNBONDED string = "BOND_STATUS_UNBONDED"

	// StakingDelegatorValidatorsOKBodyValidatorsItems0StatusBONDSTATUSUNBONDING captures enum value "BOND_STATUS_UNBONDING"
	StakingDelegatorValidatorsOKBodyValidatorsItems0StatusBONDSTATUSUNBONDING string = "BOND_STATUS_UNBONDING"

	// StakingDelegatorValidatorsOKBodyValidatorsItems0StatusBONDSTATUSBONDED captures enum value "BOND_STATUS_BONDED"
	StakingDelegatorValidatorsOKBodyValidatorsItems0StatusBONDSTATUSBONDED string = "BOND_STATUS_BONDED"
)

// prop value enum
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stakingDelegatorValidatorsOKBodyValidatorsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0) validateUnbondingTime(formats strfmt.Registry) error {
	if swag.IsZero(o.UnbondingTime) { // not required
		return nil
	}

	if err := validate.FormatOf("unbonding_time", "body", "date-time", o.UnbondingTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this staking delegator validators o k body validators items0 based on the context it is used
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCommission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateConsensusPubkey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0) contextValidateCommission(ctx context.Context, formats strfmt.Registry) error {

	if o.Commission != nil {
		if err := o.Commission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commission")
			}
			return err
		}
	}

	return nil
}

func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0) contextValidateConsensusPubkey(ctx context.Context, formats strfmt.Registry) error {

	if o.ConsensusPubkey != nil {
		if err := o.ConsensusPubkey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consensus_pubkey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consensus_pubkey")
			}
			return err
		}
	}

	return nil
}

func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if o.Description != nil {
		if err := o.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0) UnmarshalBinary(b []byte) error {
	var res StakingDelegatorValidatorsOKBodyValidatorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StakingDelegatorValidatorsOKBodyValidatorsItems0Commission commission defines the commission parameters.
swagger:model StakingDelegatorValidatorsOKBodyValidatorsItems0Commission
*/
type StakingDelegatorValidatorsOKBodyValidatorsItems0Commission struct {

	// commission rates
	CommissionRates *StakingDelegatorValidatorsOKBodyValidatorsItems0CommissionCommissionRates `json:"commission_rates,omitempty"`

	// update_time is the last time the commission rate was changed.
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"update_time,omitempty"`
}

// Validate validates this staking delegator validators o k body validators items0 commission
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0Commission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommissionRates(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0Commission) validateCommissionRates(formats strfmt.Registry) error {
	if swag.IsZero(o.CommissionRates) { // not required
		return nil
	}

	if o.CommissionRates != nil {
		if err := o.CommissionRates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission" + "." + "commission_rates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commission" + "." + "commission_rates")
			}
			return err
		}
	}

	return nil
}

func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0Commission) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("commission"+"."+"update_time", "body", "date-time", o.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this staking delegator validators o k body validators items0 commission based on the context it is used
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0Commission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCommissionRates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0Commission) contextValidateCommissionRates(ctx context.Context, formats strfmt.Registry) error {

	if o.CommissionRates != nil {
		if err := o.CommissionRates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission" + "." + "commission_rates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commission" + "." + "commission_rates")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0Commission) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0Commission) UnmarshalBinary(b []byte) error {
	var res StakingDelegatorValidatorsOKBodyValidatorsItems0Commission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StakingDelegatorValidatorsOKBodyValidatorsItems0CommissionCommissionRates commission_rates defines the initial commission rates to be used for creating a validator.
swagger:model StakingDelegatorValidatorsOKBodyValidatorsItems0CommissionCommissionRates
*/
type StakingDelegatorValidatorsOKBodyValidatorsItems0CommissionCommissionRates struct {

	// max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
	MaxChangeRate string `json:"max_change_rate,omitempty"`

	// max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
	MaxRate string `json:"max_rate,omitempty"`

	// rate is the commission rate charged to delegators, as a fraction.
	Rate string `json:"rate,omitempty"`
}

// Validate validates this staking delegator validators o k body validators items0 commission commission rates
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0CommissionCommissionRates) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this staking delegator validators o k body validators items0 commission commission rates based on context it is used
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0CommissionCommissionRates) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0CommissionCommissionRates) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0CommissionCommissionRates) UnmarshalBinary(b []byte) error {
	var res StakingDelegatorValidatorsOKBodyValidatorsItems0CommissionCommissionRates
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StakingDelegatorValidatorsOKBodyValidatorsItems0ConsensusPubkey `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := ptypes.MarshalAny(foo)
//      ...
//      foo := &pb.Foo{}
//      if err := ptypes.UnmarshalAny(any, foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model StakingDelegatorValidatorsOKBodyValidatorsItems0ConsensusPubkey
*/
type StakingDelegatorValidatorsOKBodyValidatorsItems0ConsensusPubkey struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this staking delegator validators o k body validators items0 consensus pubkey
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0ConsensusPubkey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this staking delegator validators o k body validators items0 consensus pubkey based on context it is used
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0ConsensusPubkey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0ConsensusPubkey) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0ConsensusPubkey) UnmarshalBinary(b []byte) error {
	var res StakingDelegatorValidatorsOKBodyValidatorsItems0ConsensusPubkey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StakingDelegatorValidatorsOKBodyValidatorsItems0Description description defines the description terms for the validator.
swagger:model StakingDelegatorValidatorsOKBodyValidatorsItems0Description
*/
type StakingDelegatorValidatorsOKBodyValidatorsItems0Description struct {

	// details define other optional details.
	Details string `json:"details,omitempty"`

	// identity defines an optional identity signature (ex. UPort or Keybase).
	Identity string `json:"identity,omitempty"`

	// moniker defines a human-readable name for the validator.
	Moniker string `json:"moniker,omitempty"`

	// security_contact defines an optional email for security contact.
	SecurityContact string `json:"security_contact,omitempty"`

	// website defines an optional website link.
	Website string `json:"website,omitempty"`
}

// Validate validates this staking delegator validators o k body validators items0 description
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0Description) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this staking delegator validators o k body validators items0 description based on context it is used
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0Description) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0Description) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StakingDelegatorValidatorsOKBodyValidatorsItems0Description) UnmarshalBinary(b []byte) error {
	var res StakingDelegatorValidatorsOKBodyValidatorsItems0Description
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
