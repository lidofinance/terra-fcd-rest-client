// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DenomTraceReader is a Reader for the DenomTrace structure.
type DenomTraceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DenomTraceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDenomTraceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDenomTraceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDenomTraceOK creates a DenomTraceOK with default headers values
func NewDenomTraceOK() *DenomTraceOK {
	return &DenomTraceOK{}
}

/* DenomTraceOK describes a response with status code 200, with default header values.

A successful response.
*/
type DenomTraceOK struct {
	Payload *DenomTraceOKBody
}

func (o *DenomTraceOK) Error() string {
	return fmt.Sprintf("[GET /ibc/apps/transfer/v1/denom_traces/{hash}][%d] denomTraceOK  %+v", 200, o.Payload)
}
func (o *DenomTraceOK) GetPayload() *DenomTraceOKBody {
	return o.Payload
}

func (o *DenomTraceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DenomTraceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDenomTraceDefault creates a DenomTraceDefault with default headers values
func NewDenomTraceDefault(code int) *DenomTraceDefault {
	return &DenomTraceDefault{
		_statusCode: code,
	}
}

/* DenomTraceDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type DenomTraceDefault struct {
	_statusCode int

	Payload *DenomTraceDefaultBody
}

// Code gets the status code for the denom trace default response
func (o *DenomTraceDefault) Code() int {
	return o._statusCode
}

func (o *DenomTraceDefault) Error() string {
	return fmt.Sprintf("[GET /ibc/apps/transfer/v1/denom_traces/{hash}][%d] DenomTrace default  %+v", o._statusCode, o.Payload)
}
func (o *DenomTraceDefault) GetPayload() *DenomTraceDefaultBody {
	return o.Payload
}

func (o *DenomTraceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DenomTraceDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DenomTraceDefaultBody denom trace default body
swagger:model DenomTraceDefaultBody
*/
type DenomTraceDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*DenomTraceDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this denom trace default body
func (o *DenomTraceDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DenomTraceDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DenomTrace default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DenomTrace default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this denom trace default body based on the context it is used
func (o *DenomTraceDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DenomTraceDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DenomTrace default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DenomTrace default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DenomTraceDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomTraceDefaultBody) UnmarshalBinary(b []byte) error {
	var res DenomTraceDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DenomTraceDefaultBodyDetailsItems0 denom trace default body details items0
swagger:model DenomTraceDefaultBodyDetailsItems0
*/
type DenomTraceDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this denom trace default body details items0
func (o *DenomTraceDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this denom trace default body details items0 based on context it is used
func (o *DenomTraceDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DenomTraceDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomTraceDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res DenomTraceDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DenomTraceOKBody QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC
// method.
swagger:model DenomTraceOKBody
*/
type DenomTraceOKBody struct {

	// denom trace
	DenomTrace *DenomTraceOKBodyDenomTrace `json:"denom_trace,omitempty"`
}

// Validate validates this denom trace o k body
func (o *DenomTraceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDenomTrace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DenomTraceOKBody) validateDenomTrace(formats strfmt.Registry) error {
	if swag.IsZero(o.DenomTrace) { // not required
		return nil
	}

	if o.DenomTrace != nil {
		if err := o.DenomTrace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("denomTraceOK" + "." + "denom_trace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("denomTraceOK" + "." + "denom_trace")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this denom trace o k body based on the context it is used
func (o *DenomTraceOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDenomTrace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DenomTraceOKBody) contextValidateDenomTrace(ctx context.Context, formats strfmt.Registry) error {

	if o.DenomTrace != nil {
		if err := o.DenomTrace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("denomTraceOK" + "." + "denom_trace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("denomTraceOK" + "." + "denom_trace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DenomTraceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomTraceOKBody) UnmarshalBinary(b []byte) error {
	var res DenomTraceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DenomTraceOKBodyDenomTrace DenomTrace contains the base denomination for ICS20 fungible tokens and the
// source tracing information path.
swagger:model DenomTraceOKBodyDenomTrace
*/
type DenomTraceOKBodyDenomTrace struct {

	// base denomination of the relayed fungible token.
	BaseDenom string `json:"base_denom,omitempty"`

	// path defines the chain of port/channel identifiers used for tracing the
	// source of the fungible token.
	Path string `json:"path,omitempty"`
}

// Validate validates this denom trace o k body denom trace
func (o *DenomTraceOKBodyDenomTrace) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this denom trace o k body denom trace based on context it is used
func (o *DenomTraceOKBodyDenomTrace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DenomTraceOKBodyDenomTrace) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomTraceOKBodyDenomTrace) UnmarshalBinary(b []byte) error {
	var res DenomTraceOKBodyDenomTrace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
