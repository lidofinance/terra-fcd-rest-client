// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProposalsReader is a Reader for the Proposals structure.
type ProposalsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProposalsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProposalsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewProposalsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewProposalsOK creates a ProposalsOK with default headers values
func NewProposalsOK() *ProposalsOK {
	return &ProposalsOK{}
}

/* ProposalsOK describes a response with status code 200, with default header values.

A successful response.
*/
type ProposalsOK struct {
	Payload *ProposalsOKBody
}

func (o *ProposalsOK) Error() string {
	return fmt.Sprintf("[GET /cosmos/gov/v1beta1/proposals][%d] proposalsOK  %+v", 200, o.Payload)
}
func (o *ProposalsOK) GetPayload() *ProposalsOKBody {
	return o.Payload
}

func (o *ProposalsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProposalsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProposalsDefault creates a ProposalsDefault with default headers values
func NewProposalsDefault(code int) *ProposalsDefault {
	return &ProposalsDefault{
		_statusCode: code,
	}
}

/* ProposalsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type ProposalsDefault struct {
	_statusCode int

	Payload *ProposalsDefaultBody
}

// Code gets the status code for the proposals default response
func (o *ProposalsDefault) Code() int {
	return o._statusCode
}

func (o *ProposalsDefault) Error() string {
	return fmt.Sprintf("[GET /cosmos/gov/v1beta1/proposals][%d] Proposals default  %+v", o._statusCode, o.Payload)
}
func (o *ProposalsDefault) GetPayload() *ProposalsDefaultBody {
	return o.Payload
}

func (o *ProposalsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProposalsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ProposalsDefaultBody proposals default body
swagger:model ProposalsDefaultBody
*/
type ProposalsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*ProposalsDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this proposals default body
func (o *ProposalsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProposalsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Proposals default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Proposals default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this proposals default body based on the context it is used
func (o *ProposalsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProposalsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Proposals default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Proposals default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProposalsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalsDefaultBody) UnmarshalBinary(b []byte) error {
	var res ProposalsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProposalsDefaultBodyDetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := ptypes.MarshalAny(foo)
//      ...
//      foo := &pb.Foo{}
//      if err := ptypes.UnmarshalAny(any, foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model ProposalsDefaultBodyDetailsItems0
*/
type ProposalsDefaultBodyDetailsItems0 struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this proposals default body details items0
func (o *ProposalsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this proposals default body details items0 based on context it is used
func (o *ProposalsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProposalsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ProposalsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProposalsOKBody QueryProposalsResponse is the response type for the Query/Proposals RPC
// method.
swagger:model ProposalsOKBody
*/
type ProposalsOKBody struct {

	// pagination
	Pagination *ProposalsOKBodyPagination `json:"pagination,omitempty"`

	// proposals
	Proposals []*ProposalsOKBodyProposalsItems0 `json:"proposals"`
}

// Validate validates this proposals o k body
func (o *ProposalsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProposals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProposalsOKBody) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proposalsOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proposalsOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

func (o *ProposalsOKBody) validateProposals(formats strfmt.Registry) error {
	if swag.IsZero(o.Proposals) { // not required
		return nil
	}

	for i := 0; i < len(o.Proposals); i++ {
		if swag.IsZero(o.Proposals[i]) { // not required
			continue
		}

		if o.Proposals[i] != nil {
			if err := o.Proposals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proposalsOK" + "." + "proposals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("proposalsOK" + "." + "proposals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this proposals o k body based on the context it is used
func (o *ProposalsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProposals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProposalsOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {
		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proposalsOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proposalsOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

func (o *ProposalsOKBody) contextValidateProposals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Proposals); i++ {

		if o.Proposals[i] != nil {
			if err := o.Proposals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proposalsOK" + "." + "proposals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("proposalsOK" + "." + "proposals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProposalsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalsOKBody) UnmarshalBinary(b []byte) error {
	var res ProposalsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProposalsOKBodyPagination pagination defines the pagination in the response.
swagger:model ProposalsOKBodyPagination
*/
type ProposalsOKBodyPagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this proposals o k body pagination
func (o *ProposalsOKBodyPagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this proposals o k body pagination based on context it is used
func (o *ProposalsOKBodyPagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProposalsOKBodyPagination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalsOKBodyPagination) UnmarshalBinary(b []byte) error {
	var res ProposalsOKBodyPagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProposalsOKBodyProposalsItems0 Proposal defines the core field members of a governance proposal.
swagger:model ProposalsOKBodyProposalsItems0
*/
type ProposalsOKBodyProposalsItems0 struct {

	// content
	Content *ProposalsOKBodyProposalsItems0Content `json:"content,omitempty"`

	// deposit end time
	// Format: date-time
	DepositEndTime strfmt.DateTime `json:"deposit_end_time,omitempty"`

	// final tally result
	FinalTallyResult *ProposalsOKBodyProposalsItems0FinalTallyResult `json:"final_tally_result,omitempty"`

	// proposal id
	ProposalID string `json:"proposal_id,omitempty"`

	// ProposalStatus enumerates the valid statuses of a proposal.
	//
	//  - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
	//  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
	// period.
	//  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
	// period.
	//  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
	// passed.
	//  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
	// been rejected.
	//  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
	// failed.
	// Enum: [PROPOSAL_STATUS_UNSPECIFIED PROPOSAL_STATUS_DEPOSIT_PERIOD PROPOSAL_STATUS_VOTING_PERIOD PROPOSAL_STATUS_PASSED PROPOSAL_STATUS_REJECTED PROPOSAL_STATUS_FAILED]
	Status *string `json:"status,omitempty"`

	// submit time
	// Format: date-time
	SubmitTime strfmt.DateTime `json:"submit_time,omitempty"`

	// total deposit
	TotalDeposit []*ProposalsOKBodyProposalsItems0TotalDepositItems0 `json:"total_deposit"`

	// voting end time
	// Format: date-time
	VotingEndTime strfmt.DateTime `json:"voting_end_time,omitempty"`

	// voting start time
	// Format: date-time
	VotingStartTime strfmt.DateTime `json:"voting_start_time,omitempty"`
}

// Validate validates this proposals o k body proposals items0
func (o *ProposalsOKBodyProposalsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDepositEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFinalTallyResult(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalDeposit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVotingEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVotingStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProposalsOKBodyProposalsItems0) validateContent(formats strfmt.Registry) error {
	if swag.IsZero(o.Content) { // not required
		return nil
	}

	if o.Content != nil {
		if err := o.Content.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("content")
			}
			return err
		}
	}

	return nil
}

func (o *ProposalsOKBodyProposalsItems0) validateDepositEndTime(formats strfmt.Registry) error {
	if swag.IsZero(o.DepositEndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("deposit_end_time", "body", "date-time", o.DepositEndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ProposalsOKBodyProposalsItems0) validateFinalTallyResult(formats strfmt.Registry) error {
	if swag.IsZero(o.FinalTallyResult) { // not required
		return nil
	}

	if o.FinalTallyResult != nil {
		if err := o.FinalTallyResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("final_tally_result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("final_tally_result")
			}
			return err
		}
	}

	return nil
}

var proposalsOKBodyProposalsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		proposalsOKBodyProposalsItems0TypeStatusPropEnum = append(proposalsOKBodyProposalsItems0TypeStatusPropEnum, v)
	}
}

const (

	// ProposalsOKBodyProposalsItems0StatusPROPOSALSTATUSUNSPECIFIED captures enum value "PROPOSAL_STATUS_UNSPECIFIED"
	ProposalsOKBodyProposalsItems0StatusPROPOSALSTATUSUNSPECIFIED string = "PROPOSAL_STATUS_UNSPECIFIED"

	// ProposalsOKBodyProposalsItems0StatusPROPOSALSTATUSDEPOSITPERIOD captures enum value "PROPOSAL_STATUS_DEPOSIT_PERIOD"
	ProposalsOKBodyProposalsItems0StatusPROPOSALSTATUSDEPOSITPERIOD string = "PROPOSAL_STATUS_DEPOSIT_PERIOD"

	// ProposalsOKBodyProposalsItems0StatusPROPOSALSTATUSVOTINGPERIOD captures enum value "PROPOSAL_STATUS_VOTING_PERIOD"
	ProposalsOKBodyProposalsItems0StatusPROPOSALSTATUSVOTINGPERIOD string = "PROPOSAL_STATUS_VOTING_PERIOD"

	// ProposalsOKBodyProposalsItems0StatusPROPOSALSTATUSPASSED captures enum value "PROPOSAL_STATUS_PASSED"
	ProposalsOKBodyProposalsItems0StatusPROPOSALSTATUSPASSED string = "PROPOSAL_STATUS_PASSED"

	// ProposalsOKBodyProposalsItems0StatusPROPOSALSTATUSREJECTED captures enum value "PROPOSAL_STATUS_REJECTED"
	ProposalsOKBodyProposalsItems0StatusPROPOSALSTATUSREJECTED string = "PROPOSAL_STATUS_REJECTED"

	// ProposalsOKBodyProposalsItems0StatusPROPOSALSTATUSFAILED captures enum value "PROPOSAL_STATUS_FAILED"
	ProposalsOKBodyProposalsItems0StatusPROPOSALSTATUSFAILED string = "PROPOSAL_STATUS_FAILED"
)

// prop value enum
func (o *ProposalsOKBodyProposalsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, proposalsOKBodyProposalsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProposalsOKBodyProposalsItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

func (o *ProposalsOKBodyProposalsItems0) validateSubmitTime(formats strfmt.Registry) error {
	if swag.IsZero(o.SubmitTime) { // not required
		return nil
	}

	if err := validate.FormatOf("submit_time", "body", "date-time", o.SubmitTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ProposalsOKBodyProposalsItems0) validateTotalDeposit(formats strfmt.Registry) error {
	if swag.IsZero(o.TotalDeposit) { // not required
		return nil
	}

	for i := 0; i < len(o.TotalDeposit); i++ {
		if swag.IsZero(o.TotalDeposit[i]) { // not required
			continue
		}

		if o.TotalDeposit[i] != nil {
			if err := o.TotalDeposit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("total_deposit" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("total_deposit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProposalsOKBodyProposalsItems0) validateVotingEndTime(formats strfmt.Registry) error {
	if swag.IsZero(o.VotingEndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("voting_end_time", "body", "date-time", o.VotingEndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ProposalsOKBodyProposalsItems0) validateVotingStartTime(formats strfmt.Registry) error {
	if swag.IsZero(o.VotingStartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("voting_start_time", "body", "date-time", o.VotingStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this proposals o k body proposals items0 based on the context it is used
func (o *ProposalsOKBodyProposalsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateContent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFinalTallyResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTotalDeposit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProposalsOKBodyProposalsItems0) contextValidateContent(ctx context.Context, formats strfmt.Registry) error {

	if o.Content != nil {
		if err := o.Content.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("content")
			}
			return err
		}
	}

	return nil
}

func (o *ProposalsOKBodyProposalsItems0) contextValidateFinalTallyResult(ctx context.Context, formats strfmt.Registry) error {

	if o.FinalTallyResult != nil {
		if err := o.FinalTallyResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("final_tally_result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("final_tally_result")
			}
			return err
		}
	}

	return nil
}

func (o *ProposalsOKBodyProposalsItems0) contextValidateTotalDeposit(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.TotalDeposit); i++ {

		if o.TotalDeposit[i] != nil {
			if err := o.TotalDeposit[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("total_deposit" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("total_deposit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProposalsOKBodyProposalsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalsOKBodyProposalsItems0) UnmarshalBinary(b []byte) error {
	var res ProposalsOKBodyProposalsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProposalsOKBodyProposalsItems0Content `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := ptypes.MarshalAny(foo)
//      ...
//      foo := &pb.Foo{}
//      if err := ptypes.UnmarshalAny(any, foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model ProposalsOKBodyProposalsItems0Content
*/
type ProposalsOKBodyProposalsItems0Content struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this proposals o k body proposals items0 content
func (o *ProposalsOKBodyProposalsItems0Content) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this proposals o k body proposals items0 content based on context it is used
func (o *ProposalsOKBodyProposalsItems0Content) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProposalsOKBodyProposalsItems0Content) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalsOKBodyProposalsItems0Content) UnmarshalBinary(b []byte) error {
	var res ProposalsOKBodyProposalsItems0Content
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProposalsOKBodyProposalsItems0FinalTallyResult TallyResult defines a standard tally for a governance proposal.
swagger:model ProposalsOKBodyProposalsItems0FinalTallyResult
*/
type ProposalsOKBodyProposalsItems0FinalTallyResult struct {

	// abstain
	Abstain string `json:"abstain,omitempty"`

	// no
	No string `json:"no,omitempty"`

	// no with veto
	NoWithVeto string `json:"no_with_veto,omitempty"`

	// yes
	Yes string `json:"yes,omitempty"`
}

// Validate validates this proposals o k body proposals items0 final tally result
func (o *ProposalsOKBodyProposalsItems0FinalTallyResult) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this proposals o k body proposals items0 final tally result based on context it is used
func (o *ProposalsOKBodyProposalsItems0FinalTallyResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProposalsOKBodyProposalsItems0FinalTallyResult) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalsOKBodyProposalsItems0FinalTallyResult) UnmarshalBinary(b []byte) error {
	var res ProposalsOKBodyProposalsItems0FinalTallyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProposalsOKBodyProposalsItems0TotalDepositItems0 Coin defines a token with a denomination and an amount.
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
swagger:model ProposalsOKBodyProposalsItems0TotalDepositItems0
*/
type ProposalsOKBodyProposalsItems0TotalDepositItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this proposals o k body proposals items0 total deposit items0
func (o *ProposalsOKBodyProposalsItems0TotalDepositItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this proposals o k body proposals items0 total deposit items0 based on context it is used
func (o *ProposalsOKBodyProposalsItems0TotalDepositItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProposalsOKBodyProposalsItems0TotalDepositItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalsOKBodyProposalsItems0TotalDepositItems0) UnmarshalBinary(b []byte) error {
	var res ProposalsOKBodyProposalsItems0TotalDepositItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
