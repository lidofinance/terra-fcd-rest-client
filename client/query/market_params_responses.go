// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MarketParamsReader is a Reader for the MarketParams structure.
type MarketParamsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MarketParamsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMarketParamsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewMarketParamsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewMarketParamsOK creates a MarketParamsOK with default headers values
func NewMarketParamsOK() *MarketParamsOK {
	return &MarketParamsOK{}
}

/* MarketParamsOK describes a response with status code 200, with default header values.

A successful response.
*/
type MarketParamsOK struct {
	Payload *MarketParamsOKBody
}

func (o *MarketParamsOK) Error() string {
	return fmt.Sprintf("[GET /terra/market/v1beta1/params][%d] marketParamsOK  %+v", 200, o.Payload)
}
func (o *MarketParamsOK) GetPayload() *MarketParamsOKBody {
	return o.Payload
}

func (o *MarketParamsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(MarketParamsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMarketParamsDefault creates a MarketParamsDefault with default headers values
func NewMarketParamsDefault(code int) *MarketParamsDefault {
	return &MarketParamsDefault{
		_statusCode: code,
	}
}

/* MarketParamsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type MarketParamsDefault struct {
	_statusCode int

	Payload *MarketParamsDefaultBody
}

// Code gets the status code for the market params default response
func (o *MarketParamsDefault) Code() int {
	return o._statusCode
}

func (o *MarketParamsDefault) Error() string {
	return fmt.Sprintf("[GET /terra/market/v1beta1/params][%d] MarketParams default  %+v", o._statusCode, o.Payload)
}
func (o *MarketParamsDefault) GetPayload() *MarketParamsDefaultBody {
	return o.Payload
}

func (o *MarketParamsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(MarketParamsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*MarketParamsDefaultBody market params default body
swagger:model MarketParamsDefaultBody
*/
type MarketParamsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*MarketParamsDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this market params default body
func (o *MarketParamsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MarketParamsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MarketParams default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("MarketParams default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this market params default body based on the context it is used
func (o *MarketParamsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MarketParamsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("MarketParams default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("MarketParams default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *MarketParamsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MarketParamsDefaultBody) UnmarshalBinary(b []byte) error {
	var res MarketParamsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MarketParamsDefaultBodyDetailsItems0 market params default body details items0
swagger:model MarketParamsDefaultBodyDetailsItems0
*/
type MarketParamsDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this market params default body details items0
func (o *MarketParamsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this market params default body details items0 based on context it is used
func (o *MarketParamsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MarketParamsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MarketParamsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res MarketParamsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MarketParamsOKBody QueryParamsResponse is the response type for the Query/Params RPC method.
swagger:model MarketParamsOKBody
*/
type MarketParamsOKBody struct {

	// params
	Params *MarketParamsOKBodyParams `json:"params,omitempty"`
}

// Validate validates this market params o k body
func (o *MarketParamsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MarketParamsOKBody) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(o.Params) { // not required
		return nil
	}

	if o.Params != nil {
		if err := o.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketParamsOK" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketParamsOK" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this market params o k body based on the context it is used
func (o *MarketParamsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MarketParamsOKBody) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if o.Params != nil {
		if err := o.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketParamsOK" + "." + "params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketParamsOK" + "." + "params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *MarketParamsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MarketParamsOKBody) UnmarshalBinary(b []byte) error {
	var res MarketParamsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MarketParamsOKBodyParams params defines the parameters of the module.
swagger:model MarketParamsOKBodyParams
*/
type MarketParamsOKBodyParams struct {

	// base pool
	// Format: byte
	BasePool strfmt.Base64 `json:"base_pool,omitempty"`

	// min stability spread
	// Format: byte
	MinStabilitySpread strfmt.Base64 `json:"min_stability_spread,omitempty"`

	// pool recovery period
	PoolRecoveryPeriod string `json:"pool_recovery_period,omitempty"`
}

// Validate validates this market params o k body params
func (o *MarketParamsOKBodyParams) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this market params o k body params based on context it is used
func (o *MarketParamsOKBodyParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *MarketParamsOKBodyParams) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MarketParamsOKBodyParams) UnmarshalBinary(b []byte) error {
	var res MarketParamsOKBodyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
