// Code generated by go-swagger; DO NOT EDIT.

package governance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetGovProposalsProposalIDVotesVoterReader is a Reader for the GetGovProposalsProposalIDVotesVoter structure.
type GetGovProposalsProposalIDVotesVoterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGovProposalsProposalIDVotesVoterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGovProposalsProposalIDVotesVoterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGovProposalsProposalIDVotesVoterBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGovProposalsProposalIDVotesVoterNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGovProposalsProposalIDVotesVoterInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGovProposalsProposalIDVotesVoterOK creates a GetGovProposalsProposalIDVotesVoterOK with default headers values
func NewGetGovProposalsProposalIDVotesVoterOK() *GetGovProposalsProposalIDVotesVoterOK {
	return &GetGovProposalsProposalIDVotesVoterOK{}
}

/* GetGovProposalsProposalIDVotesVoterOK describes a response with status code 200, with default header values.

OK
*/
type GetGovProposalsProposalIDVotesVoterOK struct {
	Payload *GetGovProposalsProposalIDVotesVoterOKBody
}

func (o *GetGovProposalsProposalIDVotesVoterOK) Error() string {
	return fmt.Sprintf("[GET /gov/proposals/{proposalId}/votes/{voter}][%d] getGovProposalsProposalIdVotesVoterOK  %+v", 200, o.Payload)
}
func (o *GetGovProposalsProposalIDVotesVoterOK) GetPayload() *GetGovProposalsProposalIDVotesVoterOKBody {
	return o.Payload
}

func (o *GetGovProposalsProposalIDVotesVoterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGovProposalsProposalIDVotesVoterOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGovProposalsProposalIDVotesVoterBadRequest creates a GetGovProposalsProposalIDVotesVoterBadRequest with default headers values
func NewGetGovProposalsProposalIDVotesVoterBadRequest() *GetGovProposalsProposalIDVotesVoterBadRequest {
	return &GetGovProposalsProposalIDVotesVoterBadRequest{}
}

/* GetGovProposalsProposalIDVotesVoterBadRequest describes a response with status code 400, with default header values.

Invalid proposal id or voter address
*/
type GetGovProposalsProposalIDVotesVoterBadRequest struct {
}

func (o *GetGovProposalsProposalIDVotesVoterBadRequest) Error() string {
	return fmt.Sprintf("[GET /gov/proposals/{proposalId}/votes/{voter}][%d] getGovProposalsProposalIdVotesVoterBadRequest ", 400)
}

func (o *GetGovProposalsProposalIDVotesVoterBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGovProposalsProposalIDVotesVoterNotFound creates a GetGovProposalsProposalIDVotesVoterNotFound with default headers values
func NewGetGovProposalsProposalIDVotesVoterNotFound() *GetGovProposalsProposalIDVotesVoterNotFound {
	return &GetGovProposalsProposalIDVotesVoterNotFound{}
}

/* GetGovProposalsProposalIDVotesVoterNotFound describes a response with status code 404, with default header values.

Found no vote
*/
type GetGovProposalsProposalIDVotesVoterNotFound struct {
}

func (o *GetGovProposalsProposalIDVotesVoterNotFound) Error() string {
	return fmt.Sprintf("[GET /gov/proposals/{proposalId}/votes/{voter}][%d] getGovProposalsProposalIdVotesVoterNotFound ", 404)
}

func (o *GetGovProposalsProposalIDVotesVoterNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGovProposalsProposalIDVotesVoterInternalServerError creates a GetGovProposalsProposalIDVotesVoterInternalServerError with default headers values
func NewGetGovProposalsProposalIDVotesVoterInternalServerError() *GetGovProposalsProposalIDVotesVoterInternalServerError {
	return &GetGovProposalsProposalIDVotesVoterInternalServerError{}
}

/* GetGovProposalsProposalIDVotesVoterInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetGovProposalsProposalIDVotesVoterInternalServerError struct {
}

func (o *GetGovProposalsProposalIDVotesVoterInternalServerError) Error() string {
	return fmt.Sprintf("[GET /gov/proposals/{proposalId}/votes/{voter}][%d] getGovProposalsProposalIdVotesVoterInternalServerError ", 500)
}

func (o *GetGovProposalsProposalIDVotesVoterInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetGovProposalsProposalIDVotesVoterOKBody get gov proposals proposal ID votes voter o k body
swagger:model GetGovProposalsProposalIDVotesVoterOKBody
*/
type GetGovProposalsProposalIDVotesVoterOKBody struct {

	// options
	Options []*GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0 `json:"options"`

	// proposal id
	ProposalID string `json:"proposal_id,omitempty"`

	// voter
	Voter string `json:"voter,omitempty"`
}

// Validate validates this get gov proposals proposal ID votes voter o k body
func (o *GetGovProposalsProposalIDVotesVoterOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGovProposalsProposalIDVotesVoterOKBody) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(o.Options) { // not required
		return nil
	}

	for i := 0; i < len(o.Options); i++ {
		if swag.IsZero(o.Options[i]) { // not required
			continue
		}

		if o.Options[i] != nil {
			if err := o.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getGovProposalsProposalIdVotesVoterOK" + "." + "options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getGovProposalsProposalIdVotesVoterOK" + "." + "options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get gov proposals proposal ID votes voter o k body based on the context it is used
func (o *GetGovProposalsProposalIDVotesVoterOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGovProposalsProposalIDVotesVoterOKBody) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Options); i++ {

		if o.Options[i] != nil {
			if err := o.Options[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getGovProposalsProposalIdVotesVoterOK" + "." + "options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getGovProposalsProposalIdVotesVoterOK" + "." + "options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetGovProposalsProposalIDVotesVoterOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGovProposalsProposalIDVotesVoterOKBody) UnmarshalBinary(b []byte) error {
	var res GetGovProposalsProposalIDVotesVoterOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0 get gov proposals proposal ID votes voter o k body options items0
swagger:model GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0
*/
type GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0 struct {

	// VoteOption enumerates the valid vote options for a given governance proposal.
	// - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option. - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option. - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option. - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option. - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
	// Enum: [VOTE_OPTION_UNSPECIFIED VOTE_OPTION_YES VOTE_OPTION_ABSTAIN VOTE_OPTION_NO VOTE_OPTION_NO_WITH_VETO]
	Option string `json:"option,omitempty"`

	// weight
	Weight string `json:"weight,omitempty"`
}

// Validate validates this get gov proposals proposal ID votes voter o k body options items0
func (o *GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getGovProposalsProposalIdVotesVoterOKBodyOptionsItems0TypeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getGovProposalsProposalIdVotesVoterOKBodyOptionsItems0TypeOptionPropEnum = append(getGovProposalsProposalIdVotesVoterOKBodyOptionsItems0TypeOptionPropEnum, v)
	}
}

const (

	// GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0OptionVOTEOPTIONUNSPECIFIED captures enum value "VOTE_OPTION_UNSPECIFIED"
	GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0OptionVOTEOPTIONUNSPECIFIED string = "VOTE_OPTION_UNSPECIFIED"

	// GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0OptionVOTEOPTIONYES captures enum value "VOTE_OPTION_YES"
	GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0OptionVOTEOPTIONYES string = "VOTE_OPTION_YES"

	// GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0OptionVOTEOPTIONABSTAIN captures enum value "VOTE_OPTION_ABSTAIN"
	GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0OptionVOTEOPTIONABSTAIN string = "VOTE_OPTION_ABSTAIN"

	// GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0OptionVOTEOPTIONNO captures enum value "VOTE_OPTION_NO"
	GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0OptionVOTEOPTIONNO string = "VOTE_OPTION_NO"

	// GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0OptionVOTEOPTIONNOWITHVETO captures enum value "VOTE_OPTION_NO_WITH_VETO"
	GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0OptionVOTEOPTIONNOWITHVETO string = "VOTE_OPTION_NO_WITH_VETO"
)

// prop value enum
func (o *GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0) validateOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getGovProposalsProposalIdVotesVoterOKBodyOptionsItems0TypeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0) validateOption(formats strfmt.Registry) error {
	if swag.IsZero(o.Option) { // not required
		return nil
	}

	// value enum
	if err := o.validateOptionEnum("option", "body", o.Option); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get gov proposals proposal ID votes voter o k body options items0 based on context it is used
func (o *GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0) UnmarshalBinary(b []byte) error {
	var res GetGovProposalsProposalIDVotesVoterOKBodyOptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
