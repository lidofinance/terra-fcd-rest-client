// Code generated by go-swagger; DO NOT EDIT.

package market

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new market API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for market API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetMarketParameters(params *GetMarketParametersParams, opts ...ClientOption) (*GetMarketParametersOK, error)

	GetMarketSwap(params *GetMarketSwapParams, opts ...ClientOption) (*GetMarketSwapOK, error)

	GetMarketTerraPoolDelta(params *GetMarketTerraPoolDeltaParams, opts ...ClientOption) (*GetMarketTerraPoolDeltaOK, error)

	GetV1MarketPrice(params *GetV1MarketPriceParams, opts ...ClientOption) (*GetV1MarketPriceOK, error)

	GetV1MarketSwaprateBase(params *GetV1MarketSwaprateBaseParams, opts ...ClientOption) (*GetV1MarketSwaprateBaseOK, error)

	PostMarketSwap(params *PostMarketSwapParams, opts ...ClientOption) (*PostMarketSwapOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetMarketParameters gets market params
*/
func (a *Client) GetMarketParameters(params *GetMarketParametersParams, opts ...ClientOption) (*GetMarketParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMarketParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMarketParameters",
		Method:             "GET",
		PathPattern:        "/market/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMarketParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMarketParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMarketParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMarketSwap queries swap result amount
*/
func (a *Client) GetMarketSwap(params *GetMarketSwapParams, opts ...ClientOption) (*GetMarketSwapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMarketSwapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMarketSwap",
		Method:             "GET",
		PathPattern:        "/market/swap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMarketSwapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMarketSwapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMarketSwap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMarketTerraPoolDelta gets terra pool delta is usdr amount used for swap operation from the terra pool
*/
func (a *Client) GetMarketTerraPoolDelta(params *GetMarketTerraPoolDeltaParams, opts ...ClientOption) (*GetMarketTerraPoolDeltaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMarketTerraPoolDeltaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMarketTerraPoolDelta",
		Method:             "GET",
		PathPattern:        "/market/terra_pool_delta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMarketTerraPoolDeltaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMarketTerraPoolDeltaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMarketTerraPoolDelta: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1MarketPrice gets price history

  Get price history
*/
func (a *Client) GetV1MarketPrice(params *GetV1MarketPriceParams, opts ...ClientOption) (*GetV1MarketPriceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1MarketPriceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1MarketPrice",
		Method:             "GET",
		PathPattern:        "/v1/market/price",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1MarketPriceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1MarketPriceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1MarketPrice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1MarketSwaprateBase gets current swaprate

  Get current swaprate
*/
func (a *Client) GetV1MarketSwaprateBase(params *GetV1MarketSwaprateBaseParams, opts ...ClientOption) (*GetV1MarketSwaprateBaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1MarketSwaprateBaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1MarketSwaprateBase",
		Method:             "GET",
		PathPattern:        "/v1/market/swaprate/{base}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1MarketSwaprateBaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1MarketSwaprateBaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1MarketSwaprateBase: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostMarketSwap swaps coin with another coin
*/
func (a *Client) PostMarketSwap(params *PostMarketSwapParams, opts ...ClientOption) (*PostMarketSwapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMarketSwapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostMarketSwap",
		Method:             "POST",
		PathPattern:        "/market/swap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostMarketSwapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostMarketSwapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostMarketSwap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
