// Code generated by go-swagger; DO NOT EDIT.

package distribution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetDistributionValidatorsValidatorAddrReader is a Reader for the GetDistributionValidatorsValidatorAddr structure.
type GetDistributionValidatorsValidatorAddrReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDistributionValidatorsValidatorAddrReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDistributionValidatorsValidatorAddrOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDistributionValidatorsValidatorAddrBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDistributionValidatorsValidatorAddrInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDistributionValidatorsValidatorAddrOK creates a GetDistributionValidatorsValidatorAddrOK with default headers values
func NewGetDistributionValidatorsValidatorAddrOK() *GetDistributionValidatorsValidatorAddrOK {
	return &GetDistributionValidatorsValidatorAddrOK{}
}

/* GetDistributionValidatorsValidatorAddrOK describes a response with status code 200, with default header values.

OK
*/
type GetDistributionValidatorsValidatorAddrOK struct {
	Payload *GetDistributionValidatorsValidatorAddrOKBody
}

func (o *GetDistributionValidatorsValidatorAddrOK) Error() string {
	return fmt.Sprintf("[GET /distribution/validators/{validatorAddr}][%d] getDistributionValidatorsValidatorAddrOK  %+v", 200, o.Payload)
}
func (o *GetDistributionValidatorsValidatorAddrOK) GetPayload() *GetDistributionValidatorsValidatorAddrOKBody {
	return o.Payload
}

func (o *GetDistributionValidatorsValidatorAddrOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDistributionValidatorsValidatorAddrOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDistributionValidatorsValidatorAddrBadRequest creates a GetDistributionValidatorsValidatorAddrBadRequest with default headers values
func NewGetDistributionValidatorsValidatorAddrBadRequest() *GetDistributionValidatorsValidatorAddrBadRequest {
	return &GetDistributionValidatorsValidatorAddrBadRequest{}
}

/* GetDistributionValidatorsValidatorAddrBadRequest describes a response with status code 400, with default header values.

Invalid validator address
*/
type GetDistributionValidatorsValidatorAddrBadRequest struct {
}

func (o *GetDistributionValidatorsValidatorAddrBadRequest) Error() string {
	return fmt.Sprintf("[GET /distribution/validators/{validatorAddr}][%d] getDistributionValidatorsValidatorAddrBadRequest ", 400)
}

func (o *GetDistributionValidatorsValidatorAddrBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDistributionValidatorsValidatorAddrInternalServerError creates a GetDistributionValidatorsValidatorAddrInternalServerError with default headers values
func NewGetDistributionValidatorsValidatorAddrInternalServerError() *GetDistributionValidatorsValidatorAddrInternalServerError {
	return &GetDistributionValidatorsValidatorAddrInternalServerError{}
}

/* GetDistributionValidatorsValidatorAddrInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetDistributionValidatorsValidatorAddrInternalServerError struct {
}

func (o *GetDistributionValidatorsValidatorAddrInternalServerError) Error() string {
	return fmt.Sprintf("[GET /distribution/validators/{validatorAddr}][%d] getDistributionValidatorsValidatorAddrInternalServerError ", 500)
}

func (o *GetDistributionValidatorsValidatorAddrInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetDistributionValidatorsValidatorAddrOKBody get distribution validators validator addr o k body
swagger:model GetDistributionValidatorsValidatorAddrOKBody
*/
type GetDistributionValidatorsValidatorAddrOKBody struct {

	// bech32 encoded address
	// Example: terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l
	OperatorAddress string `json:"operator_address,omitempty"`

	// self bond rewards
	SelfBondRewards []*GetDistributionValidatorsValidatorAddrOKBodySelfBondRewardsItems0 `json:"self_bond_rewards"`

	// val commission
	ValCommission *GetDistributionValidatorsValidatorAddrOKBodyValCommission `json:"val_commission,omitempty"`
}

// Validate validates this get distribution validators validator addr o k body
func (o *GetDistributionValidatorsValidatorAddrOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelfBondRewards(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValCommission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDistributionValidatorsValidatorAddrOKBody) validateSelfBondRewards(formats strfmt.Registry) error {
	if swag.IsZero(o.SelfBondRewards) { // not required
		return nil
	}

	for i := 0; i < len(o.SelfBondRewards); i++ {
		if swag.IsZero(o.SelfBondRewards[i]) { // not required
			continue
		}

		if o.SelfBondRewards[i] != nil {
			if err := o.SelfBondRewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDistributionValidatorsValidatorAddrOK" + "." + "self_bond_rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDistributionValidatorsValidatorAddrOK" + "." + "self_bond_rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetDistributionValidatorsValidatorAddrOKBody) validateValCommission(formats strfmt.Registry) error {
	if swag.IsZero(o.ValCommission) { // not required
		return nil
	}

	if o.ValCommission != nil {
		if err := o.ValCommission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDistributionValidatorsValidatorAddrOK" + "." + "val_commission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDistributionValidatorsValidatorAddrOK" + "." + "val_commission")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get distribution validators validator addr o k body based on the context it is used
func (o *GetDistributionValidatorsValidatorAddrOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSelfBondRewards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateValCommission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDistributionValidatorsValidatorAddrOKBody) contextValidateSelfBondRewards(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.SelfBondRewards); i++ {

		if o.SelfBondRewards[i] != nil {
			if err := o.SelfBondRewards[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDistributionValidatorsValidatorAddrOK" + "." + "self_bond_rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDistributionValidatorsValidatorAddrOK" + "." + "self_bond_rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetDistributionValidatorsValidatorAddrOKBody) contextValidateValCommission(ctx context.Context, formats strfmt.Registry) error {

	if o.ValCommission != nil {
		if err := o.ValCommission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDistributionValidatorsValidatorAddrOK" + "." + "val_commission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDistributionValidatorsValidatorAddrOK" + "." + "val_commission")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDistributionValidatorsValidatorAddrOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDistributionValidatorsValidatorAddrOKBody) UnmarshalBinary(b []byte) error {
	var res GetDistributionValidatorsValidatorAddrOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetDistributionValidatorsValidatorAddrOKBodySelfBondRewardsItems0 get distribution validators validator addr o k body self bond rewards items0
swagger:model GetDistributionValidatorsValidatorAddrOKBodySelfBondRewardsItems0
*/
type GetDistributionValidatorsValidatorAddrOKBodySelfBondRewardsItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this get distribution validators validator addr o k body self bond rewards items0
func (o *GetDistributionValidatorsValidatorAddrOKBodySelfBondRewardsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get distribution validators validator addr o k body self bond rewards items0 based on context it is used
func (o *GetDistributionValidatorsValidatorAddrOKBodySelfBondRewardsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDistributionValidatorsValidatorAddrOKBodySelfBondRewardsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDistributionValidatorsValidatorAddrOKBodySelfBondRewardsItems0) UnmarshalBinary(b []byte) error {
	var res GetDistributionValidatorsValidatorAddrOKBodySelfBondRewardsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetDistributionValidatorsValidatorAddrOKBodyValCommission get distribution validators validator addr o k body val commission
swagger:model GetDistributionValidatorsValidatorAddrOKBodyValCommission
*/
type GetDistributionValidatorsValidatorAddrOKBodyValCommission struct {

	// commission
	Commission []*GetDistributionValidatorsValidatorAddrOKBodyValCommissionCommissionItems0 `json:"commission"`
}

// Validate validates this get distribution validators validator addr o k body val commission
func (o *GetDistributionValidatorsValidatorAddrOKBodyValCommission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDistributionValidatorsValidatorAddrOKBodyValCommission) validateCommission(formats strfmt.Registry) error {
	if swag.IsZero(o.Commission) { // not required
		return nil
	}

	for i := 0; i < len(o.Commission); i++ {
		if swag.IsZero(o.Commission[i]) { // not required
			continue
		}

		if o.Commission[i] != nil {
			if err := o.Commission[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDistributionValidatorsValidatorAddrOK" + "." + "val_commission" + "." + "commission" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDistributionValidatorsValidatorAddrOK" + "." + "val_commission" + "." + "commission" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get distribution validators validator addr o k body val commission based on the context it is used
func (o *GetDistributionValidatorsValidatorAddrOKBodyValCommission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCommission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDistributionValidatorsValidatorAddrOKBodyValCommission) contextValidateCommission(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Commission); i++ {

		if o.Commission[i] != nil {
			if err := o.Commission[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDistributionValidatorsValidatorAddrOK" + "." + "val_commission" + "." + "commission" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDistributionValidatorsValidatorAddrOK" + "." + "val_commission" + "." + "commission" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDistributionValidatorsValidatorAddrOKBodyValCommission) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDistributionValidatorsValidatorAddrOKBodyValCommission) UnmarshalBinary(b []byte) error {
	var res GetDistributionValidatorsValidatorAddrOKBodyValCommission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetDistributionValidatorsValidatorAddrOKBodyValCommissionCommissionItems0 get distribution validators validator addr o k body val commission commission items0
swagger:model GetDistributionValidatorsValidatorAddrOKBodyValCommissionCommissionItems0
*/
type GetDistributionValidatorsValidatorAddrOKBodyValCommissionCommissionItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this get distribution validators validator addr o k body val commission commission items0
func (o *GetDistributionValidatorsValidatorAddrOKBodyValCommissionCommissionItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get distribution validators validator addr o k body val commission commission items0 based on context it is used
func (o *GetDistributionValidatorsValidatorAddrOKBodyValCommissionCommissionItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetDistributionValidatorsValidatorAddrOKBodyValCommissionCommissionItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDistributionValidatorsValidatorAddrOKBodyValCommissionCommissionItems0) UnmarshalBinary(b []byte) error {
	var res GetDistributionValidatorsValidatorAddrOKBodyValCommissionCommissionItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
