// Code generated by go-swagger; DO NOT EDIT.

package slashing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostSlashingValidatorsValidatorAddrUnjailReader is a Reader for the PostSlashingValidatorsValidatorAddrUnjail structure.
type PostSlashingValidatorsValidatorAddrUnjailReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostSlashingValidatorsValidatorAddrUnjailReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostSlashingValidatorsValidatorAddrUnjailOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostSlashingValidatorsValidatorAddrUnjailBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostSlashingValidatorsValidatorAddrUnjailInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostSlashingValidatorsValidatorAddrUnjailOK creates a PostSlashingValidatorsValidatorAddrUnjailOK with default headers values
func NewPostSlashingValidatorsValidatorAddrUnjailOK() *PostSlashingValidatorsValidatorAddrUnjailOK {
	return &PostSlashingValidatorsValidatorAddrUnjailOK{}
}

/* PostSlashingValidatorsValidatorAddrUnjailOK describes a response with status code 200, with default header values.

Tx was successfully generated
*/
type PostSlashingValidatorsValidatorAddrUnjailOK struct {
	Payload *PostSlashingValidatorsValidatorAddrUnjailOKBody
}

func (o *PostSlashingValidatorsValidatorAddrUnjailOK) Error() string {
	return fmt.Sprintf("[POST /slashing/validators/{validatorAddr}/unjail][%d] postSlashingValidatorsValidatorAddrUnjailOK  %+v", 200, o.Payload)
}
func (o *PostSlashingValidatorsValidatorAddrUnjailOK) GetPayload() *PostSlashingValidatorsValidatorAddrUnjailOKBody {
	return o.Payload
}

func (o *PostSlashingValidatorsValidatorAddrUnjailOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostSlashingValidatorsValidatorAddrUnjailOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSlashingValidatorsValidatorAddrUnjailBadRequest creates a PostSlashingValidatorsValidatorAddrUnjailBadRequest with default headers values
func NewPostSlashingValidatorsValidatorAddrUnjailBadRequest() *PostSlashingValidatorsValidatorAddrUnjailBadRequest {
	return &PostSlashingValidatorsValidatorAddrUnjailBadRequest{}
}

/* PostSlashingValidatorsValidatorAddrUnjailBadRequest describes a response with status code 400, with default header values.

Invalid validator address or base_req
*/
type PostSlashingValidatorsValidatorAddrUnjailBadRequest struct {
}

func (o *PostSlashingValidatorsValidatorAddrUnjailBadRequest) Error() string {
	return fmt.Sprintf("[POST /slashing/validators/{validatorAddr}/unjail][%d] postSlashingValidatorsValidatorAddrUnjailBadRequest ", 400)
}

func (o *PostSlashingValidatorsValidatorAddrUnjailBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostSlashingValidatorsValidatorAddrUnjailInternalServerError creates a PostSlashingValidatorsValidatorAddrUnjailInternalServerError with default headers values
func NewPostSlashingValidatorsValidatorAddrUnjailInternalServerError() *PostSlashingValidatorsValidatorAddrUnjailInternalServerError {
	return &PostSlashingValidatorsValidatorAddrUnjailInternalServerError{}
}

/* PostSlashingValidatorsValidatorAddrUnjailInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostSlashingValidatorsValidatorAddrUnjailInternalServerError struct {
}

func (o *PostSlashingValidatorsValidatorAddrUnjailInternalServerError) Error() string {
	return fmt.Sprintf("[POST /slashing/validators/{validatorAddr}/unjail][%d] postSlashingValidatorsValidatorAddrUnjailInternalServerError ", 500)
}

func (o *PostSlashingValidatorsValidatorAddrUnjailInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostSlashingValidatorsValidatorAddrUnjailBody post slashing validators validator addr unjail body
swagger:model PostSlashingValidatorsValidatorAddrUnjailBody
*/
type PostSlashingValidatorsValidatorAddrUnjailBody struct {

	// base req
	BaseReq *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReq `json:"base_req,omitempty"`
}

// Validate validates this post slashing validators validator addr unjail body
func (o *PostSlashingValidatorsValidatorAddrUnjailBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailBody) validateBaseReq(formats strfmt.Registry) error {
	if swag.IsZero(o.BaseReq) { // not required
		return nil
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UnjailBody" + "." + "base_req")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UnjailBody" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post slashing validators validator addr unjail body based on the context it is used
func (o *PostSlashingValidatorsValidatorAddrUnjailBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBaseReq(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailBody) contextValidateBaseReq(ctx context.Context, formats strfmt.Registry) error {

	if o.BaseReq != nil {
		if err := o.BaseReq.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UnjailBody" + "." + "base_req")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UnjailBody" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailBody) UnmarshalBinary(b []byte) error {
	var res PostSlashingValidatorsValidatorAddrUnjailBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSlashingValidatorsValidatorAddrUnjailOKBody post slashing validators validator addr unjail o k body
swagger:model PostSlashingValidatorsValidatorAddrUnjailOKBody
*/
type PostSlashingValidatorsValidatorAddrUnjailOKBody struct {

	// fee
	Fee *PostSlashingValidatorsValidatorAddrUnjailOKBodyFee `json:"fee,omitempty"`

	// memo
	Memo string `json:"memo,omitempty"`

	// msg
	Msg []string `json:"msg"`

	// signature
	Signature *PostSlashingValidatorsValidatorAddrUnjailOKBodySignature `json:"signature,omitempty"`
}

// Validate validates this post slashing validators validator addr unjail o k body
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailOKBody) validateFee(formats strfmt.Registry) error {
	if swag.IsZero(o.Fee) { // not required
		return nil
	}

	if o.Fee != nil {
		if err := o.Fee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailOKBody) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(o.Signature) { // not required
		return nil
	}

	if o.Signature != nil {
		if err := o.Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post slashing validators validator addr unjail o k body based on the context it is used
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailOKBody) contextValidateFee(ctx context.Context, formats strfmt.Registry) error {

	if o.Fee != nil {
		if err := o.Fee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailOKBody) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if o.Signature != nil {
		if err := o.Signature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBody) UnmarshalBinary(b []byte) error {
	var res PostSlashingValidatorsValidatorAddrUnjailOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSlashingValidatorsValidatorAddrUnjailOKBodyFee post slashing validators validator addr unjail o k body fee
swagger:model PostSlashingValidatorsValidatorAddrUnjailOKBodyFee
*/
type PostSlashingValidatorsValidatorAddrUnjailOKBodyFee struct {

	// amount
	Amount []*PostSlashingValidatorsValidatorAddrUnjailOKBodyFeeAmountItems0 `json:"amount"`

	// gas
	Gas string `json:"gas,omitempty"`
}

// Validate validates this post slashing validators validator addr unjail o k body fee
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodyFee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodyFee) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	for i := 0; i < len(o.Amount); i++ {
		if swag.IsZero(o.Amount[i]) { // not required
			continue
		}

		if o.Amount[i] != nil {
			if err := o.Amount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post slashing validators validator addr unjail o k body fee based on the context it is used
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodyFee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodyFee) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Amount); i++ {

		if o.Amount[i] != nil {
			if err := o.Amount[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodyFee) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodyFee) UnmarshalBinary(b []byte) error {
	var res PostSlashingValidatorsValidatorAddrUnjailOKBodyFee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSlashingValidatorsValidatorAddrUnjailOKBodyFeeAmountItems0 post slashing validators validator addr unjail o k body fee amount items0
swagger:model PostSlashingValidatorsValidatorAddrUnjailOKBodyFeeAmountItems0
*/
type PostSlashingValidatorsValidatorAddrUnjailOKBodyFeeAmountItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this post slashing validators validator addr unjail o k body fee amount items0
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodyFeeAmountItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post slashing validators validator addr unjail o k body fee amount items0 based on context it is used
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodyFeeAmountItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodyFeeAmountItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodyFeeAmountItems0) UnmarshalBinary(b []byte) error {
	var res PostSlashingValidatorsValidatorAddrUnjailOKBodyFeeAmountItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSlashingValidatorsValidatorAddrUnjailOKBodySignature post slashing validators validator addr unjail o k body signature
swagger:model PostSlashingValidatorsValidatorAddrUnjailOKBodySignature
*/
type PostSlashingValidatorsValidatorAddrUnjailOKBodySignature struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// pub key
	PubKey *PostSlashingValidatorsValidatorAddrUnjailOKBodySignaturePubKey `json:"pub_key,omitempty"`

	// sequence
	// Example: 0
	Sequence string `json:"sequence,omitempty"`

	// signature
	// Example: MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
	Signature string `json:"signature,omitempty"`
}

// Validate validates this post slashing validators validator addr unjail o k body signature
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodySignature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePubKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodySignature) validatePubKey(formats strfmt.Registry) error {
	if swag.IsZero(o.PubKey) { // not required
		return nil
	}

	if o.PubKey != nil {
		if err := o.PubKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post slashing validators validator addr unjail o k body signature based on the context it is used
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodySignature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePubKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodySignature) contextValidatePubKey(ctx context.Context, formats strfmt.Registry) error {

	if o.PubKey != nil {
		if err := o.PubKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postSlashingValidatorsValidatorAddrUnjailOK" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodySignature) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodySignature) UnmarshalBinary(b []byte) error {
	var res PostSlashingValidatorsValidatorAddrUnjailOKBodySignature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSlashingValidatorsValidatorAddrUnjailOKBodySignaturePubKey post slashing validators validator addr unjail o k body signature pub key
swagger:model PostSlashingValidatorsValidatorAddrUnjailOKBodySignaturePubKey
*/
type PostSlashingValidatorsValidatorAddrUnjailOKBodySignaturePubKey struct {

	// type
	// Example: tendermint/PubKeySecp256k1
	Type string `json:"type,omitempty"`

	// value
	// Example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
	Value string `json:"value,omitempty"`
}

// Validate validates this post slashing validators validator addr unjail o k body signature pub key
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodySignaturePubKey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post slashing validators validator addr unjail o k body signature pub key based on context it is used
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodySignaturePubKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodySignaturePubKey) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailOKBodySignaturePubKey) UnmarshalBinary(b []byte) error {
	var res PostSlashingValidatorsValidatorAddrUnjailOKBodySignaturePubKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReq post slashing validators validator addr unjail params body base req
swagger:model PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReq
*/
type PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReq struct {

	// fee
	Fee *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFee `json:"fee,omitempty"`

	// memo
	Memo string `json:"memo,omitempty"`

	// msg
	Msg []string `json:"msg"`

	// signature
	Signature *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignature `json:"signature,omitempty"`
}

// Validate validates this post slashing validators validator addr unjail params body base req
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReq) validateFee(formats strfmt.Registry) error {
	if swag.IsZero(o.Fee) { // not required
		return nil
	}

	if o.Fee != nil {
		if err := o.Fee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UnjailBody" + "." + "base_req" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UnjailBody" + "." + "base_req" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReq) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(o.Signature) { // not required
		return nil
	}

	if o.Signature != nil {
		if err := o.Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UnjailBody" + "." + "base_req" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UnjailBody" + "." + "base_req" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post slashing validators validator addr unjail params body base req based on the context it is used
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReq) contextValidateFee(ctx context.Context, formats strfmt.Registry) error {

	if o.Fee != nil {
		if err := o.Fee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UnjailBody" + "." + "base_req" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UnjailBody" + "." + "base_req" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReq) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if o.Signature != nil {
		if err := o.Signature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UnjailBody" + "." + "base_req" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UnjailBody" + "." + "base_req" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReq) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReq) UnmarshalBinary(b []byte) error {
	var res PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFee post slashing validators validator addr unjail params body base req fee
swagger:model PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFee
*/
type PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFee struct {

	// amount
	Amount []*PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFeeAmountItems0 `json:"amount"`

	// gas
	Gas string `json:"gas,omitempty"`
}

// Validate validates this post slashing validators validator addr unjail params body base req fee
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFee) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	for i := 0; i < len(o.Amount); i++ {
		if swag.IsZero(o.Amount[i]) { // not required
			continue
		}

		if o.Amount[i] != nil {
			if err := o.Amount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UnjailBody" + "." + "base_req" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("UnjailBody" + "." + "base_req" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post slashing validators validator addr unjail params body base req fee based on the context it is used
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFee) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Amount); i++ {

		if o.Amount[i] != nil {
			if err := o.Amount[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UnjailBody" + "." + "base_req" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("UnjailBody" + "." + "base_req" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFee) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFee) UnmarshalBinary(b []byte) error {
	var res PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFeeAmountItems0 post slashing validators validator addr unjail params body base req fee amount items0
swagger:model PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFeeAmountItems0
*/
type PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFeeAmountItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this post slashing validators validator addr unjail params body base req fee amount items0
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFeeAmountItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post slashing validators validator addr unjail params body base req fee amount items0 based on context it is used
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFeeAmountItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFeeAmountItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFeeAmountItems0) UnmarshalBinary(b []byte) error {
	var res PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqFeeAmountItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignature post slashing validators validator addr unjail params body base req signature
swagger:model PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignature
*/
type PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignature struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// pub key
	PubKey *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignaturePubKey `json:"pub_key,omitempty"`

	// sequence
	// Example: 0
	Sequence string `json:"sequence,omitempty"`

	// signature
	// Example: MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
	Signature string `json:"signature,omitempty"`
}

// Validate validates this post slashing validators validator addr unjail params body base req signature
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePubKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignature) validatePubKey(formats strfmt.Registry) error {
	if swag.IsZero(o.PubKey) { // not required
		return nil
	}

	if o.PubKey != nil {
		if err := o.PubKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UnjailBody" + "." + "base_req" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UnjailBody" + "." + "base_req" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post slashing validators validator addr unjail params body base req signature based on the context it is used
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePubKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignature) contextValidatePubKey(ctx context.Context, formats strfmt.Registry) error {

	if o.PubKey != nil {
		if err := o.PubKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UnjailBody" + "." + "base_req" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UnjailBody" + "." + "base_req" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignature) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignature) UnmarshalBinary(b []byte) error {
	var res PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignaturePubKey post slashing validators validator addr unjail params body base req signature pub key
swagger:model PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignaturePubKey
*/
type PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignaturePubKey struct {

	// type
	// Example: tendermint/PubKeySecp256k1
	Type string `json:"type,omitempty"`

	// value
	// Example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
	Value string `json:"value,omitempty"`
}

// Validate validates this post slashing validators validator addr unjail params body base req signature pub key
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignaturePubKey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post slashing validators validator addr unjail params body base req signature pub key based on context it is used
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignaturePubKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignaturePubKey) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignaturePubKey) UnmarshalBinary(b []byte) error {
	var res PostSlashingValidatorsValidatorAddrUnjailParamsBodyBaseReqSignaturePubKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
