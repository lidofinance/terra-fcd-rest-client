// Code generated by go-swagger; DO NOT EDIT.

package bank

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostBankAccountsAddressTransfersReader is a Reader for the PostBankAccountsAddressTransfers structure.
type PostBankAccountsAddressTransfersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostBankAccountsAddressTransfersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewPostBankAccountsAddressTransfersAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostBankAccountsAddressTransfersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostBankAccountsAddressTransfersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostBankAccountsAddressTransfersAccepted creates a PostBankAccountsAddressTransfersAccepted with default headers values
func NewPostBankAccountsAddressTransfersAccepted() *PostBankAccountsAddressTransfersAccepted {
	return &PostBankAccountsAddressTransfersAccepted{}
}

/* PostBankAccountsAddressTransfersAccepted describes a response with status code 202, with default header values.

Tx was successfully generated
*/
type PostBankAccountsAddressTransfersAccepted struct {
	Payload *PostBankAccountsAddressTransfersAcceptedBody
}

func (o *PostBankAccountsAddressTransfersAccepted) Error() string {
	return fmt.Sprintf("[POST /bank/accounts/{address}/transfers][%d] postBankAccountsAddressTransfersAccepted  %+v", 202, o.Payload)
}
func (o *PostBankAccountsAddressTransfersAccepted) GetPayload() *PostBankAccountsAddressTransfersAcceptedBody {
	return o.Payload
}

func (o *PostBankAccountsAddressTransfersAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostBankAccountsAddressTransfersAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostBankAccountsAddressTransfersBadRequest creates a PostBankAccountsAddressTransfersBadRequest with default headers values
func NewPostBankAccountsAddressTransfersBadRequest() *PostBankAccountsAddressTransfersBadRequest {
	return &PostBankAccountsAddressTransfersBadRequest{}
}

/* PostBankAccountsAddressTransfersBadRequest describes a response with status code 400, with default header values.

Invalid request
*/
type PostBankAccountsAddressTransfersBadRequest struct {
}

func (o *PostBankAccountsAddressTransfersBadRequest) Error() string {
	return fmt.Sprintf("[POST /bank/accounts/{address}/transfers][%d] postBankAccountsAddressTransfersBadRequest ", 400)
}

func (o *PostBankAccountsAddressTransfersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostBankAccountsAddressTransfersInternalServerError creates a PostBankAccountsAddressTransfersInternalServerError with default headers values
func NewPostBankAccountsAddressTransfersInternalServerError() *PostBankAccountsAddressTransfersInternalServerError {
	return &PostBankAccountsAddressTransfersInternalServerError{}
}

/* PostBankAccountsAddressTransfersInternalServerError describes a response with status code 500, with default header values.

Server internal error
*/
type PostBankAccountsAddressTransfersInternalServerError struct {
}

func (o *PostBankAccountsAddressTransfersInternalServerError) Error() string {
	return fmt.Sprintf("[POST /bank/accounts/{address}/transfers][%d] postBankAccountsAddressTransfersInternalServerError ", 500)
}

func (o *PostBankAccountsAddressTransfersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostBankAccountsAddressTransfersAcceptedBody post bank accounts address transfers accepted body
swagger:model PostBankAccountsAddressTransfersAcceptedBody
*/
type PostBankAccountsAddressTransfersAcceptedBody struct {

	// fee
	Fee *PostBankAccountsAddressTransfersAcceptedBodyFee `json:"fee,omitempty"`

	// memo
	Memo string `json:"memo,omitempty"`

	// msg
	Msg []string `json:"msg"`

	// signature
	Signature *PostBankAccountsAddressTransfersAcceptedBodySignature `json:"signature,omitempty"`
}

// Validate validates this post bank accounts address transfers accepted body
func (o *PostBankAccountsAddressTransfersAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBankAccountsAddressTransfersAcceptedBody) validateFee(formats strfmt.Registry) error {
	if swag.IsZero(o.Fee) { // not required
		return nil
	}

	if o.Fee != nil {
		if err := o.Fee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *PostBankAccountsAddressTransfersAcceptedBody) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(o.Signature) { // not required
		return nil
	}

	if o.Signature != nil {
		if err := o.Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post bank accounts address transfers accepted body based on the context it is used
func (o *PostBankAccountsAddressTransfersAcceptedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBankAccountsAddressTransfersAcceptedBody) contextValidateFee(ctx context.Context, formats strfmt.Registry) error {

	if o.Fee != nil {
		if err := o.Fee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *PostBankAccountsAddressTransfersAcceptedBody) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if o.Signature != nil {
		if err := o.Signature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersAcceptedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersAcceptedBody) UnmarshalBinary(b []byte) error {
	var res PostBankAccountsAddressTransfersAcceptedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostBankAccountsAddressTransfersAcceptedBodyFee post bank accounts address transfers accepted body fee
swagger:model PostBankAccountsAddressTransfersAcceptedBodyFee
*/
type PostBankAccountsAddressTransfersAcceptedBodyFee struct {

	// amount
	Amount []*PostBankAccountsAddressTransfersAcceptedBodyFeeAmountItems0 `json:"amount"`

	// gas
	Gas string `json:"gas,omitempty"`
}

// Validate validates this post bank accounts address transfers accepted body fee
func (o *PostBankAccountsAddressTransfersAcceptedBodyFee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBankAccountsAddressTransfersAcceptedBodyFee) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	for i := 0; i < len(o.Amount); i++ {
		if swag.IsZero(o.Amount[i]) { // not required
			continue
		}

		if o.Amount[i] != nil {
			if err := o.Amount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post bank accounts address transfers accepted body fee based on the context it is used
func (o *PostBankAccountsAddressTransfersAcceptedBodyFee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBankAccountsAddressTransfersAcceptedBodyFee) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Amount); i++ {

		if o.Amount[i] != nil {
			if err := o.Amount[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersAcceptedBodyFee) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersAcceptedBodyFee) UnmarshalBinary(b []byte) error {
	var res PostBankAccountsAddressTransfersAcceptedBodyFee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostBankAccountsAddressTransfersAcceptedBodyFeeAmountItems0 post bank accounts address transfers accepted body fee amount items0
swagger:model PostBankAccountsAddressTransfersAcceptedBodyFeeAmountItems0
*/
type PostBankAccountsAddressTransfersAcceptedBodyFeeAmountItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this post bank accounts address transfers accepted body fee amount items0
func (o *PostBankAccountsAddressTransfersAcceptedBodyFeeAmountItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post bank accounts address transfers accepted body fee amount items0 based on context it is used
func (o *PostBankAccountsAddressTransfersAcceptedBodyFeeAmountItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersAcceptedBodyFeeAmountItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersAcceptedBodyFeeAmountItems0) UnmarshalBinary(b []byte) error {
	var res PostBankAccountsAddressTransfersAcceptedBodyFeeAmountItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostBankAccountsAddressTransfersAcceptedBodySignature post bank accounts address transfers accepted body signature
swagger:model PostBankAccountsAddressTransfersAcceptedBodySignature
*/
type PostBankAccountsAddressTransfersAcceptedBodySignature struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// pub key
	PubKey *PostBankAccountsAddressTransfersAcceptedBodySignaturePubKey `json:"pub_key,omitempty"`

	// sequence
	// Example: 0
	Sequence string `json:"sequence,omitempty"`

	// signature
	// Example: MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
	Signature string `json:"signature,omitempty"`
}

// Validate validates this post bank accounts address transfers accepted body signature
func (o *PostBankAccountsAddressTransfersAcceptedBodySignature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePubKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBankAccountsAddressTransfersAcceptedBodySignature) validatePubKey(formats strfmt.Registry) error {
	if swag.IsZero(o.PubKey) { // not required
		return nil
	}

	if o.PubKey != nil {
		if err := o.PubKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post bank accounts address transfers accepted body signature based on the context it is used
func (o *PostBankAccountsAddressTransfersAcceptedBodySignature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePubKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBankAccountsAddressTransfersAcceptedBodySignature) contextValidatePubKey(ctx context.Context, formats strfmt.Registry) error {

	if o.PubKey != nil {
		if err := o.PubKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postBankAccountsAddressTransfersAccepted" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersAcceptedBodySignature) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersAcceptedBodySignature) UnmarshalBinary(b []byte) error {
	var res PostBankAccountsAddressTransfersAcceptedBodySignature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostBankAccountsAddressTransfersAcceptedBodySignaturePubKey post bank accounts address transfers accepted body signature pub key
swagger:model PostBankAccountsAddressTransfersAcceptedBodySignaturePubKey
*/
type PostBankAccountsAddressTransfersAcceptedBodySignaturePubKey struct {

	// type
	// Example: tendermint/PubKeySecp256k1
	Type string `json:"type,omitempty"`

	// value
	// Example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
	Value string `json:"value,omitempty"`
}

// Validate validates this post bank accounts address transfers accepted body signature pub key
func (o *PostBankAccountsAddressTransfersAcceptedBodySignaturePubKey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post bank accounts address transfers accepted body signature pub key based on context it is used
func (o *PostBankAccountsAddressTransfersAcceptedBodySignaturePubKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersAcceptedBodySignaturePubKey) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersAcceptedBodySignaturePubKey) UnmarshalBinary(b []byte) error {
	var res PostBankAccountsAddressTransfersAcceptedBodySignaturePubKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostBankAccountsAddressTransfersBody post bank accounts address transfers body
swagger:model PostBankAccountsAddressTransfersBody
*/
type PostBankAccountsAddressTransfersBody struct {

	// base req
	BaseReq *PostBankAccountsAddressTransfersParamsBodyBaseReq `json:"base_req,omitempty"`

	// coins
	Coins []*PostBankAccountsAddressTransfersParamsBodyCoinsItems0 `json:"coins"`
}

// Validate validates this post bank accounts address transfers body
func (o *PostBankAccountsAddressTransfersBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCoins(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBankAccountsAddressTransfersBody) validateBaseReq(formats strfmt.Registry) error {
	if swag.IsZero(o.BaseReq) { // not required
		return nil
	}

	if o.BaseReq != nil {
		if err := o.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account" + "." + "base_req")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("account" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

func (o *PostBankAccountsAddressTransfersBody) validateCoins(formats strfmt.Registry) error {
	if swag.IsZero(o.Coins) { // not required
		return nil
	}

	for i := 0; i < len(o.Coins); i++ {
		if swag.IsZero(o.Coins[i]) { // not required
			continue
		}

		if o.Coins[i] != nil {
			if err := o.Coins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("account" + "." + "coins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("account" + "." + "coins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post bank accounts address transfers body based on the context it is used
func (o *PostBankAccountsAddressTransfersBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBaseReq(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCoins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBankAccountsAddressTransfersBody) contextValidateBaseReq(ctx context.Context, formats strfmt.Registry) error {

	if o.BaseReq != nil {
		if err := o.BaseReq.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account" + "." + "base_req")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("account" + "." + "base_req")
			}
			return err
		}
	}

	return nil
}

func (o *PostBankAccountsAddressTransfersBody) contextValidateCoins(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Coins); i++ {

		if o.Coins[i] != nil {
			if err := o.Coins[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("account" + "." + "coins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("account" + "." + "coins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersBody) UnmarshalBinary(b []byte) error {
	var res PostBankAccountsAddressTransfersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostBankAccountsAddressTransfersParamsBodyBaseReq post bank accounts address transfers params body base req
swagger:model PostBankAccountsAddressTransfersParamsBodyBaseReq
*/
type PostBankAccountsAddressTransfersParamsBodyBaseReq struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// chain id
	// Example: Columbus-5
	ChainID string `json:"chain_id,omitempty"`

	// fees
	Fees []*PostBankAccountsAddressTransfersParamsBodyBaseReqFeesItems0 `json:"fees"`

	// Sender address or Keybase name to generate a transaction
	// Example: terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv
	From string `json:"from,omitempty"`

	// gas
	// Example: 200000
	Gas string `json:"gas,omitempty"`

	// gas adjustment
	// Example: 1.2
	GasAdjustment string `json:"gas_adjustment,omitempty"`

	// memo
	// Example: Sent via Terra Station 🚀
	Memo string `json:"memo,omitempty"`

	// sequence
	// Example: 1
	Sequence string `json:"sequence,omitempty"`

	// Estimate gas for a transaction (cannot be used in conjunction with generate_only)
	// Example: false
	Simulate bool `json:"simulate,omitempty"`
}

// Validate validates this post bank accounts address transfers params body base req
func (o *PostBankAccountsAddressTransfersParamsBodyBaseReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFees(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBankAccountsAddressTransfersParamsBodyBaseReq) validateFees(formats strfmt.Registry) error {
	if swag.IsZero(o.Fees) { // not required
		return nil
	}

	for i := 0; i < len(o.Fees); i++ {
		if swag.IsZero(o.Fees[i]) { // not required
			continue
		}

		if o.Fees[i] != nil {
			if err := o.Fees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("account" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("account" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post bank accounts address transfers params body base req based on the context it is used
func (o *PostBankAccountsAddressTransfersParamsBodyBaseReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBankAccountsAddressTransfersParamsBodyBaseReq) contextValidateFees(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Fees); i++ {

		if o.Fees[i] != nil {
			if err := o.Fees[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("account" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("account" + "." + "base_req" + "." + "fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersParamsBodyBaseReq) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersParamsBodyBaseReq) UnmarshalBinary(b []byte) error {
	var res PostBankAccountsAddressTransfersParamsBodyBaseReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostBankAccountsAddressTransfersParamsBodyBaseReqFeesItems0 post bank accounts address transfers params body base req fees items0
swagger:model PostBankAccountsAddressTransfersParamsBodyBaseReqFeesItems0
*/
type PostBankAccountsAddressTransfersParamsBodyBaseReqFeesItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this post bank accounts address transfers params body base req fees items0
func (o *PostBankAccountsAddressTransfersParamsBodyBaseReqFeesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post bank accounts address transfers params body base req fees items0 based on context it is used
func (o *PostBankAccountsAddressTransfersParamsBodyBaseReqFeesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersParamsBodyBaseReqFeesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersParamsBodyBaseReqFeesItems0) UnmarshalBinary(b []byte) error {
	var res PostBankAccountsAddressTransfersParamsBodyBaseReqFeesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostBankAccountsAddressTransfersParamsBodyCoinsItems0 post bank accounts address transfers params body coins items0
swagger:model PostBankAccountsAddressTransfersParamsBodyCoinsItems0
*/
type PostBankAccountsAddressTransfersParamsBodyCoinsItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this post bank accounts address transfers params body coins items0
func (o *PostBankAccountsAddressTransfersParamsBodyCoinsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post bank accounts address transfers params body coins items0 based on context it is used
func (o *PostBankAccountsAddressTransfersParamsBodyCoinsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersParamsBodyCoinsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBankAccountsAddressTransfersParamsBodyCoinsItems0) UnmarshalBinary(b []byte) error {
	var res PostBankAccountsAddressTransfersParamsBodyCoinsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
