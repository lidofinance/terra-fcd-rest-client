// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostTxsEncodeReader is a Reader for the PostTxsEncode structure.
type PostTxsEncodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTxsEncodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostTxsEncodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostTxsEncodeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostTxsEncodeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostTxsEncodeOK creates a PostTxsEncodeOK with default headers values
func NewPostTxsEncodeOK() *PostTxsEncodeOK {
	return &PostTxsEncodeOK{}
}

/* PostTxsEncodeOK describes a response with status code 200, with default header values.

The tx was successfully decoded and re-encoded
*/
type PostTxsEncodeOK struct {
	Payload *PostTxsEncodeOKBody
}

func (o *PostTxsEncodeOK) Error() string {
	return fmt.Sprintf("[POST /txs/encode][%d] postTxsEncodeOK  %+v", 200, o.Payload)
}
func (o *PostTxsEncodeOK) GetPayload() *PostTxsEncodeOKBody {
	return o.Payload
}

func (o *PostTxsEncodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostTxsEncodeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTxsEncodeBadRequest creates a PostTxsEncodeBadRequest with default headers values
func NewPostTxsEncodeBadRequest() *PostTxsEncodeBadRequest {
	return &PostTxsEncodeBadRequest{}
}

/* PostTxsEncodeBadRequest describes a response with status code 400, with default header values.

The tx was malformed
*/
type PostTxsEncodeBadRequest struct {
}

func (o *PostTxsEncodeBadRequest) Error() string {
	return fmt.Sprintf("[POST /txs/encode][%d] postTxsEncodeBadRequest ", 400)
}

func (o *PostTxsEncodeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostTxsEncodeInternalServerError creates a PostTxsEncodeInternalServerError with default headers values
func NewPostTxsEncodeInternalServerError() *PostTxsEncodeInternalServerError {
	return &PostTxsEncodeInternalServerError{}
}

/* PostTxsEncodeInternalServerError describes a response with status code 500, with default header values.

Server internal error
*/
type PostTxsEncodeInternalServerError struct {
}

func (o *PostTxsEncodeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /txs/encode][%d] postTxsEncodeInternalServerError ", 500)
}

func (o *PostTxsEncodeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*PostTxsEncodeBody post txs encode body
swagger:model PostTxsEncodeBody
*/
type PostTxsEncodeBody struct {

	// bech32 encoded address
	// Example: terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv
	FeeGranter string `json:"fee_granter,omitempty"`

	// sequences
	Sequences []string `json:"sequences"`

	// tx
	// Required: true
	Tx *PostTxsEncodeParamsBodyTx `json:"tx"`
}

// Validate validates this post txs encode body
func (o *PostTxsEncodeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTxsEncodeBody) validateTx(formats strfmt.Registry) error {

	if err := validate.Required("tx"+"."+"tx", "body", o.Tx); err != nil {
		return err
	}

	if o.Tx != nil {
		if err := o.Tx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "tx")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post txs encode body based on the context it is used
func (o *PostTxsEncodeBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTxsEncodeBody) contextValidateTx(ctx context.Context, formats strfmt.Registry) error {

	if o.Tx != nil {
		if err := o.Tx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "tx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTxsEncodeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTxsEncodeBody) UnmarshalBinary(b []byte) error {
	var res PostTxsEncodeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostTxsEncodeOKBody post txs encode o k body
swagger:model PostTxsEncodeOKBody
*/
type PostTxsEncodeOKBody struct {

	// tx
	// Example: The base64-encoded Proto-serialized bytes for the tx
	Tx string `json:"tx,omitempty"`
}

// Validate validates this post txs encode o k body
func (o *PostTxsEncodeOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post txs encode o k body based on context it is used
func (o *PostTxsEncodeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTxsEncodeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTxsEncodeOKBody) UnmarshalBinary(b []byte) error {
	var res PostTxsEncodeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostTxsEncodeParamsBodyTx post txs encode params body tx
swagger:model PostTxsEncodeParamsBodyTx
*/
type PostTxsEncodeParamsBodyTx struct {

	// fee
	Fee *PostTxsEncodeParamsBodyTxFee `json:"fee,omitempty"`

	// memo
	Memo string `json:"memo,omitempty"`

	// msg
	Msg []string `json:"msg"`

	// signature
	Signature *PostTxsEncodeParamsBodyTxSignature `json:"signature,omitempty"`
}

// Validate validates this post txs encode params body tx
func (o *PostTxsEncodeParamsBodyTx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTxsEncodeParamsBodyTx) validateFee(formats strfmt.Registry) error {
	if swag.IsZero(o.Fee) { // not required
		return nil
	}

	if o.Fee != nil {
		if err := o.Fee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "tx" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "tx" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *PostTxsEncodeParamsBodyTx) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(o.Signature) { // not required
		return nil
	}

	if o.Signature != nil {
		if err := o.Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "tx" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "tx" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post txs encode params body tx based on the context it is used
func (o *PostTxsEncodeParamsBodyTx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTxsEncodeParamsBodyTx) contextValidateFee(ctx context.Context, formats strfmt.Registry) error {

	if o.Fee != nil {
		if err := o.Fee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "tx" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "tx" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *PostTxsEncodeParamsBodyTx) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if o.Signature != nil {
		if err := o.Signature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "tx" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "tx" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTxsEncodeParamsBodyTx) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTxsEncodeParamsBodyTx) UnmarshalBinary(b []byte) error {
	var res PostTxsEncodeParamsBodyTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostTxsEncodeParamsBodyTxFee post txs encode params body tx fee
swagger:model PostTxsEncodeParamsBodyTxFee
*/
type PostTxsEncodeParamsBodyTxFee struct {

	// amount
	Amount []*PostTxsEncodeParamsBodyTxFeeAmountItems0 `json:"amount"`

	// gas
	Gas string `json:"gas,omitempty"`
}

// Validate validates this post txs encode params body tx fee
func (o *PostTxsEncodeParamsBodyTxFee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTxsEncodeParamsBodyTxFee) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	for i := 0; i < len(o.Amount); i++ {
		if swag.IsZero(o.Amount[i]) { // not required
			continue
		}

		if o.Amount[i] != nil {
			if err := o.Amount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tx" + "." + "tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tx" + "." + "tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post txs encode params body tx fee based on the context it is used
func (o *PostTxsEncodeParamsBodyTxFee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTxsEncodeParamsBodyTxFee) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Amount); i++ {

		if o.Amount[i] != nil {
			if err := o.Amount[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tx" + "." + "tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tx" + "." + "tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTxsEncodeParamsBodyTxFee) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTxsEncodeParamsBodyTxFee) UnmarshalBinary(b []byte) error {
	var res PostTxsEncodeParamsBodyTxFee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostTxsEncodeParamsBodyTxFeeAmountItems0 post txs encode params body tx fee amount items0
swagger:model PostTxsEncodeParamsBodyTxFeeAmountItems0
*/
type PostTxsEncodeParamsBodyTxFeeAmountItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this post txs encode params body tx fee amount items0
func (o *PostTxsEncodeParamsBodyTxFeeAmountItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post txs encode params body tx fee amount items0 based on context it is used
func (o *PostTxsEncodeParamsBodyTxFeeAmountItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTxsEncodeParamsBodyTxFeeAmountItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTxsEncodeParamsBodyTxFeeAmountItems0) UnmarshalBinary(b []byte) error {
	var res PostTxsEncodeParamsBodyTxFeeAmountItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostTxsEncodeParamsBodyTxSignature post txs encode params body tx signature
swagger:model PostTxsEncodeParamsBodyTxSignature
*/
type PostTxsEncodeParamsBodyTxSignature struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// pub key
	PubKey *PostTxsEncodeParamsBodyTxSignaturePubKey `json:"pub_key,omitempty"`

	// sequence
	// Example: 0
	Sequence string `json:"sequence,omitempty"`

	// signature
	// Example: MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
	Signature string `json:"signature,omitempty"`
}

// Validate validates this post txs encode params body tx signature
func (o *PostTxsEncodeParamsBodyTxSignature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePubKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTxsEncodeParamsBodyTxSignature) validatePubKey(formats strfmt.Registry) error {
	if swag.IsZero(o.PubKey) { // not required
		return nil
	}

	if o.PubKey != nil {
		if err := o.PubKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "tx" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "tx" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post txs encode params body tx signature based on the context it is used
func (o *PostTxsEncodeParamsBodyTxSignature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePubKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTxsEncodeParamsBodyTxSignature) contextValidatePubKey(ctx context.Context, formats strfmt.Registry) error {

	if o.PubKey != nil {
		if err := o.PubKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "tx" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "tx" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTxsEncodeParamsBodyTxSignature) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTxsEncodeParamsBodyTxSignature) UnmarshalBinary(b []byte) error {
	var res PostTxsEncodeParamsBodyTxSignature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostTxsEncodeParamsBodyTxSignaturePubKey post txs encode params body tx signature pub key
swagger:model PostTxsEncodeParamsBodyTxSignaturePubKey
*/
type PostTxsEncodeParamsBodyTxSignaturePubKey struct {

	// type
	// Example: tendermint/PubKeySecp256k1
	Type string `json:"type,omitempty"`

	// value
	// Example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
	Value string `json:"value,omitempty"`
}

// Validate validates this post txs encode params body tx signature pub key
func (o *PostTxsEncodeParamsBodyTxSignaturePubKey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post txs encode params body tx signature pub key based on context it is used
func (o *PostTxsEncodeParamsBodyTxSignaturePubKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTxsEncodeParamsBodyTxSignaturePubKey) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTxsEncodeParamsBodyTxSignaturePubKey) UnmarshalBinary(b []byte) error {
	var res PostTxsEncodeParamsBodyTxSignaturePubKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
