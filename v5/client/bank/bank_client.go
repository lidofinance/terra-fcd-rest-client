// Code generated by go-swagger; DO NOT EDIT.

package bank

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new bank API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bank API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetBankBalancesAddress(params *GetBankBalancesAddressParams, opts ...ClientOption) (*GetBankBalancesAddressOK, error)

	GetBankTotal(params *GetBankTotalParams, opts ...ClientOption) (*GetBankTotalOK, error)

	GetBankTotalDenomination(params *GetBankTotalDenominationParams, opts ...ClientOption) (*GetBankTotalDenominationOK, error)

	GetV1BankAccount(params *GetV1BankAccountParams, opts ...ClientOption) (*GetV1BankAccountOK, error)

	PostBankAccountsAddressTransfers(params *PostBankAccountsAddressTransfersParams, opts ...ClientOption) (*PostBankAccountsAddressTransfersAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetBankBalancesAddress gets the account balances
*/
func (a *Client) GetBankBalancesAddress(params *GetBankBalancesAddressParams, opts ...ClientOption) (*GetBankBalancesAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBankBalancesAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBankBalancesAddress",
		Method:             "GET",
		PathPattern:        "/bank/balances/{address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBankBalancesAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBankBalancesAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBankBalancesAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBankTotal totals supply of coins in the chain
*/
func (a *Client) GetBankTotal(params *GetBankTotalParams, opts ...ClientOption) (*GetBankTotalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBankTotalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBankTotal",
		Method:             "GET",
		PathPattern:        "/bank/total",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBankTotalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBankTotalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBankTotal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBankTotalDenomination totals supply of a single coin denomination
*/
func (a *Client) GetBankTotalDenomination(params *GetBankTotalDenominationParams, opts ...ClientOption) (*GetBankTotalDenominationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBankTotalDenominationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBankTotalDenomination",
		Method:             "GET",
		PathPattern:        "/bank/total/{denomination}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBankTotalDenominationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBankTotalDenominationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBankTotalDenomination: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetV1BankAccount gets account information

  Get account information
*/
func (a *Client) GetV1BankAccount(params *GetV1BankAccountParams, opts ...ClientOption) (*GetV1BankAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1BankAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1BankAccount",
		Method:             "GET",
		PathPattern:        "/v1/bank/{account}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1BankAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1BankAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1BankAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostBankAccountsAddressTransfers sends coins from one account to another
*/
func (a *Client) PostBankAccountsAddressTransfers(params *PostBankAccountsAddressTransfersParams, opts ...ClientOption) (*PostBankAccountsAddressTransfersAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBankAccountsAddressTransfersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostBankAccountsAddressTransfers",
		Method:             "POST",
		PathPattern:        "/bank/accounts/{address}/transfers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBankAccountsAddressTransfersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostBankAccountsAddressTransfersAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostBankAccountsAddressTransfers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
