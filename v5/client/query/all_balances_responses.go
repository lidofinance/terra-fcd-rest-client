// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AllBalancesReader is a Reader for the AllBalances structure.
type AllBalancesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllBalancesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAllBalancesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAllBalancesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAllBalancesOK creates a AllBalancesOK with default headers values
func NewAllBalancesOK() *AllBalancesOK {
	return &AllBalancesOK{}
}

/* AllBalancesOK describes a response with status code 200, with default header values.

A successful response.
*/
type AllBalancesOK struct {
	Payload *AllBalancesOKBody
}

func (o *AllBalancesOK) Error() string {
	return fmt.Sprintf("[GET /cosmos/bank/v1beta1/balances/{address}][%d] allBalancesOK  %+v", 200, o.Payload)
}
func (o *AllBalancesOK) GetPayload() *AllBalancesOKBody {
	return o.Payload
}

func (o *AllBalancesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AllBalancesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllBalancesDefault creates a AllBalancesDefault with default headers values
func NewAllBalancesDefault(code int) *AllBalancesDefault {
	return &AllBalancesDefault{
		_statusCode: code,
	}
}

/* AllBalancesDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type AllBalancesDefault struct {
	_statusCode int

	Payload *AllBalancesDefaultBody
}

// Code gets the status code for the all balances default response
func (o *AllBalancesDefault) Code() int {
	return o._statusCode
}

func (o *AllBalancesDefault) Error() string {
	return fmt.Sprintf("[GET /cosmos/bank/v1beta1/balances/{address}][%d] AllBalances default  %+v", o._statusCode, o.Payload)
}
func (o *AllBalancesDefault) GetPayload() *AllBalancesDefaultBody {
	return o.Payload
}

func (o *AllBalancesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AllBalancesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AllBalancesDefaultBody all balances default body
swagger:model AllBalancesDefaultBody
*/
type AllBalancesDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*AllBalancesDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this all balances default body
func (o *AllBalancesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AllBalancesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AllBalances default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AllBalances default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this all balances default body based on the context it is used
func (o *AllBalancesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AllBalancesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AllBalances default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AllBalances default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AllBalancesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AllBalancesDefaultBody) UnmarshalBinary(b []byte) error {
	var res AllBalancesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AllBalancesDefaultBodyDetailsItems0 all balances default body details items0
swagger:model AllBalancesDefaultBodyDetailsItems0
*/
type AllBalancesDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this all balances default body details items0
func (o *AllBalancesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this all balances default body details items0 based on context it is used
func (o *AllBalancesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AllBalancesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AllBalancesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res AllBalancesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AllBalancesOKBody QueryAllBalancesResponse is the response type for the Query/AllBalances RPC
// method.
swagger:model AllBalancesOKBody
*/
type AllBalancesOKBody struct {

	// balances is the balances of all the coins.
	Balances []*AllBalancesOKBodyBalancesItems0 `json:"balances"`

	// pagination
	Pagination *AllBalancesOKBodyPagination `json:"pagination,omitempty"`
}

// Validate validates this all balances o k body
func (o *AllBalancesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBalances(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AllBalancesOKBody) validateBalances(formats strfmt.Registry) error {
	if swag.IsZero(o.Balances) { // not required
		return nil
	}

	for i := 0; i < len(o.Balances); i++ {
		if swag.IsZero(o.Balances[i]) { // not required
			continue
		}

		if o.Balances[i] != nil {
			if err := o.Balances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allBalancesOK" + "." + "balances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("allBalancesOK" + "." + "balances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *AllBalancesOKBody) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allBalancesOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allBalancesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this all balances o k body based on the context it is used
func (o *AllBalancesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateBalances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AllBalancesOKBody) contextValidateBalances(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Balances); i++ {

		if o.Balances[i] != nil {
			if err := o.Balances[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allBalancesOK" + "." + "balances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("allBalancesOK" + "." + "balances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *AllBalancesOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {
		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allBalancesOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allBalancesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AllBalancesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AllBalancesOKBody) UnmarshalBinary(b []byte) error {
	var res AllBalancesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AllBalancesOKBodyBalancesItems0 Coin defines a token with a denomination and an amount.
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
swagger:model AllBalancesOKBodyBalancesItems0
*/
type AllBalancesOKBodyBalancesItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this all balances o k body balances items0
func (o *AllBalancesOKBodyBalancesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this all balances o k body balances items0 based on context it is used
func (o *AllBalancesOKBodyBalancesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AllBalancesOKBodyBalancesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AllBalancesOKBodyBalancesItems0) UnmarshalBinary(b []byte) error {
	var res AllBalancesOKBodyBalancesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AllBalancesOKBodyPagination pagination defines the pagination in the response.
swagger:model AllBalancesOKBodyPagination
*/
type AllBalancesOKBodyPagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this all balances o k body pagination
func (o *AllBalancesOKBodyPagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this all balances o k body pagination based on context it is used
func (o *AllBalancesOKBodyPagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AllBalancesOKBodyPagination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AllBalancesOKBodyPagination) UnmarshalBinary(b []byte) error {
	var res AllBalancesOKBodyPagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
