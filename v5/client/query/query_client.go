// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new query API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for query API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Account(params *AccountParams, opts ...ClientOption) (*AccountOK, error)

	Accounts(params *AccountsParams, opts ...ClientOption) (*AccountsOK, error)

	Actives(params *ActivesParams, opts ...ClientOption) (*ActivesOK, error)

	AggregatePrevote(params *AggregatePrevoteParams, opts ...ClientOption) (*AggregatePrevoteOK, error)

	AggregatePrevotes(params *AggregatePrevotesParams, opts ...ClientOption) (*AggregatePrevotesOK, error)

	AggregateVote(params *AggregateVoteParams, opts ...ClientOption) (*AggregateVoteOK, error)

	AggregateVotes(params *AggregateVotesParams, opts ...ClientOption) (*AggregateVotesOK, error)

	AllBalances(params *AllBalancesParams, opts ...ClientOption) (*AllBalancesOK, error)

	AllEvidence(params *AllEvidenceParams, opts ...ClientOption) (*AllEvidenceOK, error)

	Allowance(params *AllowanceParams, opts ...ClientOption) (*AllowanceOK, error)

	Allowances(params *AllowancesParams, opts ...ClientOption) (*AllowancesOK, error)

	AnnualProvisions(params *AnnualProvisionsParams, opts ...ClientOption) (*AnnualProvisionsOK, error)

	AppliedPlan(params *AppliedPlanParams, opts ...ClientOption) (*AppliedPlanOK, error)

	AuthParams(params *AuthParamsParams, opts ...ClientOption) (*AuthParamsOK, error)

	Balance(params *BalanceParams, opts ...ClientOption) (*BalanceOK, error)

	BankParams(params *BankParamsParams, opts ...ClientOption) (*BankParamsOK, error)

	ByteCode(params *ByteCodeParams, opts ...ClientOption) (*ByteCodeOK, error)

	Channel(params *ChannelParams, opts ...ClientOption) (*ChannelOK, error)

	ChannelClientState(params *ChannelClientStateParams, opts ...ClientOption) (*ChannelClientStateOK, error)

	ChannelConsensusState(params *ChannelConsensusStateParams, opts ...ClientOption) (*ChannelConsensusStateOK, error)

	Channels(params *ChannelsParams, opts ...ClientOption) (*ChannelsOK, error)

	ClientConnections(params *ClientConnectionsParams, opts ...ClientOption) (*ClientConnectionsOK, error)

	ClientParams(params *ClientParamsParams, opts ...ClientOption) (*ClientParamsOK, error)

	ClientState(params *ClientStateParams, opts ...ClientOption) (*ClientStateOK, error)

	ClientStates(params *ClientStatesParams, opts ...ClientOption) (*ClientStatesOK, error)

	ClientStatus(params *ClientStatusParams, opts ...ClientOption) (*ClientStatusOK, error)

	CodeInfo(params *CodeInfoParams, opts ...ClientOption) (*CodeInfoOK, error)

	CommunityPool(params *CommunityPoolParams, opts ...ClientOption) (*CommunityPoolOK, error)

	Connection(params *ConnectionParams, opts ...ClientOption) (*ConnectionOK, error)

	ConnectionChannels(params *ConnectionChannelsParams, opts ...ClientOption) (*ConnectionChannelsOK, error)

	ConnectionClientState(params *ConnectionClientStateParams, opts ...ClientOption) (*ConnectionClientStateOK, error)

	ConnectionConsensusState(params *ConnectionConsensusStateParams, opts ...ClientOption) (*ConnectionConsensusStateOK, error)

	Connections(params *ConnectionsParams, opts ...ClientOption) (*ConnectionsOK, error)

	ConsensusState(params *ConsensusStateParams, opts ...ClientOption) (*ConsensusStateOK, error)

	ConsensusStates(params *ConsensusStatesParams, opts ...ClientOption) (*ConsensusStatesOK, error)

	ContractInfo(params *ContractInfoParams, opts ...ClientOption) (*ContractInfoOK, error)

	ContractStore(params *ContractStoreParams, opts ...ClientOption) (*ContractStoreOK, error)

	CurrentPlan(params *CurrentPlanParams, opts ...ClientOption) (*CurrentPlanOK, error)

	Delegation(params *DelegationParams, opts ...ClientOption) (*DelegationOK, error)

	DelegationRewards(params *DelegationRewardsParams, opts ...ClientOption) (*DelegationRewardsOK, error)

	DelegationTotalRewards(params *DelegationTotalRewardsParams, opts ...ClientOption) (*DelegationTotalRewardsOK, error)

	DelegatorDelegations(params *DelegatorDelegationsParams, opts ...ClientOption) (*DelegatorDelegationsOK, error)

	DelegatorUnbondingDelegations(params *DelegatorUnbondingDelegationsParams, opts ...ClientOption) (*DelegatorUnbondingDelegationsOK, error)

	DelegatorValidator(params *DelegatorValidatorParams, opts ...ClientOption) (*DelegatorValidatorOK, error)

	DelegatorValidators(params *DelegatorValidatorsParams, opts ...ClientOption) (*DelegatorValidatorsOK, error)

	DelegatorWithdrawAddress(params *DelegatorWithdrawAddressParams, opts ...ClientOption) (*DelegatorWithdrawAddressOK, error)

	DenomMetadata(params *DenomMetadataParams, opts ...ClientOption) (*DenomMetadataOK, error)

	DenomTrace(params *DenomTraceParams, opts ...ClientOption) (*DenomTraceOK, error)

	DenomTraces(params *DenomTracesParams, opts ...ClientOption) (*DenomTracesOK, error)

	DenomsMetadata(params *DenomsMetadataParams, opts ...ClientOption) (*DenomsMetadataOK, error)

	Deposit(params *DepositParams, opts ...ClientOption) (*DepositOK, error)

	Deposits(params *DepositsParams, opts ...ClientOption) (*DepositsOK, error)

	DistributionParams(params *DistributionParamsParams, opts ...ClientOption) (*DistributionParamsOK, error)

	Evidence(params *EvidenceParams, opts ...ClientOption) (*EvidenceOK, error)

	ExchangeRate(params *ExchangeRateParams, opts ...ClientOption) (*ExchangeRateOK, error)

	ExchangeRates(params *ExchangeRatesParams, opts ...ClientOption) (*ExchangeRatesOK, error)

	FeederDelegation(params *FeederDelegationParams, opts ...ClientOption) (*FeederDelegationOK, error)

	GovParams(params *GovParamsParams, opts ...ClientOption) (*GovParamsOK, error)

	Grants(params *GrantsParams, opts ...ClientOption) (*GrantsOK, error)

	HistoricalInfo(params *HistoricalInfoParams, opts ...ClientOption) (*HistoricalInfoOK, error)

	IBCTransferParams(params *IBCTransferParamsParams, opts ...ClientOption) (*IBCTransferParamsOK, error)

	IBCUpgradedConsensusState(params *IBCUpgradedConsensusStateParams, opts ...ClientOption) (*IBCUpgradedConsensusStateOK, error)

	Indicators(params *IndicatorsParams, opts ...ClientOption) (*IndicatorsOK, error)

	Inflation(params *InflationParams, opts ...ClientOption) (*InflationOK, error)

	MarketParams(params *MarketParamsParams, opts ...ClientOption) (*MarketParamsOK, error)

	MintParams(params *MintParamsParams, opts ...ClientOption) (*MintParamsOK, error)

	MissCounter(params *MissCounterParams, opts ...ClientOption) (*MissCounterOK, error)

	ModuleVersions(params *ModuleVersionsParams, opts ...ClientOption) (*ModuleVersionsOK, error)

	NextSequenceReceive(params *NextSequenceReceiveParams, opts ...ClientOption) (*NextSequenceReceiveOK, error)

	OracleParams(params *OracleParamsParams, opts ...ClientOption) (*OracleParamsOK, error)

	PacketAcknowledgement(params *PacketAcknowledgementParams, opts ...ClientOption) (*PacketAcknowledgementOK, error)

	PacketAcknowledgements(params *PacketAcknowledgementsParams, opts ...ClientOption) (*PacketAcknowledgementsOK, error)

	PacketCommitment(params *PacketCommitmentParams, opts ...ClientOption) (*PacketCommitmentOK, error)

	PacketCommitments(params *PacketCommitmentsParams, opts ...ClientOption) (*PacketCommitmentsOK, error)

	PacketReceipt(params *PacketReceiptParams, opts ...ClientOption) (*PacketReceiptOK, error)

	Params(params *ParamsParams, opts ...ClientOption) (*ParamsOK, error)

	Pool(params *PoolParams, opts ...ClientOption) (*PoolOK, error)

	Proposal(params *ProposalParams, opts ...ClientOption) (*ProposalOK, error)

	Proposals(params *ProposalsParams, opts ...ClientOption) (*ProposalsOK, error)

	RawStore(params *RawStoreParams, opts ...ClientOption) (*RawStoreOK, error)

	Redelegations(params *RedelegationsParams, opts ...ClientOption) (*RedelegationsOK, error)

	RewardWeight(params *RewardWeightParams, opts ...ClientOption) (*RewardWeightOK, error)

	SeigniorageProceeds(params *SeigniorageProceedsParams, opts ...ClientOption) (*SeigniorageProceedsOK, error)

	SigningInfo(params *SigningInfoParams, opts ...ClientOption) (*SigningInfoOK, error)

	SigningInfos(params *SigningInfosParams, opts ...ClientOption) (*SigningInfosOK, error)

	SlashingParams(params *SlashingParamsParams, opts ...ClientOption) (*SlashingParamsOK, error)

	StakingDelegatorValidators(params *StakingDelegatorValidatorsParams, opts ...ClientOption) (*StakingDelegatorValidatorsOK, error)

	StakingParams(params *StakingParamsParams, opts ...ClientOption) (*StakingParamsOK, error)

	SupplyOf(params *SupplyOfParams, opts ...ClientOption) (*SupplyOfOK, error)

	Swap(params *SwapParams, opts ...ClientOption) (*SwapOK, error)

	TallyResult(params *TallyResultParams, opts ...ClientOption) (*TallyResultOK, error)

	TaxCap(params *TaxCapParams, opts ...ClientOption) (*TaxCapOK, error)

	TaxCaps(params *TaxCapsParams, opts ...ClientOption) (*TaxCapsOK, error)

	TaxProceeds(params *TaxProceedsParams, opts ...ClientOption) (*TaxProceedsOK, error)

	TaxRate(params *TaxRateParams, opts ...ClientOption) (*TaxRateOK, error)

	TerraPoolDelta(params *TerraPoolDeltaParams, opts ...ClientOption) (*TerraPoolDeltaOK, error)

	TobinTax(params *TobinTaxParams, opts ...ClientOption) (*TobinTaxOK, error)

	TobinTaxes(params *TobinTaxesParams, opts ...ClientOption) (*TobinTaxesOK, error)

	TotalSupply(params *TotalSupplyParams, opts ...ClientOption) (*TotalSupplyOK, error)

	TreasuryParams(params *TreasuryParamsParams, opts ...ClientOption) (*TreasuryParamsOK, error)

	UnbondingDelegation(params *UnbondingDelegationParams, opts ...ClientOption) (*UnbondingDelegationOK, error)

	UnreceivedAcks(params *UnreceivedAcksParams, opts ...ClientOption) (*UnreceivedAcksOK, error)

	UnreceivedPackets(params *UnreceivedPacketsParams, opts ...ClientOption) (*UnreceivedPacketsOK, error)

	UpgradedClientState(params *UpgradedClientStateParams, opts ...ClientOption) (*UpgradedClientStateOK, error)

	UpgradedConsensusState(params *UpgradedConsensusStateParams, opts ...ClientOption) (*UpgradedConsensusStateOK, error)

	Validator(params *ValidatorParams, opts ...ClientOption) (*ValidatorOK, error)

	ValidatorCommission(params *ValidatorCommissionParams, opts ...ClientOption) (*ValidatorCommissionOK, error)

	ValidatorDelegations(params *ValidatorDelegationsParams, opts ...ClientOption) (*ValidatorDelegationsOK, error)

	ValidatorOutstandingRewards(params *ValidatorOutstandingRewardsParams, opts ...ClientOption) (*ValidatorOutstandingRewardsOK, error)

	ValidatorSlashes(params *ValidatorSlashesParams, opts ...ClientOption) (*ValidatorSlashesOK, error)

	ValidatorUnbondingDelegations(params *ValidatorUnbondingDelegationsParams, opts ...ClientOption) (*ValidatorUnbondingDelegationsOK, error)

	Validators(params *ValidatorsParams, opts ...ClientOption) (*ValidatorsOK, error)

	Vote(params *VoteParams, opts ...ClientOption) (*VoteOK, error)

	VoteTargets(params *VoteTargetsParams, opts ...ClientOption) (*VoteTargetsOK, error)

	Votes(params *VotesParams, opts ...ClientOption) (*VotesOK, error)

	WasmParams(params *WasmParamsParams, opts ...ClientOption) (*WasmParamsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Account accounts returns account details based on address
*/
func (a *Client) Account(params *AccountParams, opts ...ClientOption) (*AccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Account",
		Method:             "GET",
		PathPattern:        "/cosmos/auth/v1beta1/accounts/{address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Accounts accounts returns all the existing accounts
*/
func (a *Client) Accounts(params *AccountsParams, opts ...ClientOption) (*AccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Accounts",
		Method:             "GET",
		PathPattern:        "/cosmos/auth/v1beta1/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Actives actives returns all active denoms
*/
func (a *Client) Actives(params *ActivesParams, opts ...ClientOption) (*ActivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Actives",
		Method:             "GET",
		PathPattern:        "/terra/oracle/v1beta1/denoms/actives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ActivesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActivesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AggregatePrevote aggregates prevote returns an aggregate prevote of a validator
*/
func (a *Client) AggregatePrevote(params *AggregatePrevoteParams, opts ...ClientOption) (*AggregatePrevoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregatePrevoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregatePrevote",
		Method:             "GET",
		PathPattern:        "/terra/oracle/v1beta1/validators/{validator_addr}/aggregate_prevote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AggregatePrevoteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregatePrevoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AggregatePrevoteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AggregatePrevotes aggregates prevotes returns aggregate prevotes of all validators
*/
func (a *Client) AggregatePrevotes(params *AggregatePrevotesParams, opts ...ClientOption) (*AggregatePrevotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregatePrevotesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregatePrevotes",
		Method:             "GET",
		PathPattern:        "/terra/oracle/v1beta1/validators/aggregate_prevotes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AggregatePrevotesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregatePrevotesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AggregatePrevotesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AggregateVote aggregates vote returns an aggregate vote of a validator
*/
func (a *Client) AggregateVote(params *AggregateVoteParams, opts ...ClientOption) (*AggregateVoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregateVoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregateVote",
		Method:             "GET",
		PathPattern:        "/terra/oracle/v1beta1/valdiators/{validator_addr}/aggregate_vote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AggregateVoteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregateVoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AggregateVoteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AggregateVotes aggregates votes returns aggregate votes of all validators
*/
func (a *Client) AggregateVotes(params *AggregateVotesParams, opts ...ClientOption) (*AggregateVotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAggregateVotesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AggregateVotes",
		Method:             "GET",
		PathPattern:        "/terra/oracle/v1beta1/validators/aggregate_votes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AggregateVotesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AggregateVotesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AggregateVotesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AllBalances alls balances queries the balance of all coins for a single account
*/
func (a *Client) AllBalances(params *AllBalancesParams, opts ...ClientOption) (*AllBalancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllBalancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AllBalances",
		Method:             "GET",
		PathPattern:        "/cosmos/bank/v1beta1/balances/{address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllBalancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllBalancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AllBalancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AllEvidence alls evidence queries all evidence
*/
func (a *Client) AllEvidence(params *AllEvidenceParams, opts ...ClientOption) (*AllEvidenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllEvidenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AllEvidence",
		Method:             "GET",
		PathPattern:        "/cosmos/evidence/v1beta1/evidence",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllEvidenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllEvidenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AllEvidenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Allowance allowances returns fee granted to the grantee by the granter
*/
func (a *Client) Allowance(params *AllowanceParams, opts ...ClientOption) (*AllowanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllowanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Allowance",
		Method:             "GET",
		PathPattern:        "/cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllowanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllowanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AllowanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Allowances allowances returns all the grants for address
*/
func (a *Client) Allowances(params *AllowancesParams, opts ...ClientOption) (*AllowancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllowancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Allowances",
		Method:             "GET",
		PathPattern:        "/cosmos/feegrant/v1beta1/allowances/{grantee}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllowancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllowancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AllowancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AnnualProvisions annuals provisions current minting annual provisions value
*/
func (a *Client) AnnualProvisions(params *AnnualProvisionsParams, opts ...ClientOption) (*AnnualProvisionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnnualProvisionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AnnualProvisions",
		Method:             "GET",
		PathPattern:        "/cosmos/mint/v1beta1/annual_provisions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AnnualProvisionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnnualProvisionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AnnualProvisionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AppliedPlan applieds plan queries a previously applied upgrade plan by its name
*/
func (a *Client) AppliedPlan(params *AppliedPlanParams, opts ...ClientOption) (*AppliedPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppliedPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppliedPlan",
		Method:             "GET",
		PathPattern:        "/cosmos/upgrade/v1beta1/applied_plan/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AppliedPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppliedPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppliedPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AuthParams params queries all parameters
*/
func (a *Client) AuthParams(params *AuthParamsParams, opts ...ClientOption) (*AuthParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AuthParams",
		Method:             "GET",
		PathPattern:        "/cosmos/auth/v1beta1/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuthParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuthParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AuthParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Balance balances queries the balance of a single coin for a single account
*/
func (a *Client) Balance(params *BalanceParams, opts ...ClientOption) (*BalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBalanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Balance",
		Method:             "GET",
		PathPattern:        "/cosmos/bank/v1beta1/balances/{address}/{denom}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BalanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BalanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BalanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  BankParams params queries the parameters of x bank module
*/
func (a *Client) BankParams(params *BankParamsParams, opts ...ClientOption) (*BankParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBankParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BankParams",
		Method:             "GET",
		PathPattern:        "/cosmos/bank/v1beta1/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BankParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BankParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BankParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ByteCode bytes code returns the stored byte code
*/
func (a *Client) ByteCode(params *ByteCodeParams, opts ...ClientOption) (*ByteCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewByteCodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ByteCode",
		Method:             "GET",
		PathPattern:        "/terra/wasm/v1beta1/codes/{code_id}/byte_code",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ByteCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ByteCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ByteCodeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Channel channels queries an i b c channel
*/
func (a *Client) Channel(params *ChannelParams, opts ...ClientOption) (*ChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChannelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Channel",
		Method:             "GET",
		PathPattern:        "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChannelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChannelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChannelDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ChannelClientState channels client state queries for the client state for the channel associated with the provided channel identifiers
*/
func (a *Client) ChannelClientState(params *ChannelClientStateParams, opts ...ClientOption) (*ChannelClientStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChannelClientStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ChannelClientState",
		Method:             "GET",
		PathPattern:        "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/client_state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChannelClientStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChannelClientStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChannelClientStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ChannelConsensusState channels consensus state queries for the consensus state for the channel associated with the provided channel identifiers
*/
func (a *Client) ChannelConsensusState(params *ChannelConsensusStateParams, opts ...ClientOption) (*ChannelConsensusStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChannelConsensusStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ChannelConsensusState",
		Method:             "GET",
		PathPattern:        "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/consensus_state/revision/{revision_number}/height/{revision_height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChannelConsensusStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChannelConsensusStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChannelConsensusStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Channels channels queries all the i b c channels of a chain
*/
func (a *Client) Channels(params *ChannelsParams, opts ...ClientOption) (*ChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChannelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Channels",
		Method:             "GET",
		PathPattern:        "/ibc/core/channel/v1/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChannelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChannelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChannelsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClientConnections clients connections queries the connection paths associated with a client state
*/
func (a *Client) ClientConnections(params *ClientConnectionsParams, opts ...ClientOption) (*ClientConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClientConnections",
		Method:             "GET",
		PathPattern:        "/ibc/core/connection/v1/client_connections/{client_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClientConnectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClientConnectionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClientParams clients params queries all parameters of the ibc client
*/
func (a *Client) ClientParams(params *ClientParamsParams, opts ...ClientOption) (*ClientParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClientParams",
		Method:             "GET",
		PathPattern:        "/ibc/client/v1/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClientParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClientParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClientState clients state queries an i b c light client
*/
func (a *Client) ClientState(params *ClientStateParams, opts ...ClientOption) (*ClientStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClientState",
		Method:             "GET",
		PathPattern:        "/ibc/core/client/v1/client_states/{client_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClientStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClientStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClientStates clients states queries all the i b c light clients of a chain
*/
func (a *Client) ClientStates(params *ClientStatesParams, opts ...ClientOption) (*ClientStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientStatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClientStates",
		Method:             "GET",
		PathPattern:        "/ibc/core/client/v1/client_states",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClientStatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientStatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClientStatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ClientStatus statuses queries the status of an i b c client
*/
func (a *Client) ClientStatus(params *ClientStatusParams, opts ...ClientOption) (*ClientStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClientStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClientStatus",
		Method:             "GET",
		PathPattern:        "/ibc/core/client/v1/client_status/{client_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClientStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClientStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClientStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CodeInfo codes info returns the stored code info
*/
func (a *Client) CodeInfo(params *CodeInfoParams, opts ...ClientOption) (*CodeInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCodeInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CodeInfo",
		Method:             "GET",
		PathPattern:        "/terra/wasm/v1beta1/codes/{code_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CodeInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CodeInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CodeInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CommunityPool communities pool queries the community pool coins
*/
func (a *Client) CommunityPool(params *CommunityPoolParams, opts ...ClientOption) (*CommunityPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommunityPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CommunityPool",
		Method:             "GET",
		PathPattern:        "/cosmos/distribution/v1beta1/community_pool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommunityPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommunityPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommunityPoolDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Connection connections queries an i b c connection end
*/
func (a *Client) Connection(params *ConnectionParams, opts ...ClientOption) (*ConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Connection",
		Method:             "GET",
		PathPattern:        "/ibc/core/connection/v1/connections/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConnectionChannels connections channels queries all the channels associated with a connection end
*/
func (a *Client) ConnectionChannels(params *ConnectionChannelsParams, opts ...ClientOption) (*ConnectionChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectionChannelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConnectionChannels",
		Method:             "GET",
		PathPattern:        "/ibc/core/channel/v1/connections/{connection}/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectionChannelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectionChannelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectionChannelsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConnectionClientState connections client state queries the client state associated with the connection
*/
func (a *Client) ConnectionClientState(params *ConnectionClientStateParams, opts ...ClientOption) (*ConnectionClientStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectionClientStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConnectionClientState",
		Method:             "GET",
		PathPattern:        "/ibc/core/connection/v1/connections/{connection_id}/client_state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectionClientStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectionClientStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectionClientStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConnectionConsensusState connections consensus state queries the consensus state associated with the connection
*/
func (a *Client) ConnectionConsensusState(params *ConnectionConsensusStateParams, opts ...ClientOption) (*ConnectionConsensusStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectionConsensusStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConnectionConsensusState",
		Method:             "GET",
		PathPattern:        "/ibc/core/connection/v1/connections/{connection_id}/consensus_state/revision/{revision_number}/height/{revision_height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectionConsensusStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectionConsensusStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectionConsensusStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Connections connections queries all the i b c connections of a chain
*/
func (a *Client) Connections(params *ConnectionsParams, opts ...ClientOption) (*ConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Connections",
		Method:             "GET",
		PathPattern:        "/ibc/core/connection/v1/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsensusState consensus state queries a consensus state associated with a client state at a given height
*/
func (a *Client) ConsensusState(params *ConsensusStateParams, opts ...ClientOption) (*ConsensusStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsensusStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConsensusState",
		Method:             "GET",
		PathPattern:        "/ibc/core/client/v1/consensus_states/{client_id}/revision/{revision_number}/height/{revision_height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsensusStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsensusStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsensusStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConsensusStates consensus states queries all the consensus state associated with a given client
*/
func (a *Client) ConsensusStates(params *ConsensusStatesParams, opts ...ClientOption) (*ConsensusStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsensusStatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConsensusStates",
		Method:             "GET",
		PathPattern:        "/ibc/core/client/v1/consensus_states/{client_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConsensusStatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsensusStatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConsensusStatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ContractInfo contracts info returns the stored contract info
*/
func (a *Client) ContractInfo(params *ContractInfoParams, opts ...ClientOption) (*ContractInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContractInfo",
		Method:             "GET",
		PathPattern:        "/terra/wasm/v1beta1/contracts/{contract_address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContractInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContractInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContractInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ContractStore contracts store return smart query result from the contract
*/
func (a *Client) ContractStore(params *ContractStoreParams, opts ...ClientOption) (*ContractStoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractStoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ContractStore",
		Method:             "GET",
		PathPattern:        "/terra/wasm/v1beta1/contracts/{contract_address}/store",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ContractStoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContractStoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ContractStoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CurrentPlan currents plan queries the current upgrade plan
*/
func (a *Client) CurrentPlan(params *CurrentPlanParams, opts ...ClientOption) (*CurrentPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCurrentPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CurrentPlan",
		Method:             "GET",
		PathPattern:        "/cosmos/upgrade/v1beta1/current_plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CurrentPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CurrentPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CurrentPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Delegation delegations queries delegate info for given validator delegator pair
*/
func (a *Client) Delegation(params *DelegationParams, opts ...ClientOption) (*DelegationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelegationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Delegation",
		Method:             "GET",
		PathPattern:        "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DelegationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelegationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DelegationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DelegationRewards delegations rewards queries the total rewards accrued by a delegation
*/
func (a *Client) DelegationRewards(params *DelegationRewardsParams, opts ...ClientOption) (*DelegationRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelegationRewardsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DelegationRewards",
		Method:             "GET",
		PathPattern:        "/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DelegationRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelegationRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DelegationRewardsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DelegationTotalRewards delegations total rewards queries the total rewards accrued by a each validator
*/
func (a *Client) DelegationTotalRewards(params *DelegationTotalRewardsParams, opts ...ClientOption) (*DelegationTotalRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelegationTotalRewardsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DelegationTotalRewards",
		Method:             "GET",
		PathPattern:        "/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DelegationTotalRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelegationTotalRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DelegationTotalRewardsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DelegatorDelegations delegators delegations queries all delegations of a given delegator address
*/
func (a *Client) DelegatorDelegations(params *DelegatorDelegationsParams, opts ...ClientOption) (*DelegatorDelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelegatorDelegationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DelegatorDelegations",
		Method:             "GET",
		PathPattern:        "/cosmos/staking/v1beta1/delegations/{delegator_addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DelegatorDelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelegatorDelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DelegatorDelegationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DelegatorUnbondingDelegations delegators unbonding delegations queries all unbonding delegations of a given delegator address
*/
func (a *Client) DelegatorUnbondingDelegations(params *DelegatorUnbondingDelegationsParams, opts ...ClientOption) (*DelegatorUnbondingDelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelegatorUnbondingDelegationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DelegatorUnbondingDelegations",
		Method:             "GET",
		PathPattern:        "/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DelegatorUnbondingDelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelegatorUnbondingDelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DelegatorUnbondingDelegationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DelegatorValidator delegators validator queries validator info for given delegator validator pair
*/
func (a *Client) DelegatorValidator(params *DelegatorValidatorParams, opts ...ClientOption) (*DelegatorValidatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelegatorValidatorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DelegatorValidator",
		Method:             "GET",
		PathPattern:        "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DelegatorValidatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelegatorValidatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DelegatorValidatorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DelegatorValidators delegators validators queries the validators of a delegator
*/
func (a *Client) DelegatorValidators(params *DelegatorValidatorsParams, opts ...ClientOption) (*DelegatorValidatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelegatorValidatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DelegatorValidators",
		Method:             "GET",
		PathPattern:        "/cosmos/distribution/v1beta1/delegators/{delegator_address}/validators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DelegatorValidatorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelegatorValidatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DelegatorValidatorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DelegatorWithdrawAddress delegators withdraw address queries withdraw address of a delegator
*/
func (a *Client) DelegatorWithdrawAddress(params *DelegatorWithdrawAddressParams, opts ...ClientOption) (*DelegatorWithdrawAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelegatorWithdrawAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DelegatorWithdrawAddress",
		Method:             "GET",
		PathPattern:        "/cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DelegatorWithdrawAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelegatorWithdrawAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DelegatorWithdrawAddressDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DenomMetadata denoms metadata queries the client metadata of a given coin denomination
*/
func (a *Client) DenomMetadata(params *DenomMetadataParams, opts ...ClientOption) (*DenomMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDenomMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DenomMetadata",
		Method:             "GET",
		PathPattern:        "/cosmos/bank/v1beta1/denoms_metadata/{denom}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DenomMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DenomMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DenomMetadataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DenomTrace denoms trace queries a denomination trace information
*/
func (a *Client) DenomTrace(params *DenomTraceParams, opts ...ClientOption) (*DenomTraceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDenomTraceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DenomTrace",
		Method:             "GET",
		PathPattern:        "/ibc/apps/transfer/v1/denom_traces/{hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DenomTraceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DenomTraceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DenomTraceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DenomTraces denoms traces queries all denomination traces
*/
func (a *Client) DenomTraces(params *DenomTracesParams, opts ...ClientOption) (*DenomTracesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDenomTracesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DenomTraces",
		Method:             "GET",
		PathPattern:        "/ibc/apps/transfer/v1/denom_traces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DenomTracesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DenomTracesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DenomTracesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DenomsMetadata denoms metadata queries the client metadata for all registered coin denominations
*/
func (a *Client) DenomsMetadata(params *DenomsMetadataParams, opts ...ClientOption) (*DenomsMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDenomsMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DenomsMetadata",
		Method:             "GET",
		PathPattern:        "/cosmos/bank/v1beta1/denoms_metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DenomsMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DenomsMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DenomsMetadataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Deposit deposits queries single deposit information based proposal ID deposit addr
*/
func (a *Client) Deposit(params *DepositParams, opts ...ClientOption) (*DepositOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepositParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Deposit",
		Method:             "GET",
		PathPattern:        "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DepositReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DepositOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DepositDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Deposits deposits queries all deposits of a single proposal
*/
func (a *Client) Deposits(params *DepositsParams, opts ...ClientOption) (*DepositsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepositsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Deposits",
		Method:             "GET",
		PathPattern:        "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DepositsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DepositsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DepositsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DistributionParams params queries params of the distribution module
*/
func (a *Client) DistributionParams(params *DistributionParamsParams, opts ...ClientOption) (*DistributionParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDistributionParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DistributionParams",
		Method:             "GET",
		PathPattern:        "/cosmos/distribution/v1beta1/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DistributionParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DistributionParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DistributionParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Evidence evidences queries evidence based on evidence hash
*/
func (a *Client) Evidence(params *EvidenceParams, opts ...ClientOption) (*EvidenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEvidenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Evidence",
		Method:             "GET",
		PathPattern:        "/cosmos/evidence/v1beta1/evidence/{evidence_hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EvidenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EvidenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EvidenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ExchangeRate exchanges rate returns exchange rate of a denom
*/
func (a *Client) ExchangeRate(params *ExchangeRateParams, opts ...ClientOption) (*ExchangeRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExchangeRateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExchangeRate",
		Method:             "GET",
		PathPattern:        "/terra/oracle/v1beta1/denoms/{denom}/exchange_rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExchangeRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExchangeRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExchangeRateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ExchangeRates exchanges rates returns exchange rates of all denoms
*/
func (a *Client) ExchangeRates(params *ExchangeRatesParams, opts ...ClientOption) (*ExchangeRatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExchangeRatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExchangeRates",
		Method:             "GET",
		PathPattern:        "/terra/oracle/v1beta1/denoms/exchange_rates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExchangeRatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExchangeRatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExchangeRatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  FeederDelegation feeders delegation returns feeder delegation of a validator
*/
func (a *Client) FeederDelegation(params *FeederDelegationParams, opts ...ClientOption) (*FeederDelegationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFeederDelegationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "FeederDelegation",
		Method:             "GET",
		PathPattern:        "/terra/oracle/v1beta1/validators/{validator_addr}/feeder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FeederDelegationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FeederDelegationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*FeederDelegationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GovParams params queries all parameters of the gov module
*/
func (a *Client) GovParams(params *GovParamsParams, opts ...ClientOption) (*GovParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGovParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GovParams",
		Method:             "GET",
		PathPattern:        "/cosmos/gov/v1beta1/params/{params_type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GovParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GovParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GovParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Grants returns list of authorization granted to the grantee by the granter
*/
func (a *Client) Grants(params *GrantsParams, opts ...ClientOption) (*GrantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGrantsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Grants",
		Method:             "GET",
		PathPattern:        "/cosmos/authz/v1beta1/grants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GrantsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GrantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GrantsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HistoricalInfo historicals info queries the historical info for given height
*/
func (a *Client) HistoricalInfo(params *HistoricalInfoParams, opts ...ClientOption) (*HistoricalInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHistoricalInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HistoricalInfo",
		Method:             "GET",
		PathPattern:        "/cosmos/staking/v1beta1/historical_info/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HistoricalInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HistoricalInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HistoricalInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  IBCTransferParams params queries all parameters of the ibc transfer module
*/
func (a *Client) IBCTransferParams(params *IBCTransferParamsParams, opts ...ClientOption) (*IBCTransferParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIBCTransferParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IBCTransferParams",
		Method:             "GET",
		PathPattern:        "/ibc/apps/transfer/v1/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IBCTransferParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IBCTransferParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IBCTransferParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  IBCUpgradedConsensusState upgradeds consensus state queries an upgraded i b c consensus state
*/
func (a *Client) IBCUpgradedConsensusState(params *IBCUpgradedConsensusStateParams, opts ...ClientOption) (*IBCUpgradedConsensusStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIBCUpgradedConsensusStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IBCUpgradedConsensusState",
		Method:             "GET",
		PathPattern:        "/ibc/core/client/v1/upgraded_consensus_states",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IBCUpgradedConsensusStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IBCUpgradedConsensusStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IBCUpgradedConsensusStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Indicators indicators return the current trl informations
*/
func (a *Client) Indicators(params *IndicatorsParams, opts ...ClientOption) (*IndicatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndicatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Indicators",
		Method:             "GET",
		PathPattern:        "/terra/treasury/v1beta1/indicators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndicatorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndicatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IndicatorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Inflation inflations returns the current minting inflation value
*/
func (a *Client) Inflation(params *InflationParams, opts ...ClientOption) (*InflationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInflationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Inflation",
		Method:             "GET",
		PathPattern:        "/cosmos/mint/v1beta1/inflation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InflationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InflationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InflationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MarketParams params queries all parameters
*/
func (a *Client) MarketParams(params *MarketParamsParams, opts ...ClientOption) (*MarketParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarketParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MarketParams",
		Method:             "GET",
		PathPattern:        "/terra/market/v1beta1/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MarketParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarketParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MarketParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MintParams params returns the total set of minting parameters
*/
func (a *Client) MintParams(params *MintParamsParams, opts ...ClientOption) (*MintParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMintParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MintParams",
		Method:             "GET",
		PathPattern:        "/cosmos/mint/v1beta1/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MintParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MintParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MintParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  MissCounter misses counter returns oracle miss counter of a validator
*/
func (a *Client) MissCounter(params *MissCounterParams, opts ...ClientOption) (*MissCounterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMissCounterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MissCounter",
		Method:             "GET",
		PathPattern:        "/terra/oracle/v1beta1/validators/{validator_addr}/miss",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MissCounterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MissCounterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MissCounterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ModuleVersions modules versions queries the list of module versions from state
*/
func (a *Client) ModuleVersions(params *ModuleVersionsParams, opts ...ClientOption) (*ModuleVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModuleVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ModuleVersions",
		Method:             "GET",
		PathPattern:        "/cosmos/upgrade/v1beta1/module_versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModuleVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModuleVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ModuleVersionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  NextSequenceReceive nexts sequence receive returns the next receive sequence for a given channel
*/
func (a *Client) NextSequenceReceive(params *NextSequenceReceiveParams, opts ...ClientOption) (*NextSequenceReceiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNextSequenceReceiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NextSequenceReceive",
		Method:             "GET",
		PathPattern:        "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/next_sequence",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NextSequenceReceiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NextSequenceReceiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NextSequenceReceiveDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  OracleParams params queries all parameters
*/
func (a *Client) OracleParams(params *OracleParamsParams, opts ...ClientOption) (*OracleParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOracleParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OracleParams",
		Method:             "GET",
		PathPattern:        "/terra/oracle/v1beta1/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OracleParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OracleParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OracleParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PacketAcknowledgement packets acknowledgement queries a stored packet acknowledgement hash
*/
func (a *Client) PacketAcknowledgement(params *PacketAcknowledgementParams, opts ...ClientOption) (*PacketAcknowledgementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPacketAcknowledgementParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PacketAcknowledgement",
		Method:             "GET",
		PathPattern:        "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acks/{sequence}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PacketAcknowledgementReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PacketAcknowledgementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PacketAcknowledgementDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PacketAcknowledgements packets acknowledgements returns all the packet acknowledgements associated with a channel
*/
func (a *Client) PacketAcknowledgements(params *PacketAcknowledgementsParams, opts ...ClientOption) (*PacketAcknowledgementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPacketAcknowledgementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PacketAcknowledgements",
		Method:             "GET",
		PathPattern:        "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acknowledgements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PacketAcknowledgementsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PacketAcknowledgementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PacketAcknowledgementsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PacketCommitment packets commitment queries a stored packet commitment hash
*/
func (a *Client) PacketCommitment(params *PacketCommitmentParams, opts ...ClientOption) (*PacketCommitmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPacketCommitmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PacketCommitment",
		Method:             "GET",
		PathPattern:        "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{sequence}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PacketCommitmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PacketCommitmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PacketCommitmentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PacketCommitments packets commitments returns all the packet commitments hashes associated with a channel
*/
func (a *Client) PacketCommitments(params *PacketCommitmentsParams, opts ...ClientOption) (*PacketCommitmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPacketCommitmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PacketCommitments",
		Method:             "GET",
		PathPattern:        "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PacketCommitmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PacketCommitmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PacketCommitmentsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PacketReceipt packets receipt queries if a given packet sequence has been received on the queried chain
*/
func (a *Client) PacketReceipt(params *PacketReceiptParams, opts ...ClientOption) (*PacketReceiptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPacketReceiptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PacketReceipt",
		Method:             "GET",
		PathPattern:        "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_receipts/{sequence}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PacketReceiptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PacketReceiptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PacketReceiptDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Params params queries a specific parameter of a module given its subspace and key
*/
func (a *Client) Params(params *ParamsParams, opts ...ClientOption) (*ParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Params",
		Method:             "GET",
		PathPattern:        "/cosmos/params/v1beta1/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Pool pools queries the pool info
*/
func (a *Client) Pool(params *PoolParams, opts ...ClientOption) (*PoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Pool",
		Method:             "GET",
		PathPattern:        "/cosmos/staking/v1beta1/pool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PoolDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Proposal proposals queries proposal details based on proposal ID
*/
func (a *Client) Proposal(params *ProposalParams, opts ...ClientOption) (*ProposalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProposalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Proposal",
		Method:             "GET",
		PathPattern:        "/cosmos/gov/v1beta1/proposals/{proposal_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProposalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProposalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProposalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Proposals proposals queries all proposals based on given status
*/
func (a *Client) Proposals(params *ProposalsParams, opts ...ClientOption) (*ProposalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProposalsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Proposals",
		Method:             "GET",
		PathPattern:        "/cosmos/gov/v1beta1/proposals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProposalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProposalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProposalsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RawStore raws store return single key from the raw store data of a contract
*/
func (a *Client) RawStore(params *RawStoreParams, opts ...ClientOption) (*RawStoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRawStoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RawStore",
		Method:             "GET",
		PathPattern:        "/terra/wasm/v1beta1/contracts/{contract_address}/store/raw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RawStoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RawStoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RawStoreDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Redelegations redelegations queries redelegations of given address
*/
func (a *Client) Redelegations(params *RedelegationsParams, opts ...ClientOption) (*RedelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedelegationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Redelegations",
		Method:             "GET",
		PathPattern:        "/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RedelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RedelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RedelegationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RewardWeight rewards weight return the current reward weight
*/
func (a *Client) RewardWeight(params *RewardWeightParams, opts ...ClientOption) (*RewardWeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRewardWeightParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RewardWeight",
		Method:             "GET",
		PathPattern:        "/terra/treasury/v1beta1/reward_weight",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RewardWeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RewardWeightOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RewardWeightDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SeigniorageProceeds seigniorages proceeds return the current seigniorage proceeds
*/
func (a *Client) SeigniorageProceeds(params *SeigniorageProceedsParams, opts ...ClientOption) (*SeigniorageProceedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeigniorageProceedsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SeigniorageProceeds",
		Method:             "GET",
		PathPattern:        "/terra/treasury/v1beta1/seigniorage_proceeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SeigniorageProceedsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeigniorageProceedsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SeigniorageProceedsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SigningInfo signings info queries the signing info of given cons address
*/
func (a *Client) SigningInfo(params *SigningInfoParams, opts ...ClientOption) (*SigningInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSigningInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SigningInfo",
		Method:             "GET",
		PathPattern:        "/cosmos/slashing/v1beta1/signing_infos/{cons_address}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SigningInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SigningInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SigningInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SigningInfos signings infos queries signing info of all validators
*/
func (a *Client) SigningInfos(params *SigningInfosParams, opts ...ClientOption) (*SigningInfosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSigningInfosParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SigningInfos",
		Method:             "GET",
		PathPattern:        "/cosmos/slashing/v1beta1/signing_infos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SigningInfosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SigningInfosOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SigningInfosDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SlashingParams params queries the parameters of slashing module
*/
func (a *Client) SlashingParams(params *SlashingParamsParams, opts ...ClientOption) (*SlashingParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSlashingParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SlashingParams",
		Method:             "GET",
		PathPattern:        "/cosmos/slashing/v1beta1/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SlashingParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SlashingParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SlashingParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StakingDelegatorValidators delegators validators queries all validators info for given delegator address
*/
func (a *Client) StakingDelegatorValidators(params *StakingDelegatorValidatorsParams, opts ...ClientOption) (*StakingDelegatorValidatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStakingDelegatorValidatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StakingDelegatorValidators",
		Method:             "GET",
		PathPattern:        "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StakingDelegatorValidatorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StakingDelegatorValidatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StakingDelegatorValidatorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  StakingParams parameters queries the staking parameters
*/
func (a *Client) StakingParams(params *StakingParamsParams, opts ...ClientOption) (*StakingParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStakingParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StakingParams",
		Method:             "GET",
		PathPattern:        "/cosmos/staking/v1beta1/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StakingParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StakingParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StakingParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SupplyOf supplies of queries the supply of a single coin
*/
func (a *Client) SupplyOf(params *SupplyOfParams, opts ...ClientOption) (*SupplyOfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSupplyOfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SupplyOf",
		Method:             "GET",
		PathPattern:        "/cosmos/bank/v1beta1/supply/{denom}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SupplyOfReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SupplyOfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SupplyOfDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Swap swaps returns simulated swap amount
*/
func (a *Client) Swap(params *SwapParams, opts ...ClientOption) (*SwapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSwapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Swap",
		Method:             "GET",
		PathPattern:        "/terra/market/v1beta1/swap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SwapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SwapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SwapDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TallyResult tallies result queries the tally of a proposal vote
*/
func (a *Client) TallyResult(params *TallyResultParams, opts ...ClientOption) (*TallyResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTallyResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TallyResult",
		Method:             "GET",
		PathPattern:        "/cosmos/gov/v1beta1/proposals/{proposal_id}/tally",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TallyResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TallyResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TallyResultDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TaxCap taxes cap returns the tax cap of a denom
*/
func (a *Client) TaxCap(params *TaxCapParams, opts ...ClientOption) (*TaxCapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaxCapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TaxCap",
		Method:             "GET",
		PathPattern:        "/terra/treasury/v1beta1/tax_caps/{denom}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaxCapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TaxCapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TaxCapDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TaxCaps taxes caps returns the all tax caps
*/
func (a *Client) TaxCaps(params *TaxCapsParams, opts ...ClientOption) (*TaxCapsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaxCapsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TaxCaps",
		Method:             "GET",
		PathPattern:        "/terra/treasury/v1beta1/tax_caps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaxCapsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TaxCapsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TaxCapsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TaxProceeds taxes proceeds return the current tax proceeds
*/
func (a *Client) TaxProceeds(params *TaxProceedsParams, opts ...ClientOption) (*TaxProceedsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaxProceedsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TaxProceeds",
		Method:             "GET",
		PathPattern:        "/terra/treasury/v1beta1/tax_proceeds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaxProceedsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TaxProceedsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TaxProceedsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TaxRate taxes rate return the current tax rate
*/
func (a *Client) TaxRate(params *TaxRateParams, opts ...ClientOption) (*TaxRateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaxRateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TaxRate",
		Method:             "GET",
		PathPattern:        "/terra/treasury/v1beta1/tax_rate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TaxRateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TaxRateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TaxRateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TerraPoolDelta terras pool delta returns terra pool delta amount
*/
func (a *Client) TerraPoolDelta(params *TerraPoolDeltaParams, opts ...ClientOption) (*TerraPoolDeltaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerraPoolDeltaParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TerraPoolDelta",
		Method:             "GET",
		PathPattern:        "/terra/market/v1beta1/terra_pool_delta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TerraPoolDeltaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TerraPoolDeltaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TerraPoolDeltaDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TobinTax tobins tax returns tobin tax of a denom
*/
func (a *Client) TobinTax(params *TobinTaxParams, opts ...ClientOption) (*TobinTaxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTobinTaxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TobinTax",
		Method:             "GET",
		PathPattern:        "/terra/oracle/v1beta1/denoms/{denom}/tobin_tax",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TobinTaxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TobinTaxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TobinTaxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TobinTaxes tobins taxes returns tobin taxes of all denoms
*/
func (a *Client) TobinTaxes(params *TobinTaxesParams, opts ...ClientOption) (*TobinTaxesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTobinTaxesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TobinTaxes",
		Method:             "GET",
		PathPattern:        "/terra/oracle/v1beta1/denoms/tobin_taxes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TobinTaxesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TobinTaxesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TobinTaxesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TotalSupply totals supply queries the total supply of all coins
*/
func (a *Client) TotalSupply(params *TotalSupplyParams, opts ...ClientOption) (*TotalSupplyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTotalSupplyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TotalSupply",
		Method:             "GET",
		PathPattern:        "/cosmos/bank/v1beta1/supply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TotalSupplyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TotalSupplyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TotalSupplyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TreasuryParams params queries all parameters
*/
func (a *Client) TreasuryParams(params *TreasuryParamsParams, opts ...ClientOption) (*TreasuryParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTreasuryParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TreasuryParams",
		Method:             "GET",
		PathPattern:        "/terra/treasury/v1beta1/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TreasuryParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TreasuryParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TreasuryParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UnbondingDelegation unbondings delegation queries unbonding info for given validator delegator pair
*/
func (a *Client) UnbondingDelegation(params *UnbondingDelegationParams, opts ...ClientOption) (*UnbondingDelegationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnbondingDelegationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UnbondingDelegation",
		Method:             "GET",
		PathPattern:        "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnbondingDelegationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnbondingDelegationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnbondingDelegationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UnreceivedAcks unreceiveds acks returns all the unreceived i b c acknowledgements associated with a channel and sequences
*/
func (a *Client) UnreceivedAcks(params *UnreceivedAcksParams, opts ...ClientOption) (*UnreceivedAcksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnreceivedAcksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UnreceivedAcks",
		Method:             "GET",
		PathPattern:        "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_ack_sequences}/unreceived_acks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnreceivedAcksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnreceivedAcksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnreceivedAcksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UnreceivedPackets unreceiveds packets returns all the unreceived i b c packets associated with a channel and sequences
*/
func (a *Client) UnreceivedPackets(params *UnreceivedPacketsParams, opts ...ClientOption) (*UnreceivedPacketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnreceivedPacketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UnreceivedPackets",
		Method:             "GET",
		PathPattern:        "/ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_commitment_sequences}/unreceived_packets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnreceivedPacketsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnreceivedPacketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnreceivedPacketsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpgradedClientState upgradeds client state queries an upgraded i b c light client
*/
func (a *Client) UpgradedClientState(params *UpgradedClientStateParams, opts ...ClientOption) (*UpgradedClientStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradedClientStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpgradedClientState",
		Method:             "GET",
		PathPattern:        "/ibc/core/client/v1/upgraded_client_states",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpgradedClientStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradedClientStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpgradedClientStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpgradedConsensusState upgradeds consensus state queries the consensus state that will serve as a trusted kernel for the next version of this chain it will only be stored at the last height of this chain upgraded consensus state RPC not supported with legacy querier this rpc is deprecated now that i b c has its own replacement https github com cosmos ibc go blob 2c880a22e9f9cc75f62b527ca94aa75ce1106001 proto ibc core client v1 query proto l54
*/
func (a *Client) UpgradedConsensusState(params *UpgradedConsensusStateParams, opts ...ClientOption) (*UpgradedConsensusStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradedConsensusStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpgradedConsensusState",
		Method:             "GET",
		PathPattern:        "/cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpgradedConsensusStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpgradedConsensusStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpgradedConsensusStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Validator validators queries validator info for given validator address
*/
func (a *Client) Validator(params *ValidatorParams, opts ...ClientOption) (*ValidatorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidatorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Validator",
		Method:             "GET",
		PathPattern:        "/cosmos/staking/v1beta1/validators/{validator_addr}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidatorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidatorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ValidatorCommission validators commission queries accumulated commission for a validator
*/
func (a *Client) ValidatorCommission(params *ValidatorCommissionParams, opts ...ClientOption) (*ValidatorCommissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidatorCommissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ValidatorCommission",
		Method:             "GET",
		PathPattern:        "/cosmos/distribution/v1beta1/validators/{validator_address}/commission",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidatorCommissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidatorCommissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidatorCommissionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ValidatorDelegations validators delegations queries delegate info for given validator
*/
func (a *Client) ValidatorDelegations(params *ValidatorDelegationsParams, opts ...ClientOption) (*ValidatorDelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidatorDelegationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ValidatorDelegations",
		Method:             "GET",
		PathPattern:        "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidatorDelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidatorDelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidatorDelegationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ValidatorOutstandingRewards validators outstanding rewards queries rewards of a validator address
*/
func (a *Client) ValidatorOutstandingRewards(params *ValidatorOutstandingRewardsParams, opts ...ClientOption) (*ValidatorOutstandingRewardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidatorOutstandingRewardsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ValidatorOutstandingRewards",
		Method:             "GET",
		PathPattern:        "/cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidatorOutstandingRewardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidatorOutstandingRewardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidatorOutstandingRewardsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ValidatorSlashes validators slashes queries slash events of a validator
*/
func (a *Client) ValidatorSlashes(params *ValidatorSlashesParams, opts ...ClientOption) (*ValidatorSlashesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidatorSlashesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ValidatorSlashes",
		Method:             "GET",
		PathPattern:        "/cosmos/distribution/v1beta1/validators/{validator_address}/slashes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidatorSlashesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidatorSlashesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidatorSlashesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ValidatorUnbondingDelegations validators unbonding delegations queries unbonding delegations of a validator
*/
func (a *Client) ValidatorUnbondingDelegations(params *ValidatorUnbondingDelegationsParams, opts ...ClientOption) (*ValidatorUnbondingDelegationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidatorUnbondingDelegationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ValidatorUnbondingDelegations",
		Method:             "GET",
		PathPattern:        "/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidatorUnbondingDelegationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidatorUnbondingDelegationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidatorUnbondingDelegationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Validators validators queries all validators that match the given status
*/
func (a *Client) Validators(params *ValidatorsParams, opts ...ClientOption) (*ValidatorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidatorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Validators",
		Method:             "GET",
		PathPattern:        "/cosmos/staking/v1beta1/validators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidatorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidatorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidatorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Vote votes queries voted information based on proposal ID voter addr
*/
func (a *Client) Vote(params *VoteParams, opts ...ClientOption) (*VoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Vote",
		Method:             "GET",
		PathPattern:        "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VoteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VoteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  VoteTargets votes targets returns all vote target denoms
*/
func (a *Client) VoteTargets(params *VoteTargetsParams, opts ...ClientOption) (*VoteTargetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoteTargetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VoteTargets",
		Method:             "GET",
		PathPattern:        "/terra/oracle/v1beta1/denoms/vote_targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VoteTargetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoteTargetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VoteTargetsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Votes votes queries votes of a given proposal
*/
func (a *Client) Votes(params *VotesParams, opts ...ClientOption) (*VotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVotesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Votes",
		Method:             "GET",
		PathPattern:        "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VotesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VotesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VotesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  WasmParams params queries all parameters
*/
func (a *Client) WasmParams(params *WasmParamsParams, opts ...ClientOption) (*WasmParamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWasmParamsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WasmParams",
		Method:             "GET",
		PathPattern:        "/terra/wasm/v1beta1/params",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WasmParamsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WasmParamsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WasmParamsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
