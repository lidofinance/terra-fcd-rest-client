// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewClientConnectionsParams creates a new ClientConnectionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewClientConnectionsParams() *ClientConnectionsParams {
	return &ClientConnectionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewClientConnectionsParamsWithTimeout creates a new ClientConnectionsParams object
// with the ability to set a timeout on a request.
func NewClientConnectionsParamsWithTimeout(timeout time.Duration) *ClientConnectionsParams {
	return &ClientConnectionsParams{
		timeout: timeout,
	}
}

// NewClientConnectionsParamsWithContext creates a new ClientConnectionsParams object
// with the ability to set a context for a request.
func NewClientConnectionsParamsWithContext(ctx context.Context) *ClientConnectionsParams {
	return &ClientConnectionsParams{
		Context: ctx,
	}
}

// NewClientConnectionsParamsWithHTTPClient creates a new ClientConnectionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewClientConnectionsParamsWithHTTPClient(client *http.Client) *ClientConnectionsParams {
	return &ClientConnectionsParams{
		HTTPClient: client,
	}
}

/* ClientConnectionsParams contains all the parameters to send to the API endpoint
   for the client connections operation.

   Typically these are written to a http.Request.
*/
type ClientConnectionsParams struct {

	/* ClientID.

	   client identifier associated with a connection
	*/
	ClientID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the client connections params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClientConnectionsParams) WithDefaults() *ClientConnectionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the client connections params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClientConnectionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the client connections params
func (o *ClientConnectionsParams) WithTimeout(timeout time.Duration) *ClientConnectionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the client connections params
func (o *ClientConnectionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the client connections params
func (o *ClientConnectionsParams) WithContext(ctx context.Context) *ClientConnectionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the client connections params
func (o *ClientConnectionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the client connections params
func (o *ClientConnectionsParams) WithHTTPClient(client *http.Client) *ClientConnectionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the client connections params
func (o *ClientConnectionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the client connections params
func (o *ClientConnectionsParams) WithClientID(clientID string) *ClientConnectionsParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the client connections params
func (o *ClientConnectionsParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WriteToRequest writes these params to a swagger request
func (o *ClientConnectionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param client_id
	if err := r.SetPathParam("client_id", o.ClientID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
