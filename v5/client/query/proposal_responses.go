// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProposalReader is a Reader for the Proposal structure.
type ProposalReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProposalReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProposalOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewProposalDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewProposalOK creates a ProposalOK with default headers values
func NewProposalOK() *ProposalOK {
	return &ProposalOK{}
}

/* ProposalOK describes a response with status code 200, with default header values.

A successful response.
*/
type ProposalOK struct {
	Payload *ProposalOKBody
}

func (o *ProposalOK) Error() string {
	return fmt.Sprintf("[GET /cosmos/gov/v1beta1/proposals/{proposal_id}][%d] proposalOK  %+v", 200, o.Payload)
}
func (o *ProposalOK) GetPayload() *ProposalOKBody {
	return o.Payload
}

func (o *ProposalOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProposalOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProposalDefault creates a ProposalDefault with default headers values
func NewProposalDefault(code int) *ProposalDefault {
	return &ProposalDefault{
		_statusCode: code,
	}
}

/* ProposalDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type ProposalDefault struct {
	_statusCode int

	Payload *ProposalDefaultBody
}

// Code gets the status code for the proposal default response
func (o *ProposalDefault) Code() int {
	return o._statusCode
}

func (o *ProposalDefault) Error() string {
	return fmt.Sprintf("[GET /cosmos/gov/v1beta1/proposals/{proposal_id}][%d] Proposal default  %+v", o._statusCode, o.Payload)
}
func (o *ProposalDefault) GetPayload() *ProposalDefaultBody {
	return o.Payload
}

func (o *ProposalDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ProposalDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ProposalDefaultBody proposal default body
swagger:model ProposalDefaultBody
*/
type ProposalDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*ProposalDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this proposal default body
func (o *ProposalDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProposalDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Proposal default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Proposal default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this proposal default body based on the context it is used
func (o *ProposalDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProposalDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Proposal default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Proposal default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProposalDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalDefaultBody) UnmarshalBinary(b []byte) error {
	var res ProposalDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProposalDefaultBodyDetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := ptypes.MarshalAny(foo)
//      ...
//      foo := &pb.Foo{}
//      if err := ptypes.UnmarshalAny(any, foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model ProposalDefaultBodyDetailsItems0
*/
type ProposalDefaultBodyDetailsItems0 struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this proposal default body details items0
func (o *ProposalDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this proposal default body details items0 based on context it is used
func (o *ProposalDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProposalDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ProposalDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProposalOKBody QueryProposalResponse is the response type for the Query/Proposal RPC method.
swagger:model ProposalOKBody
*/
type ProposalOKBody struct {

	// proposal
	Proposal *ProposalOKBodyProposal `json:"proposal,omitempty"`
}

// Validate validates this proposal o k body
func (o *ProposalOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProposal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProposalOKBody) validateProposal(formats strfmt.Registry) error {
	if swag.IsZero(o.Proposal) { // not required
		return nil
	}

	if o.Proposal != nil {
		if err := o.Proposal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proposalOK" + "." + "proposal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proposalOK" + "." + "proposal")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this proposal o k body based on the context it is used
func (o *ProposalOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateProposal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProposalOKBody) contextValidateProposal(ctx context.Context, formats strfmt.Registry) error {

	if o.Proposal != nil {
		if err := o.Proposal.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proposalOK" + "." + "proposal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proposalOK" + "." + "proposal")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProposalOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalOKBody) UnmarshalBinary(b []byte) error {
	var res ProposalOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProposalOKBodyProposal Proposal defines the core field members of a governance proposal.
swagger:model ProposalOKBodyProposal
*/
type ProposalOKBodyProposal struct {

	// content
	Content *ProposalOKBodyProposalContent `json:"content,omitempty"`

	// deposit end time
	// Format: date-time
	DepositEndTime strfmt.DateTime `json:"deposit_end_time,omitempty"`

	// final tally result
	FinalTallyResult *ProposalOKBodyProposalFinalTallyResult `json:"final_tally_result,omitempty"`

	// proposal id
	ProposalID string `json:"proposal_id,omitempty"`

	// status
	// Enum: [PROPOSAL_STATUS_UNSPECIFIED PROPOSAL_STATUS_DEPOSIT_PERIOD PROPOSAL_STATUS_VOTING_PERIOD PROPOSAL_STATUS_PASSED PROPOSAL_STATUS_REJECTED PROPOSAL_STATUS_FAILED]
	Status string `json:"status,omitempty"`

	// submit time
	// Format: date-time
	SubmitTime strfmt.DateTime `json:"submit_time,omitempty"`

	// total deposit
	TotalDeposit []*ProposalOKBodyProposalTotalDepositItems0 `json:"total_deposit"`

	// voting end time
	// Format: date-time
	VotingEndTime strfmt.DateTime `json:"voting_end_time,omitempty"`

	// voting start time
	// Format: date-time
	VotingStartTime strfmt.DateTime `json:"voting_start_time,omitempty"`
}

// Validate validates this proposal o k body proposal
func (o *ProposalOKBodyProposal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDepositEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFinalTallyResult(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalDeposit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVotingEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVotingStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProposalOKBodyProposal) validateContent(formats strfmt.Registry) error {
	if swag.IsZero(o.Content) { // not required
		return nil
	}

	if o.Content != nil {
		if err := o.Content.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proposalOK" + "." + "proposal" + "." + "content")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proposalOK" + "." + "proposal" + "." + "content")
			}
			return err
		}
	}

	return nil
}

func (o *ProposalOKBodyProposal) validateDepositEndTime(formats strfmt.Registry) error {
	if swag.IsZero(o.DepositEndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("proposalOK"+"."+"proposal"+"."+"deposit_end_time", "body", "date-time", o.DepositEndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ProposalOKBodyProposal) validateFinalTallyResult(formats strfmt.Registry) error {
	if swag.IsZero(o.FinalTallyResult) { // not required
		return nil
	}

	if o.FinalTallyResult != nil {
		if err := o.FinalTallyResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proposalOK" + "." + "proposal" + "." + "final_tally_result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proposalOK" + "." + "proposal" + "." + "final_tally_result")
			}
			return err
		}
	}

	return nil
}

var proposalOKBodyProposalTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROPOSAL_STATUS_UNSPECIFIED","PROPOSAL_STATUS_DEPOSIT_PERIOD","PROPOSAL_STATUS_VOTING_PERIOD","PROPOSAL_STATUS_PASSED","PROPOSAL_STATUS_REJECTED","PROPOSAL_STATUS_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		proposalOKBodyProposalTypeStatusPropEnum = append(proposalOKBodyProposalTypeStatusPropEnum, v)
	}
}

const (

	// ProposalOKBodyProposalStatusPROPOSALSTATUSUNSPECIFIED captures enum value "PROPOSAL_STATUS_UNSPECIFIED"
	ProposalOKBodyProposalStatusPROPOSALSTATUSUNSPECIFIED string = "PROPOSAL_STATUS_UNSPECIFIED"

	// ProposalOKBodyProposalStatusPROPOSALSTATUSDEPOSITPERIOD captures enum value "PROPOSAL_STATUS_DEPOSIT_PERIOD"
	ProposalOKBodyProposalStatusPROPOSALSTATUSDEPOSITPERIOD string = "PROPOSAL_STATUS_DEPOSIT_PERIOD"

	// ProposalOKBodyProposalStatusPROPOSALSTATUSVOTINGPERIOD captures enum value "PROPOSAL_STATUS_VOTING_PERIOD"
	ProposalOKBodyProposalStatusPROPOSALSTATUSVOTINGPERIOD string = "PROPOSAL_STATUS_VOTING_PERIOD"

	// ProposalOKBodyProposalStatusPROPOSALSTATUSPASSED captures enum value "PROPOSAL_STATUS_PASSED"
	ProposalOKBodyProposalStatusPROPOSALSTATUSPASSED string = "PROPOSAL_STATUS_PASSED"

	// ProposalOKBodyProposalStatusPROPOSALSTATUSREJECTED captures enum value "PROPOSAL_STATUS_REJECTED"
	ProposalOKBodyProposalStatusPROPOSALSTATUSREJECTED string = "PROPOSAL_STATUS_REJECTED"

	// ProposalOKBodyProposalStatusPROPOSALSTATUSFAILED captures enum value "PROPOSAL_STATUS_FAILED"
	ProposalOKBodyProposalStatusPROPOSALSTATUSFAILED string = "PROPOSAL_STATUS_FAILED"
)

// prop value enum
func (o *ProposalOKBodyProposal) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, proposalOKBodyProposalTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ProposalOKBodyProposal) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("proposalOK"+"."+"proposal"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

func (o *ProposalOKBodyProposal) validateSubmitTime(formats strfmt.Registry) error {
	if swag.IsZero(o.SubmitTime) { // not required
		return nil
	}

	if err := validate.FormatOf("proposalOK"+"."+"proposal"+"."+"submit_time", "body", "date-time", o.SubmitTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ProposalOKBodyProposal) validateTotalDeposit(formats strfmt.Registry) error {
	if swag.IsZero(o.TotalDeposit) { // not required
		return nil
	}

	for i := 0; i < len(o.TotalDeposit); i++ {
		if swag.IsZero(o.TotalDeposit[i]) { // not required
			continue
		}

		if o.TotalDeposit[i] != nil {
			if err := o.TotalDeposit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proposalOK" + "." + "proposal" + "." + "total_deposit" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("proposalOK" + "." + "proposal" + "." + "total_deposit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProposalOKBodyProposal) validateVotingEndTime(formats strfmt.Registry) error {
	if swag.IsZero(o.VotingEndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("proposalOK"+"."+"proposal"+"."+"voting_end_time", "body", "date-time", o.VotingEndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ProposalOKBodyProposal) validateVotingStartTime(formats strfmt.Registry) error {
	if swag.IsZero(o.VotingStartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("proposalOK"+"."+"proposal"+"."+"voting_start_time", "body", "date-time", o.VotingStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this proposal o k body proposal based on the context it is used
func (o *ProposalOKBodyProposal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateContent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateFinalTallyResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTotalDeposit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProposalOKBodyProposal) contextValidateContent(ctx context.Context, formats strfmt.Registry) error {

	if o.Content != nil {
		if err := o.Content.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proposalOK" + "." + "proposal" + "." + "content")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proposalOK" + "." + "proposal" + "." + "content")
			}
			return err
		}
	}

	return nil
}

func (o *ProposalOKBodyProposal) contextValidateFinalTallyResult(ctx context.Context, formats strfmt.Registry) error {

	if o.FinalTallyResult != nil {
		if err := o.FinalTallyResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proposalOK" + "." + "proposal" + "." + "final_tally_result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proposalOK" + "." + "proposal" + "." + "final_tally_result")
			}
			return err
		}
	}

	return nil
}

func (o *ProposalOKBodyProposal) contextValidateTotalDeposit(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.TotalDeposit); i++ {

		if o.TotalDeposit[i] != nil {
			if err := o.TotalDeposit[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proposalOK" + "." + "proposal" + "." + "total_deposit" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("proposalOK" + "." + "proposal" + "." + "total_deposit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProposalOKBodyProposal) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalOKBodyProposal) UnmarshalBinary(b []byte) error {
	var res ProposalOKBodyProposal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProposalOKBodyProposalContent `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := ptypes.MarshalAny(foo)
//      ...
//      foo := &pb.Foo{}
//      if err := ptypes.UnmarshalAny(any, foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model ProposalOKBodyProposalContent
*/
type ProposalOKBodyProposalContent struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this proposal o k body proposal content
func (o *ProposalOKBodyProposalContent) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this proposal o k body proposal content based on context it is used
func (o *ProposalOKBodyProposalContent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProposalOKBodyProposalContent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalOKBodyProposalContent) UnmarshalBinary(b []byte) error {
	var res ProposalOKBodyProposalContent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProposalOKBodyProposalFinalTallyResult TallyResult defines a standard tally for a governance proposal.
swagger:model ProposalOKBodyProposalFinalTallyResult
*/
type ProposalOKBodyProposalFinalTallyResult struct {

	// abstain
	Abstain string `json:"abstain,omitempty"`

	// no
	No string `json:"no,omitempty"`

	// no with veto
	NoWithVeto string `json:"no_with_veto,omitempty"`

	// yes
	Yes string `json:"yes,omitempty"`
}

// Validate validates this proposal o k body proposal final tally result
func (o *ProposalOKBodyProposalFinalTallyResult) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this proposal o k body proposal final tally result based on context it is used
func (o *ProposalOKBodyProposalFinalTallyResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProposalOKBodyProposalFinalTallyResult) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalOKBodyProposalFinalTallyResult) UnmarshalBinary(b []byte) error {
	var res ProposalOKBodyProposalFinalTallyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ProposalOKBodyProposalTotalDepositItems0 Coin defines a token with a denomination and an amount.
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
swagger:model ProposalOKBodyProposalTotalDepositItems0
*/
type ProposalOKBodyProposalTotalDepositItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this proposal o k body proposal total deposit items0
func (o *ProposalOKBodyProposalTotalDepositItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this proposal o k body proposal total deposit items0 based on context it is used
func (o *ProposalOKBodyProposalTotalDepositItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ProposalOKBodyProposalTotalDepositItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProposalOKBodyProposalTotalDepositItems0) UnmarshalBinary(b []byte) error {
	var res ProposalOKBodyProposalTotalDepositItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
