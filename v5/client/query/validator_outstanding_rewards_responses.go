// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ValidatorOutstandingRewardsReader is a Reader for the ValidatorOutstandingRewards structure.
type ValidatorOutstandingRewardsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidatorOutstandingRewardsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidatorOutstandingRewardsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewValidatorOutstandingRewardsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewValidatorOutstandingRewardsOK creates a ValidatorOutstandingRewardsOK with default headers values
func NewValidatorOutstandingRewardsOK() *ValidatorOutstandingRewardsOK {
	return &ValidatorOutstandingRewardsOK{}
}

/* ValidatorOutstandingRewardsOK describes a response with status code 200, with default header values.

A successful response.
*/
type ValidatorOutstandingRewardsOK struct {
	Payload *ValidatorOutstandingRewardsOKBody
}

func (o *ValidatorOutstandingRewardsOK) Error() string {
	return fmt.Sprintf("[GET /cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards][%d] validatorOutstandingRewardsOK  %+v", 200, o.Payload)
}
func (o *ValidatorOutstandingRewardsOK) GetPayload() *ValidatorOutstandingRewardsOKBody {
	return o.Payload
}

func (o *ValidatorOutstandingRewardsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ValidatorOutstandingRewardsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidatorOutstandingRewardsDefault creates a ValidatorOutstandingRewardsDefault with default headers values
func NewValidatorOutstandingRewardsDefault(code int) *ValidatorOutstandingRewardsDefault {
	return &ValidatorOutstandingRewardsDefault{
		_statusCode: code,
	}
}

/* ValidatorOutstandingRewardsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type ValidatorOutstandingRewardsDefault struct {
	_statusCode int

	Payload *ValidatorOutstandingRewardsDefaultBody
}

// Code gets the status code for the validator outstanding rewards default response
func (o *ValidatorOutstandingRewardsDefault) Code() int {
	return o._statusCode
}

func (o *ValidatorOutstandingRewardsDefault) Error() string {
	return fmt.Sprintf("[GET /cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards][%d] ValidatorOutstandingRewards default  %+v", o._statusCode, o.Payload)
}
func (o *ValidatorOutstandingRewardsDefault) GetPayload() *ValidatorOutstandingRewardsDefaultBody {
	return o.Payload
}

func (o *ValidatorOutstandingRewardsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ValidatorOutstandingRewardsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ValidatorOutstandingRewardsDefaultBody validator outstanding rewards default body
swagger:model ValidatorOutstandingRewardsDefaultBody
*/
type ValidatorOutstandingRewardsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*ValidatorOutstandingRewardsDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this validator outstanding rewards default body
func (o *ValidatorOutstandingRewardsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidatorOutstandingRewardsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ValidatorOutstandingRewards default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ValidatorOutstandingRewards default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this validator outstanding rewards default body based on the context it is used
func (o *ValidatorOutstandingRewardsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidatorOutstandingRewardsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ValidatorOutstandingRewards default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ValidatorOutstandingRewards default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidatorOutstandingRewardsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidatorOutstandingRewardsDefaultBody) UnmarshalBinary(b []byte) error {
	var res ValidatorOutstandingRewardsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidatorOutstandingRewardsDefaultBodyDetailsItems0 validator outstanding rewards default body details items0
swagger:model ValidatorOutstandingRewardsDefaultBodyDetailsItems0
*/
type ValidatorOutstandingRewardsDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this validator outstanding rewards default body details items0
func (o *ValidatorOutstandingRewardsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this validator outstanding rewards default body details items0 based on context it is used
func (o *ValidatorOutstandingRewardsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ValidatorOutstandingRewardsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidatorOutstandingRewardsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ValidatorOutstandingRewardsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidatorOutstandingRewardsOKBody QueryValidatorOutstandingRewardsResponse is the response type for the
// Query/ValidatorOutstandingRewards RPC method.
swagger:model ValidatorOutstandingRewardsOKBody
*/
type ValidatorOutstandingRewardsOKBody struct {

	// rewards
	Rewards *ValidatorOutstandingRewardsOKBodyRewards `json:"rewards,omitempty"`
}

// Validate validates this validator outstanding rewards o k body
func (o *ValidatorOutstandingRewardsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRewards(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidatorOutstandingRewardsOKBody) validateRewards(formats strfmt.Registry) error {
	if swag.IsZero(o.Rewards) { // not required
		return nil
	}

	if o.Rewards != nil {
		if err := o.Rewards.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validatorOutstandingRewardsOK" + "." + "rewards")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validatorOutstandingRewardsOK" + "." + "rewards")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this validator outstanding rewards o k body based on the context it is used
func (o *ValidatorOutstandingRewardsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRewards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidatorOutstandingRewardsOKBody) contextValidateRewards(ctx context.Context, formats strfmt.Registry) error {

	if o.Rewards != nil {
		if err := o.Rewards.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validatorOutstandingRewardsOK" + "." + "rewards")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validatorOutstandingRewardsOK" + "." + "rewards")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidatorOutstandingRewardsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidatorOutstandingRewardsOKBody) UnmarshalBinary(b []byte) error {
	var res ValidatorOutstandingRewardsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidatorOutstandingRewardsOKBodyRewards ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
// for a validator inexpensive to track, allows simple sanity checks.
swagger:model ValidatorOutstandingRewardsOKBodyRewards
*/
type ValidatorOutstandingRewardsOKBodyRewards struct {

	// rewards
	Rewards []*ValidatorOutstandingRewardsOKBodyRewardsRewardsItems0 `json:"rewards"`
}

// Validate validates this validator outstanding rewards o k body rewards
func (o *ValidatorOutstandingRewardsOKBodyRewards) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRewards(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidatorOutstandingRewardsOKBodyRewards) validateRewards(formats strfmt.Registry) error {
	if swag.IsZero(o.Rewards) { // not required
		return nil
	}

	for i := 0; i < len(o.Rewards); i++ {
		if swag.IsZero(o.Rewards[i]) { // not required
			continue
		}

		if o.Rewards[i] != nil {
			if err := o.Rewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validatorOutstandingRewardsOK" + "." + "rewards" + "." + "rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("validatorOutstandingRewardsOK" + "." + "rewards" + "." + "rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this validator outstanding rewards o k body rewards based on the context it is used
func (o *ValidatorOutstandingRewardsOKBodyRewards) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRewards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidatorOutstandingRewardsOKBodyRewards) contextValidateRewards(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Rewards); i++ {

		if o.Rewards[i] != nil {
			if err := o.Rewards[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validatorOutstandingRewardsOK" + "." + "rewards" + "." + "rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("validatorOutstandingRewardsOK" + "." + "rewards" + "." + "rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidatorOutstandingRewardsOKBodyRewards) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidatorOutstandingRewardsOKBodyRewards) UnmarshalBinary(b []byte) error {
	var res ValidatorOutstandingRewardsOKBodyRewards
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidatorOutstandingRewardsOKBodyRewardsRewardsItems0 DecCoin defines a token with a denomination and a decimal amount.
//
// NOTE: The amount field is an Dec which implements the custom method
// signatures required by gogoproto.
swagger:model ValidatorOutstandingRewardsOKBodyRewardsRewardsItems0
*/
type ValidatorOutstandingRewardsOKBodyRewardsRewardsItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this validator outstanding rewards o k body rewards rewards items0
func (o *ValidatorOutstandingRewardsOKBodyRewardsRewardsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this validator outstanding rewards o k body rewards rewards items0 based on context it is used
func (o *ValidatorOutstandingRewardsOKBodyRewardsRewardsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ValidatorOutstandingRewardsOKBodyRewardsRewardsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidatorOutstandingRewardsOKBodyRewardsRewardsItems0) UnmarshalBinary(b []byte) error {
	var res ValidatorOutstandingRewardsOKBodyRewardsRewardsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
