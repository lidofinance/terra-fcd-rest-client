// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PacketAcknowledgementsReader is a Reader for the PacketAcknowledgements structure.
type PacketAcknowledgementsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PacketAcknowledgementsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPacketAcknowledgementsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPacketAcknowledgementsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPacketAcknowledgementsOK creates a PacketAcknowledgementsOK with default headers values
func NewPacketAcknowledgementsOK() *PacketAcknowledgementsOK {
	return &PacketAcknowledgementsOK{}
}

/* PacketAcknowledgementsOK describes a response with status code 200, with default header values.

A successful response.
*/
type PacketAcknowledgementsOK struct {
	Payload *PacketAcknowledgementsOKBody
}

func (o *PacketAcknowledgementsOK) Error() string {
	return fmt.Sprintf("[GET /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acknowledgements][%d] packetAcknowledgementsOK  %+v", 200, o.Payload)
}
func (o *PacketAcknowledgementsOK) GetPayload() *PacketAcknowledgementsOKBody {
	return o.Payload
}

func (o *PacketAcknowledgementsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PacketAcknowledgementsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPacketAcknowledgementsDefault creates a PacketAcknowledgementsDefault with default headers values
func NewPacketAcknowledgementsDefault(code int) *PacketAcknowledgementsDefault {
	return &PacketAcknowledgementsDefault{
		_statusCode: code,
	}
}

/* PacketAcknowledgementsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type PacketAcknowledgementsDefault struct {
	_statusCode int

	Payload *PacketAcknowledgementsDefaultBody
}

// Code gets the status code for the packet acknowledgements default response
func (o *PacketAcknowledgementsDefault) Code() int {
	return o._statusCode
}

func (o *PacketAcknowledgementsDefault) Error() string {
	return fmt.Sprintf("[GET /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acknowledgements][%d] PacketAcknowledgements default  %+v", o._statusCode, o.Payload)
}
func (o *PacketAcknowledgementsDefault) GetPayload() *PacketAcknowledgementsDefaultBody {
	return o.Payload
}

func (o *PacketAcknowledgementsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PacketAcknowledgementsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PacketAcknowledgementsDefaultBody packet acknowledgements default body
swagger:model PacketAcknowledgementsDefaultBody
*/
type PacketAcknowledgementsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*PacketAcknowledgementsDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this packet acknowledgements default body
func (o *PacketAcknowledgementsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PacketAcknowledgementsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PacketAcknowledgements default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PacketAcknowledgements default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this packet acknowledgements default body based on the context it is used
func (o *PacketAcknowledgementsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PacketAcknowledgementsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PacketAcknowledgements default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PacketAcknowledgements default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PacketAcknowledgementsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PacketAcknowledgementsDefaultBody) UnmarshalBinary(b []byte) error {
	var res PacketAcknowledgementsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PacketAcknowledgementsDefaultBodyDetailsItems0 `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := ptypes.MarshalAny(foo)
//      ...
//      foo := &pb.Foo{}
//      if err := ptypes.UnmarshalAny(any, foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
swagger:model PacketAcknowledgementsDefaultBodyDetailsItems0
*/
type PacketAcknowledgementsDefaultBodyDetailsItems0 struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this packet acknowledgements default body details items0
func (o *PacketAcknowledgementsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this packet acknowledgements default body details items0 based on context it is used
func (o *PacketAcknowledgementsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PacketAcknowledgementsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PacketAcknowledgementsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res PacketAcknowledgementsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PacketAcknowledgementsOKBody QueryPacketAcknowledgemetsResponse is the request type for the
// Query/QueryPacketAcknowledgements RPC method
swagger:model PacketAcknowledgementsOKBody
*/
type PacketAcknowledgementsOKBody struct {

	// acknowledgements
	Acknowledgements []*PacketAcknowledgementsOKBodyAcknowledgementsItems0 `json:"acknowledgements"`

	// height
	Height *PacketAcknowledgementsOKBodyHeight `json:"height,omitempty"`

	// pagination
	Pagination *PacketAcknowledgementsOKBodyPagination `json:"pagination,omitempty"`
}

// Validate validates this packet acknowledgements o k body
func (o *PacketAcknowledgementsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAcknowledgements(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PacketAcknowledgementsOKBody) validateAcknowledgements(formats strfmt.Registry) error {
	if swag.IsZero(o.Acknowledgements) { // not required
		return nil
	}

	for i := 0; i < len(o.Acknowledgements); i++ {
		if swag.IsZero(o.Acknowledgements[i]) { // not required
			continue
		}

		if o.Acknowledgements[i] != nil {
			if err := o.Acknowledgements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packetAcknowledgementsOK" + "." + "acknowledgements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packetAcknowledgementsOK" + "." + "acknowledgements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PacketAcknowledgementsOKBody) validateHeight(formats strfmt.Registry) error {
	if swag.IsZero(o.Height) { // not required
		return nil
	}

	if o.Height != nil {
		if err := o.Height.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packetAcknowledgementsOK" + "." + "height")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packetAcknowledgementsOK" + "." + "height")
			}
			return err
		}
	}

	return nil
}

func (o *PacketAcknowledgementsOKBody) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packetAcknowledgementsOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packetAcknowledgementsOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this packet acknowledgements o k body based on the context it is used
func (o *PacketAcknowledgementsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAcknowledgements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PacketAcknowledgementsOKBody) contextValidateAcknowledgements(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Acknowledgements); i++ {

		if o.Acknowledgements[i] != nil {
			if err := o.Acknowledgements[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packetAcknowledgementsOK" + "." + "acknowledgements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packetAcknowledgementsOK" + "." + "acknowledgements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PacketAcknowledgementsOKBody) contextValidateHeight(ctx context.Context, formats strfmt.Registry) error {

	if o.Height != nil {
		if err := o.Height.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packetAcknowledgementsOK" + "." + "height")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packetAcknowledgementsOK" + "." + "height")
			}
			return err
		}
	}

	return nil
}

func (o *PacketAcknowledgementsOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {
		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packetAcknowledgementsOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packetAcknowledgementsOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PacketAcknowledgementsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PacketAcknowledgementsOKBody) UnmarshalBinary(b []byte) error {
	var res PacketAcknowledgementsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PacketAcknowledgementsOKBodyAcknowledgementsItems0 PacketState defines the generic type necessary to retrieve and store
// packet commitments, acknowledgements, and receipts.
// Caller is responsible for knowing the context necessary to interpret this
// state as a commitment, acknowledgement, or a receipt.
swagger:model PacketAcknowledgementsOKBodyAcknowledgementsItems0
*/
type PacketAcknowledgementsOKBodyAcknowledgementsItems0 struct {

	// channel unique identifier.
	ChannelID string `json:"channel_id,omitempty"`

	// embedded data that represents packet state.
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// channel port identifier.
	PortID string `json:"port_id,omitempty"`

	// packet sequence.
	Sequence string `json:"sequence,omitempty"`
}

// Validate validates this packet acknowledgements o k body acknowledgements items0
func (o *PacketAcknowledgementsOKBodyAcknowledgementsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this packet acknowledgements o k body acknowledgements items0 based on context it is used
func (o *PacketAcknowledgementsOKBodyAcknowledgementsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PacketAcknowledgementsOKBodyAcknowledgementsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PacketAcknowledgementsOKBodyAcknowledgementsItems0) UnmarshalBinary(b []byte) error {
	var res PacketAcknowledgementsOKBodyAcknowledgementsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PacketAcknowledgementsOKBodyHeight query block height
//
// Normally the RevisionHeight is incremented at each height while keeping
// RevisionNumber the same. However some consensus algorithms may choose to
// reset the height in certain conditions e.g. hard forks, state-machine
// breaking changes In these cases, the RevisionNumber is incremented so that
// height continues to be monitonically increasing even as the RevisionHeight
// gets reset
swagger:model PacketAcknowledgementsOKBodyHeight
*/
type PacketAcknowledgementsOKBodyHeight struct {

	// the height within the given revision
	RevisionHeight string `json:"revision_height,omitempty"`

	// the revision that the client is currently on
	RevisionNumber string `json:"revision_number,omitempty"`
}

// Validate validates this packet acknowledgements o k body height
func (o *PacketAcknowledgementsOKBodyHeight) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this packet acknowledgements o k body height based on context it is used
func (o *PacketAcknowledgementsOKBodyHeight) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PacketAcknowledgementsOKBodyHeight) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PacketAcknowledgementsOKBodyHeight) UnmarshalBinary(b []byte) error {
	var res PacketAcknowledgementsOKBodyHeight
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PacketAcknowledgementsOKBodyPagination pagination response
//
// PageResponse is to be embedded in gRPC response messages where the
// corresponding request message has used PageRequest.
//
//  message SomeResponse {
//          repeated Bar results = 1;
//          PageResponse page = 2;
//  }
swagger:model PacketAcknowledgementsOKBodyPagination
*/
type PacketAcknowledgementsOKBodyPagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this packet acknowledgements o k body pagination
func (o *PacketAcknowledgementsOKBodyPagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this packet acknowledgements o k body pagination based on context it is used
func (o *PacketAcknowledgementsOKBodyPagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PacketAcknowledgementsOKBodyPagination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PacketAcknowledgementsOKBodyPagination) UnmarshalBinary(b []byte) error {
	var res PacketAcknowledgementsOKBodyPagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
