// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DelegationTotalRewardsReader is a Reader for the DelegationTotalRewards structure.
type DelegationTotalRewardsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DelegationTotalRewardsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDelegationTotalRewardsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDelegationTotalRewardsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDelegationTotalRewardsOK creates a DelegationTotalRewardsOK with default headers values
func NewDelegationTotalRewardsOK() *DelegationTotalRewardsOK {
	return &DelegationTotalRewardsOK{}
}

/* DelegationTotalRewardsOK describes a response with status code 200, with default header values.

A successful response.
*/
type DelegationTotalRewardsOK struct {
	Payload *DelegationTotalRewardsOKBody
}

func (o *DelegationTotalRewardsOK) Error() string {
	return fmt.Sprintf("[GET /cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards][%d] delegationTotalRewardsOK  %+v", 200, o.Payload)
}
func (o *DelegationTotalRewardsOK) GetPayload() *DelegationTotalRewardsOKBody {
	return o.Payload
}

func (o *DelegationTotalRewardsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DelegationTotalRewardsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDelegationTotalRewardsDefault creates a DelegationTotalRewardsDefault with default headers values
func NewDelegationTotalRewardsDefault(code int) *DelegationTotalRewardsDefault {
	return &DelegationTotalRewardsDefault{
		_statusCode: code,
	}
}

/* DelegationTotalRewardsDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type DelegationTotalRewardsDefault struct {
	_statusCode int

	Payload *DelegationTotalRewardsDefaultBody
}

// Code gets the status code for the delegation total rewards default response
func (o *DelegationTotalRewardsDefault) Code() int {
	return o._statusCode
}

func (o *DelegationTotalRewardsDefault) Error() string {
	return fmt.Sprintf("[GET /cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards][%d] DelegationTotalRewards default  %+v", o._statusCode, o.Payload)
}
func (o *DelegationTotalRewardsDefault) GetPayload() *DelegationTotalRewardsDefaultBody {
	return o.Payload
}

func (o *DelegationTotalRewardsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DelegationTotalRewardsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DelegationTotalRewardsDefaultBody delegation total rewards default body
swagger:model DelegationTotalRewardsDefaultBody
*/
type DelegationTotalRewardsDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*DelegationTotalRewardsDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this delegation total rewards default body
func (o *DelegationTotalRewardsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DelegationTotalRewardsDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DelegationTotalRewards default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DelegationTotalRewards default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delegation total rewards default body based on the context it is used
func (o *DelegationTotalRewardsDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DelegationTotalRewardsDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DelegationTotalRewards default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DelegationTotalRewards default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DelegationTotalRewardsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DelegationTotalRewardsDefaultBody) UnmarshalBinary(b []byte) error {
	var res DelegationTotalRewardsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DelegationTotalRewardsDefaultBodyDetailsItems0 delegation total rewards default body details items0
swagger:model DelegationTotalRewardsDefaultBodyDetailsItems0
*/
type DelegationTotalRewardsDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this delegation total rewards default body details items0
func (o *DelegationTotalRewardsDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delegation total rewards default body details items0 based on context it is used
func (o *DelegationTotalRewardsDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DelegationTotalRewardsDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DelegationTotalRewardsDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res DelegationTotalRewardsDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DelegationTotalRewardsOKBody QueryDelegationTotalRewardsResponse is the response type for the
// Query/DelegationTotalRewards RPC method.
swagger:model DelegationTotalRewardsOKBody
*/
type DelegationTotalRewardsOKBody struct {

	// rewards defines all the rewards accrued by a delegator.
	Rewards []*DelegationTotalRewardsOKBodyRewardsItems0 `json:"rewards"`

	// total defines the sum of all the rewards.
	Total []*DelegationTotalRewardsOKBodyTotalItems0 `json:"total"`
}

// Validate validates this delegation total rewards o k body
func (o *DelegationTotalRewardsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRewards(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DelegationTotalRewardsOKBody) validateRewards(formats strfmt.Registry) error {
	if swag.IsZero(o.Rewards) { // not required
		return nil
	}

	for i := 0; i < len(o.Rewards); i++ {
		if swag.IsZero(o.Rewards[i]) { // not required
			continue
		}

		if o.Rewards[i] != nil {
			if err := o.Rewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delegationTotalRewardsOK" + "." + "rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("delegationTotalRewardsOK" + "." + "rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *DelegationTotalRewardsOKBody) validateTotal(formats strfmt.Registry) error {
	if swag.IsZero(o.Total) { // not required
		return nil
	}

	for i := 0; i < len(o.Total); i++ {
		if swag.IsZero(o.Total[i]) { // not required
			continue
		}

		if o.Total[i] != nil {
			if err := o.Total[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delegationTotalRewardsOK" + "." + "total" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("delegationTotalRewardsOK" + "." + "total" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delegation total rewards o k body based on the context it is used
func (o *DelegationTotalRewardsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRewards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DelegationTotalRewardsOKBody) contextValidateRewards(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Rewards); i++ {

		if o.Rewards[i] != nil {
			if err := o.Rewards[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delegationTotalRewardsOK" + "." + "rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("delegationTotalRewardsOK" + "." + "rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *DelegationTotalRewardsOKBody) contextValidateTotal(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Total); i++ {

		if o.Total[i] != nil {
			if err := o.Total[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delegationTotalRewardsOK" + "." + "total" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("delegationTotalRewardsOK" + "." + "total" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DelegationTotalRewardsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DelegationTotalRewardsOKBody) UnmarshalBinary(b []byte) error {
	var res DelegationTotalRewardsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DelegationTotalRewardsOKBodyRewardsItems0 DelegationDelegatorReward represents the properties
// of a delegator's delegation reward.
swagger:model DelegationTotalRewardsOKBodyRewardsItems0
*/
type DelegationTotalRewardsOKBodyRewardsItems0 struct {

	// reward
	Reward []*DelegationTotalRewardsOKBodyRewardsItems0RewardItems0 `json:"reward"`

	// validator address
	ValidatorAddress string `json:"validator_address,omitempty"`
}

// Validate validates this delegation total rewards o k body rewards items0
func (o *DelegationTotalRewardsOKBodyRewardsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReward(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DelegationTotalRewardsOKBodyRewardsItems0) validateReward(formats strfmt.Registry) error {
	if swag.IsZero(o.Reward) { // not required
		return nil
	}

	for i := 0; i < len(o.Reward); i++ {
		if swag.IsZero(o.Reward[i]) { // not required
			continue
		}

		if o.Reward[i] != nil {
			if err := o.Reward[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reward" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reward" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delegation total rewards o k body rewards items0 based on the context it is used
func (o *DelegationTotalRewardsOKBodyRewardsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateReward(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DelegationTotalRewardsOKBodyRewardsItems0) contextValidateReward(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Reward); i++ {

		if o.Reward[i] != nil {
			if err := o.Reward[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reward" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reward" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DelegationTotalRewardsOKBodyRewardsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DelegationTotalRewardsOKBodyRewardsItems0) UnmarshalBinary(b []byte) error {
	var res DelegationTotalRewardsOKBodyRewardsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DelegationTotalRewardsOKBodyRewardsItems0RewardItems0 DecCoin defines a token with a denomination and a decimal amount.
//
// NOTE: The amount field is an Dec which implements the custom method
// signatures required by gogoproto.
swagger:model DelegationTotalRewardsOKBodyRewardsItems0RewardItems0
*/
type DelegationTotalRewardsOKBodyRewardsItems0RewardItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this delegation total rewards o k body rewards items0 reward items0
func (o *DelegationTotalRewardsOKBodyRewardsItems0RewardItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delegation total rewards o k body rewards items0 reward items0 based on context it is used
func (o *DelegationTotalRewardsOKBodyRewardsItems0RewardItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DelegationTotalRewardsOKBodyRewardsItems0RewardItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DelegationTotalRewardsOKBodyRewardsItems0RewardItems0) UnmarshalBinary(b []byte) error {
	var res DelegationTotalRewardsOKBodyRewardsItems0RewardItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DelegationTotalRewardsOKBodyTotalItems0 DecCoin defines a token with a denomination and a decimal amount.
//
// NOTE: The amount field is an Dec which implements the custom method
// signatures required by gogoproto.
swagger:model DelegationTotalRewardsOKBodyTotalItems0
*/
type DelegationTotalRewardsOKBodyTotalItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this delegation total rewards o k body total items0
func (o *DelegationTotalRewardsOKBodyTotalItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delegation total rewards o k body total items0 based on context it is used
func (o *DelegationTotalRewardsOKBodyTotalItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DelegationTotalRewardsOKBodyTotalItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DelegationTotalRewardsOKBodyTotalItems0) UnmarshalBinary(b []byte) error {
	var res DelegationTotalRewardsOKBodyTotalItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
