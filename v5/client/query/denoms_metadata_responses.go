// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DenomsMetadataReader is a Reader for the DenomsMetadata structure.
type DenomsMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DenomsMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDenomsMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDenomsMetadataDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDenomsMetadataOK creates a DenomsMetadataOK with default headers values
func NewDenomsMetadataOK() *DenomsMetadataOK {
	return &DenomsMetadataOK{}
}

/* DenomsMetadataOK describes a response with status code 200, with default header values.

A successful response.
*/
type DenomsMetadataOK struct {
	Payload *DenomsMetadataOKBody
}

func (o *DenomsMetadataOK) Error() string {
	return fmt.Sprintf("[GET /cosmos/bank/v1beta1/denoms_metadata][%d] denomsMetadataOK  %+v", 200, o.Payload)
}
func (o *DenomsMetadataOK) GetPayload() *DenomsMetadataOKBody {
	return o.Payload
}

func (o *DenomsMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DenomsMetadataOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDenomsMetadataDefault creates a DenomsMetadataDefault with default headers values
func NewDenomsMetadataDefault(code int) *DenomsMetadataDefault {
	return &DenomsMetadataDefault{
		_statusCode: code,
	}
}

/* DenomsMetadataDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type DenomsMetadataDefault struct {
	_statusCode int

	Payload *DenomsMetadataDefaultBody
}

// Code gets the status code for the denoms metadata default response
func (o *DenomsMetadataDefault) Code() int {
	return o._statusCode
}

func (o *DenomsMetadataDefault) Error() string {
	return fmt.Sprintf("[GET /cosmos/bank/v1beta1/denoms_metadata][%d] DenomsMetadata default  %+v", o._statusCode, o.Payload)
}
func (o *DenomsMetadataDefault) GetPayload() *DenomsMetadataDefaultBody {
	return o.Payload
}

func (o *DenomsMetadataDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DenomsMetadataDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DenomsMetadataDefaultBody denoms metadata default body
swagger:model DenomsMetadataDefaultBody
*/
type DenomsMetadataDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*DenomsMetadataDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this denoms metadata default body
func (o *DenomsMetadataDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DenomsMetadataDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DenomsMetadata default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DenomsMetadata default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this denoms metadata default body based on the context it is used
func (o *DenomsMetadataDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DenomsMetadataDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DenomsMetadata default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DenomsMetadata default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DenomsMetadataDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomsMetadataDefaultBody) UnmarshalBinary(b []byte) error {
	var res DenomsMetadataDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DenomsMetadataDefaultBodyDetailsItems0 denoms metadata default body details items0
swagger:model DenomsMetadataDefaultBodyDetailsItems0
*/
type DenomsMetadataDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this denoms metadata default body details items0
func (o *DenomsMetadataDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this denoms metadata default body details items0 based on context it is used
func (o *DenomsMetadataDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DenomsMetadataDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomsMetadataDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res DenomsMetadataDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DenomsMetadataOKBody QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC
// method.
swagger:model DenomsMetadataOKBody
*/
type DenomsMetadataOKBody struct {

	// metadata provides the client information for all the registered tokens.
	Metadatas []*DenomsMetadataOKBodyMetadatasItems0 `json:"metadatas"`

	// pagination
	Pagination *DenomsMetadataOKBodyPagination `json:"pagination,omitempty"`
}

// Validate validates this denoms metadata o k body
func (o *DenomsMetadataOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadatas(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DenomsMetadataOKBody) validateMetadatas(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadatas) { // not required
		return nil
	}

	for i := 0; i < len(o.Metadatas); i++ {
		if swag.IsZero(o.Metadatas[i]) { // not required
			continue
		}

		if o.Metadatas[i] != nil {
			if err := o.Metadatas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("denomsMetadataOK" + "." + "metadatas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("denomsMetadataOK" + "." + "metadatas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *DenomsMetadataOKBody) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("denomsMetadataOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("denomsMetadataOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this denoms metadata o k body based on the context it is used
func (o *DenomsMetadataOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetadatas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DenomsMetadataOKBody) contextValidateMetadatas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Metadatas); i++ {

		if o.Metadatas[i] != nil {
			if err := o.Metadatas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("denomsMetadataOK" + "." + "metadatas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("denomsMetadataOK" + "." + "metadatas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *DenomsMetadataOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {
		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("denomsMetadataOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("denomsMetadataOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DenomsMetadataOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomsMetadataOKBody) UnmarshalBinary(b []byte) error {
	var res DenomsMetadataOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DenomsMetadataOKBodyMetadatasItems0 Metadata represents a struct that describes
// a basic token.
swagger:model DenomsMetadataOKBodyMetadatasItems0
*/
type DenomsMetadataOKBodyMetadatasItems0 struct {

	// base represents the base denom (should be the DenomUnit with exponent = 0).
	Base string `json:"base,omitempty"`

	// denom_units represents the list of DenomUnit's for a given coin
	DenomUnits []*DenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0 `json:"denom_units"`

	// description
	Description string `json:"description,omitempty"`

	// display indicates the suggested denom that should be
	// displayed in clients.
	Display string `json:"display,omitempty"`

	// name defines the name of the token (eg: Cosmos Atom)
	Name string `json:"name,omitempty"`

	// symbol is the token symbol usually shown on exchanges (eg: ATOM). This can
	// be the same as the display.
	Symbol string `json:"symbol,omitempty"`
}

// Validate validates this denoms metadata o k body metadatas items0
func (o *DenomsMetadataOKBodyMetadatasItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDenomUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DenomsMetadataOKBodyMetadatasItems0) validateDenomUnits(formats strfmt.Registry) error {
	if swag.IsZero(o.DenomUnits) { // not required
		return nil
	}

	for i := 0; i < len(o.DenomUnits); i++ {
		if swag.IsZero(o.DenomUnits[i]) { // not required
			continue
		}

		if o.DenomUnits[i] != nil {
			if err := o.DenomUnits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("denom_units" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("denom_units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this denoms metadata o k body metadatas items0 based on the context it is used
func (o *DenomsMetadataOKBodyMetadatasItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDenomUnits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DenomsMetadataOKBodyMetadatasItems0) contextValidateDenomUnits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.DenomUnits); i++ {

		if o.DenomUnits[i] != nil {
			if err := o.DenomUnits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("denom_units" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("denom_units" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DenomsMetadataOKBodyMetadatasItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomsMetadataOKBodyMetadatasItems0) UnmarshalBinary(b []byte) error {
	var res DenomsMetadataOKBodyMetadatasItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0 DenomUnit represents a struct that describes a given
// denomination unit of the basic token.
swagger:model DenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0
*/
type DenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0 struct {

	// aliases is a list of string aliases for the given denom
	Aliases []string `json:"aliases"`

	// denom represents the string name of the given denom unit (e.g uatom).
	Denom string `json:"denom,omitempty"`

	// exponent represents power of 10 exponent that one must
	// raise the base_denom to in order to equal the given DenomUnit's denom
	// 1 denom = 1^exponent base_denom
	// (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
	// exponent = 6, thus: 1 atom = 10^6 uatom).
	Exponent int64 `json:"exponent,omitempty"`
}

// Validate validates this denoms metadata o k body metadatas items0 denom units items0
func (o *DenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this denoms metadata o k body metadatas items0 denom units items0 based on context it is used
func (o *DenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0) UnmarshalBinary(b []byte) error {
	var res DenomsMetadataOKBodyMetadatasItems0DenomUnitsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DenomsMetadataOKBodyPagination pagination defines the pagination in the response.
swagger:model DenomsMetadataOKBodyPagination
*/
type DenomsMetadataOKBodyPagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this denoms metadata o k body pagination
func (o *DenomsMetadataOKBodyPagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this denoms metadata o k body pagination based on context it is used
func (o *DenomsMetadataOKBodyPagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DenomsMetadataOKBodyPagination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DenomsMetadataOKBodyPagination) UnmarshalBinary(b []byte) error {
	var res DenomsMetadataOKBodyPagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
