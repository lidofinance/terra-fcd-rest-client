// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExchangeRatesReader is a Reader for the ExchangeRates structure.
type ExchangeRatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExchangeRatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExchangeRatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewExchangeRatesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewExchangeRatesOK creates a ExchangeRatesOK with default headers values
func NewExchangeRatesOK() *ExchangeRatesOK {
	return &ExchangeRatesOK{}
}

/* ExchangeRatesOK describes a response with status code 200, with default header values.

A successful response.
*/
type ExchangeRatesOK struct {
	Payload *ExchangeRatesOKBody
}

func (o *ExchangeRatesOK) Error() string {
	return fmt.Sprintf("[GET /terra/oracle/v1beta1/denoms/exchange_rates][%d] exchangeRatesOK  %+v", 200, o.Payload)
}
func (o *ExchangeRatesOK) GetPayload() *ExchangeRatesOKBody {
	return o.Payload
}

func (o *ExchangeRatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ExchangeRatesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExchangeRatesDefault creates a ExchangeRatesDefault with default headers values
func NewExchangeRatesDefault(code int) *ExchangeRatesDefault {
	return &ExchangeRatesDefault{
		_statusCode: code,
	}
}

/* ExchangeRatesDefault describes a response with status code -1, with default header values.

An unexpected error response
*/
type ExchangeRatesDefault struct {
	_statusCode int

	Payload *ExchangeRatesDefaultBody
}

// Code gets the status code for the exchange rates default response
func (o *ExchangeRatesDefault) Code() int {
	return o._statusCode
}

func (o *ExchangeRatesDefault) Error() string {
	return fmt.Sprintf("[GET /terra/oracle/v1beta1/denoms/exchange_rates][%d] ExchangeRates default  %+v", o._statusCode, o.Payload)
}
func (o *ExchangeRatesDefault) GetPayload() *ExchangeRatesDefaultBody {
	return o.Payload
}

func (o *ExchangeRatesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ExchangeRatesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ExchangeRatesDefaultBody exchange rates default body
swagger:model ExchangeRatesDefaultBody
*/
type ExchangeRatesDefaultBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// details
	Details []*ExchangeRatesDefaultBodyDetailsItems0 `json:"details"`

	// error
	Error string `json:"error,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this exchange rates default body
func (o *ExchangeRatesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExchangeRatesDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExchangeRates default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ExchangeRates default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this exchange rates default body based on the context it is used
func (o *ExchangeRatesDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExchangeRatesDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Details); i++ {

		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ExchangeRates default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ExchangeRates default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ExchangeRatesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExchangeRatesDefaultBody) UnmarshalBinary(b []byte) error {
	var res ExchangeRatesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ExchangeRatesDefaultBodyDetailsItems0 exchange rates default body details items0
swagger:model ExchangeRatesDefaultBodyDetailsItems0
*/
type ExchangeRatesDefaultBodyDetailsItems0 struct {

	// type url
	TypeURL string `json:"type_url,omitempty"`

	// value
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this exchange rates default body details items0
func (o *ExchangeRatesDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this exchange rates default body details items0 based on context it is used
func (o *ExchangeRatesDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExchangeRatesDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExchangeRatesDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ExchangeRatesDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ExchangeRatesOKBody QueryExchangeRatesResponse is response type for the
// Query/ExchangeRates RPC method.
swagger:model ExchangeRatesOKBody
*/
type ExchangeRatesOKBody struct {

	// exchange_rates defines a list of the exchange rate for all whitelisted denoms.
	ExchangeRates []*ExchangeRatesOKBodyExchangeRatesItems0 `json:"exchange_rates"`
}

// Validate validates this exchange rates o k body
func (o *ExchangeRatesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExchangeRates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExchangeRatesOKBody) validateExchangeRates(formats strfmt.Registry) error {
	if swag.IsZero(o.ExchangeRates) { // not required
		return nil
	}

	for i := 0; i < len(o.ExchangeRates); i++ {
		if swag.IsZero(o.ExchangeRates[i]) { // not required
			continue
		}

		if o.ExchangeRates[i] != nil {
			if err := o.ExchangeRates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exchangeRatesOK" + "." + "exchange_rates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exchangeRatesOK" + "." + "exchange_rates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this exchange rates o k body based on the context it is used
func (o *ExchangeRatesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateExchangeRates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ExchangeRatesOKBody) contextValidateExchangeRates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ExchangeRates); i++ {

		if o.ExchangeRates[i] != nil {
			if err := o.ExchangeRates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exchangeRatesOK" + "." + "exchange_rates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exchangeRatesOK" + "." + "exchange_rates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ExchangeRatesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExchangeRatesOKBody) UnmarshalBinary(b []byte) error {
	var res ExchangeRatesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ExchangeRatesOKBodyExchangeRatesItems0 DecCoin defines a token with a denomination and a decimal amount.
//
// NOTE: The amount field is an Dec which implements the custom method
// signatures required by gogoproto.
swagger:model ExchangeRatesOKBodyExchangeRatesItems0
*/
type ExchangeRatesOKBodyExchangeRatesItems0 struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this exchange rates o k body exchange rates items0
func (o *ExchangeRatesOKBodyExchangeRatesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this exchange rates o k body exchange rates items0 based on context it is used
func (o *ExchangeRatesOKBodyExchangeRatesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExchangeRatesOKBodyExchangeRatesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExchangeRatesOKBodyExchangeRatesItems0) UnmarshalBinary(b []byte) error {
	var res ExchangeRatesOKBodyExchangeRatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
