// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewConnectionConsensusStateParams creates a new ConnectionConsensusStateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewConnectionConsensusStateParams() *ConnectionConsensusStateParams {
	return &ConnectionConsensusStateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewConnectionConsensusStateParamsWithTimeout creates a new ConnectionConsensusStateParams object
// with the ability to set a timeout on a request.
func NewConnectionConsensusStateParamsWithTimeout(timeout time.Duration) *ConnectionConsensusStateParams {
	return &ConnectionConsensusStateParams{
		timeout: timeout,
	}
}

// NewConnectionConsensusStateParamsWithContext creates a new ConnectionConsensusStateParams object
// with the ability to set a context for a request.
func NewConnectionConsensusStateParamsWithContext(ctx context.Context) *ConnectionConsensusStateParams {
	return &ConnectionConsensusStateParams{
		Context: ctx,
	}
}

// NewConnectionConsensusStateParamsWithHTTPClient creates a new ConnectionConsensusStateParams object
// with the ability to set a custom HTTPClient for a request.
func NewConnectionConsensusStateParamsWithHTTPClient(client *http.Client) *ConnectionConsensusStateParams {
	return &ConnectionConsensusStateParams{
		HTTPClient: client,
	}
}

/* ConnectionConsensusStateParams contains all the parameters to send to the API endpoint
   for the connection consensus state operation.

   Typically these are written to a http.Request.
*/
type ConnectionConsensusStateParams struct {

	/* ConnectionID.

	   connection identifier
	*/
	ConnectionID string

	// RevisionHeight.
	//
	// Format: uint64
	RevisionHeight string

	// RevisionNumber.
	//
	// Format: uint64
	RevisionNumber string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the connection consensus state params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ConnectionConsensusStateParams) WithDefaults() *ConnectionConsensusStateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the connection consensus state params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ConnectionConsensusStateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the connection consensus state params
func (o *ConnectionConsensusStateParams) WithTimeout(timeout time.Duration) *ConnectionConsensusStateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the connection consensus state params
func (o *ConnectionConsensusStateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the connection consensus state params
func (o *ConnectionConsensusStateParams) WithContext(ctx context.Context) *ConnectionConsensusStateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the connection consensus state params
func (o *ConnectionConsensusStateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the connection consensus state params
func (o *ConnectionConsensusStateParams) WithHTTPClient(client *http.Client) *ConnectionConsensusStateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the connection consensus state params
func (o *ConnectionConsensusStateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnectionID adds the connectionID to the connection consensus state params
func (o *ConnectionConsensusStateParams) WithConnectionID(connectionID string) *ConnectionConsensusStateParams {
	o.SetConnectionID(connectionID)
	return o
}

// SetConnectionID adds the connectionId to the connection consensus state params
func (o *ConnectionConsensusStateParams) SetConnectionID(connectionID string) {
	o.ConnectionID = connectionID
}

// WithRevisionHeight adds the revisionHeight to the connection consensus state params
func (o *ConnectionConsensusStateParams) WithRevisionHeight(revisionHeight string) *ConnectionConsensusStateParams {
	o.SetRevisionHeight(revisionHeight)
	return o
}

// SetRevisionHeight adds the revisionHeight to the connection consensus state params
func (o *ConnectionConsensusStateParams) SetRevisionHeight(revisionHeight string) {
	o.RevisionHeight = revisionHeight
}

// WithRevisionNumber adds the revisionNumber to the connection consensus state params
func (o *ConnectionConsensusStateParams) WithRevisionNumber(revisionNumber string) *ConnectionConsensusStateParams {
	o.SetRevisionNumber(revisionNumber)
	return o
}

// SetRevisionNumber adds the revisionNumber to the connection consensus state params
func (o *ConnectionConsensusStateParams) SetRevisionNumber(revisionNumber string) {
	o.RevisionNumber = revisionNumber
}

// WriteToRequest writes these params to a swagger request
func (o *ConnectionConsensusStateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param connection_id
	if err := r.SetPathParam("connection_id", o.ConnectionID); err != nil {
		return err
	}

	// path param revision_height
	if err := r.SetPathParam("revision_height", o.RevisionHeight); err != nil {
		return err
	}

	// path param revision_number
	if err := r.SetPathParam("revision_number", o.RevisionNumber); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
