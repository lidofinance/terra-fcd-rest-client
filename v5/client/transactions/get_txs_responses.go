// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetTxsReader is a Reader for the GetTxs structure.
type GetTxsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTxsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTxsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTxsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTxsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTxsOK creates a GetTxsOK with default headers values
func NewGetTxsOK() *GetTxsOK {
	return &GetTxsOK{}
}

/* GetTxsOK describes a response with status code 200, with default header values.

All txs matching the provided events
*/
type GetTxsOK struct {
	Payload *GetTxsOKBody
}

func (o *GetTxsOK) Error() string {
	return fmt.Sprintf("[GET /txs][%d] getTxsOK  %+v", 200, o.Payload)
}
func (o *GetTxsOK) GetPayload() *GetTxsOKBody {
	return o.Payload
}

func (o *GetTxsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetTxsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTxsBadRequest creates a GetTxsBadRequest with default headers values
func NewGetTxsBadRequest() *GetTxsBadRequest {
	return &GetTxsBadRequest{}
}

/* GetTxsBadRequest describes a response with status code 400, with default header values.

Invalid search events
*/
type GetTxsBadRequest struct {
}

func (o *GetTxsBadRequest) Error() string {
	return fmt.Sprintf("[GET /txs][%d] getTxsBadRequest ", 400)
}

func (o *GetTxsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTxsInternalServerError creates a GetTxsInternalServerError with default headers values
func NewGetTxsInternalServerError() *GetTxsInternalServerError {
	return &GetTxsInternalServerError{}
}

/* GetTxsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetTxsInternalServerError struct {
}

func (o *GetTxsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /txs][%d] getTxsInternalServerError ", 500)
}

func (o *GetTxsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetTxsOKBody get txs o k body
swagger:model GetTxsOKBody
*/
type GetTxsOKBody struct {

	// count
	// Example: 1
	Count float64 `json:"count,omitempty"`

	// limit
	// Example: 30
	Limit float64 `json:"limit,omitempty"`

	// page number
	// Example: 1
	PageNumber float64 `json:"page_number,omitempty"`

	// page total
	// Example: 1
	PageTotal float64 `json:"page_total,omitempty"`

	// total count
	// Example: 1
	TotalCount float64 `json:"total_count,omitempty"`

	// txs
	Txs []*GetTxsOKBodyTxsItems0 `json:"txs"`
}

// Validate validates this get txs o k body
func (o *GetTxsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTxs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsOKBody) validateTxs(formats strfmt.Registry) error {
	if swag.IsZero(o.Txs) { // not required
		return nil
	}

	for i := 0; i < len(o.Txs); i++ {
		if swag.IsZero(o.Txs[i]) { // not required
			continue
		}

		if o.Txs[i] != nil {
			if err := o.Txs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTxsOK" + "." + "txs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTxsOK" + "." + "txs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get txs o k body based on the context it is used
func (o *GetTxsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTxs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsOKBody) contextValidateTxs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Txs); i++ {

		if o.Txs[i] != nil {
			if err := o.Txs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTxsOK" + "." + "txs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTxsOK" + "." + "txs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsOKBody) UnmarshalBinary(b []byte) error {
	var res GetTxsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsOKBodyTxsItems0 get txs o k body txs items0
swagger:model GetTxsOKBodyTxsItems0
*/
type GetTxsOKBodyTxsItems0 struct {

	// hash
	// Example: D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656
	Hash string `json:"hash,omitempty"`

	// height
	// Example: 368
	Height float64 `json:"height,omitempty"`

	// result
	Result *GetTxsOKBodyTxsItems0Result `json:"result,omitempty"`

	// tx
	Tx *GetTxsOKBodyTxsItems0Tx `json:"tx,omitempty"`
}

// Validate validates this get txs o k body txs items0
func (o *GetTxsOKBodyTxsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsOKBodyTxsItems0) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

func (o *GetTxsOKBodyTxsItems0) validateTx(formats strfmt.Registry) error {
	if swag.IsZero(o.Tx) { // not required
		return nil
	}

	if o.Tx != nil {
		if err := o.Tx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get txs o k body txs items0 based on the context it is used
func (o *GetTxsOKBodyTxsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsOKBodyTxsItems0) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if o.Result != nil {
		if err := o.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

func (o *GetTxsOKBodyTxsItems0) contextValidateTx(ctx context.Context, formats strfmt.Registry) error {

	if o.Tx != nil {
		if err := o.Tx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0) UnmarshalBinary(b []byte) error {
	var res GetTxsOKBodyTxsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsOKBodyTxsItems0Result get txs o k body txs items0 result
swagger:model GetTxsOKBodyTxsItems0Result
*/
type GetTxsOKBodyTxsItems0Result struct {

	// gas used
	// Example: 26354
	GasUsed string `json:"gas_used,omitempty"`

	// gas wanted
	// Example: 200000
	GasWanted string `json:"gas_wanted,omitempty"`

	// log
	Log string `json:"log,omitempty"`

	// tags
	Tags []*GetTxsOKBodyTxsItems0ResultTagsItems0 `json:"tags"`
}

// Validate validates this get txs o k body txs items0 result
func (o *GetTxsOKBodyTxsItems0Result) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsOKBodyTxsItems0Result) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(o.Tags) { // not required
		return nil
	}

	for i := 0; i < len(o.Tags); i++ {
		if swag.IsZero(o.Tags[i]) { // not required
			continue
		}

		if o.Tags[i] != nil {
			if err := o.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("result" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("result" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get txs o k body txs items0 result based on the context it is used
func (o *GetTxsOKBodyTxsItems0Result) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsOKBodyTxsItems0Result) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Tags); i++ {

		if o.Tags[i] != nil {
			if err := o.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("result" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("result" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0Result) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0Result) UnmarshalBinary(b []byte) error {
	var res GetTxsOKBodyTxsItems0Result
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsOKBodyTxsItems0ResultTagsItems0 get txs o k body txs items0 result tags items0
swagger:model GetTxsOKBodyTxsItems0ResultTagsItems0
*/
type GetTxsOKBodyTxsItems0ResultTagsItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this get txs o k body txs items0 result tags items0
func (o *GetTxsOKBodyTxsItems0ResultTagsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get txs o k body txs items0 result tags items0 based on context it is used
func (o *GetTxsOKBodyTxsItems0ResultTagsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0ResultTagsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0ResultTagsItems0) UnmarshalBinary(b []byte) error {
	var res GetTxsOKBodyTxsItems0ResultTagsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsOKBodyTxsItems0Tx get txs o k body txs items0 tx
swagger:model GetTxsOKBodyTxsItems0Tx
*/
type GetTxsOKBodyTxsItems0Tx struct {

	// fee
	Fee *GetTxsOKBodyTxsItems0TxFee `json:"fee,omitempty"`

	// memo
	Memo string `json:"memo,omitempty"`

	// msg
	Msg []string `json:"msg"`

	// signature
	Signature *GetTxsOKBodyTxsItems0TxSignature `json:"signature,omitempty"`
}

// Validate validates this get txs o k body txs items0 tx
func (o *GetTxsOKBodyTxsItems0Tx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsOKBodyTxsItems0Tx) validateFee(formats strfmt.Registry) error {
	if swag.IsZero(o.Fee) { // not required
		return nil
	}

	if o.Fee != nil {
		if err := o.Fee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *GetTxsOKBodyTxsItems0Tx) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(o.Signature) { // not required
		return nil
	}

	if o.Signature != nil {
		if err := o.Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get txs o k body txs items0 tx based on the context it is used
func (o *GetTxsOKBodyTxsItems0Tx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsOKBodyTxsItems0Tx) contextValidateFee(ctx context.Context, formats strfmt.Registry) error {

	if o.Fee != nil {
		if err := o.Fee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *GetTxsOKBodyTxsItems0Tx) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if o.Signature != nil {
		if err := o.Signature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0Tx) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0Tx) UnmarshalBinary(b []byte) error {
	var res GetTxsOKBodyTxsItems0Tx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsOKBodyTxsItems0TxFee get txs o k body txs items0 tx fee
swagger:model GetTxsOKBodyTxsItems0TxFee
*/
type GetTxsOKBodyTxsItems0TxFee struct {

	// amount
	Amount []*GetTxsOKBodyTxsItems0TxFeeAmountItems0 `json:"amount"`

	// gas
	Gas string `json:"gas,omitempty"`
}

// Validate validates this get txs o k body txs items0 tx fee
func (o *GetTxsOKBodyTxsItems0TxFee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsOKBodyTxsItems0TxFee) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	for i := 0; i < len(o.Amount); i++ {
		if swag.IsZero(o.Amount[i]) { // not required
			continue
		}

		if o.Amount[i] != nil {
			if err := o.Amount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get txs o k body txs items0 tx fee based on the context it is used
func (o *GetTxsOKBodyTxsItems0TxFee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsOKBodyTxsItems0TxFee) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Amount); i++ {

		if o.Amount[i] != nil {
			if err := o.Amount[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0TxFee) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0TxFee) UnmarshalBinary(b []byte) error {
	var res GetTxsOKBodyTxsItems0TxFee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsOKBodyTxsItems0TxFeeAmountItems0 get txs o k body txs items0 tx fee amount items0
swagger:model GetTxsOKBodyTxsItems0TxFeeAmountItems0
*/
type GetTxsOKBodyTxsItems0TxFeeAmountItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this get txs o k body txs items0 tx fee amount items0
func (o *GetTxsOKBodyTxsItems0TxFeeAmountItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get txs o k body txs items0 tx fee amount items0 based on context it is used
func (o *GetTxsOKBodyTxsItems0TxFeeAmountItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0TxFeeAmountItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0TxFeeAmountItems0) UnmarshalBinary(b []byte) error {
	var res GetTxsOKBodyTxsItems0TxFeeAmountItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsOKBodyTxsItems0TxSignature get txs o k body txs items0 tx signature
swagger:model GetTxsOKBodyTxsItems0TxSignature
*/
type GetTxsOKBodyTxsItems0TxSignature struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// pub key
	PubKey *GetTxsOKBodyTxsItems0TxSignaturePubKey `json:"pub_key,omitempty"`

	// sequence
	// Example: 0
	Sequence string `json:"sequence,omitempty"`

	// signature
	// Example: MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
	Signature string `json:"signature,omitempty"`
}

// Validate validates this get txs o k body txs items0 tx signature
func (o *GetTxsOKBodyTxsItems0TxSignature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePubKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsOKBodyTxsItems0TxSignature) validatePubKey(formats strfmt.Registry) error {
	if swag.IsZero(o.PubKey) { // not required
		return nil
	}

	if o.PubKey != nil {
		if err := o.PubKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get txs o k body txs items0 tx signature based on the context it is used
func (o *GetTxsOKBodyTxsItems0TxSignature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePubKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsOKBodyTxsItems0TxSignature) contextValidatePubKey(ctx context.Context, formats strfmt.Registry) error {

	if o.PubKey != nil {
		if err := o.PubKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0TxSignature) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0TxSignature) UnmarshalBinary(b []byte) error {
	var res GetTxsOKBodyTxsItems0TxSignature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsOKBodyTxsItems0TxSignaturePubKey get txs o k body txs items0 tx signature pub key
swagger:model GetTxsOKBodyTxsItems0TxSignaturePubKey
*/
type GetTxsOKBodyTxsItems0TxSignaturePubKey struct {

	// type
	// Example: tendermint/PubKeySecp256k1
	Type string `json:"type,omitempty"`

	// value
	// Example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
	Value string `json:"value,omitempty"`
}

// Validate validates this get txs o k body txs items0 tx signature pub key
func (o *GetTxsOKBodyTxsItems0TxSignaturePubKey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get txs o k body txs items0 tx signature pub key based on context it is used
func (o *GetTxsOKBodyTxsItems0TxSignaturePubKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0TxSignaturePubKey) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsOKBodyTxsItems0TxSignaturePubKey) UnmarshalBinary(b []byte) error {
	var res GetTxsOKBodyTxsItems0TxSignaturePubKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
