// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetTxsHashReader is a Reader for the GetTxsHash structure.
type GetTxsHashReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTxsHashReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTxsHashOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetTxsHashInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTxsHashOK creates a GetTxsHashOK with default headers values
func NewGetTxsHashOK() *GetTxsHashOK {
	return &GetTxsHashOK{}
}

/* GetTxsHashOK describes a response with status code 200, with default header values.

Tx with the provided hash
*/
type GetTxsHashOK struct {
	Payload *GetTxsHashOKBody
}

func (o *GetTxsHashOK) Error() string {
	return fmt.Sprintf("[GET /txs/{hash}][%d] getTxsHashOK  %+v", 200, o.Payload)
}
func (o *GetTxsHashOK) GetPayload() *GetTxsHashOKBody {
	return o.Payload
}

func (o *GetTxsHashOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetTxsHashOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTxsHashInternalServerError creates a GetTxsHashInternalServerError with default headers values
func NewGetTxsHashInternalServerError() *GetTxsHashInternalServerError {
	return &GetTxsHashInternalServerError{}
}

/* GetTxsHashInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetTxsHashInternalServerError struct {
}

func (o *GetTxsHashInternalServerError) Error() string {
	return fmt.Sprintf("[GET /txs/{hash}][%d] getTxsHashInternalServerError ", 500)
}

func (o *GetTxsHashInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetTxsHashOKBody get txs hash o k body
swagger:model GetTxsHashOKBody
*/
type GetTxsHashOKBody struct {

	// hash
	// Example: D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656
	Hash string `json:"hash,omitempty"`

	// height
	// Example: 368
	Height float64 `json:"height,omitempty"`

	// result
	Result *GetTxsHashOKBodyResult `json:"result,omitempty"`

	// tx
	Tx *GetTxsHashOKBodyTx `json:"tx,omitempty"`
}

// Validate validates this get txs hash o k body
func (o *GetTxsHashOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsHashOKBody) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTxsHashOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTxsHashOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

func (o *GetTxsHashOKBody) validateTx(formats strfmt.Registry) error {
	if swag.IsZero(o.Tx) { // not required
		return nil
	}

	if o.Tx != nil {
		if err := o.Tx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTxsHashOK" + "." + "tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTxsHashOK" + "." + "tx")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get txs hash o k body based on the context it is used
func (o *GetTxsHashOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsHashOKBody) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if o.Result != nil {
		if err := o.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTxsHashOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTxsHashOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

func (o *GetTxsHashOKBody) contextValidateTx(ctx context.Context, formats strfmt.Registry) error {

	if o.Tx != nil {
		if err := o.Tx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTxsHashOK" + "." + "tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTxsHashOK" + "." + "tx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsHashOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsHashOKBody) UnmarshalBinary(b []byte) error {
	var res GetTxsHashOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsHashOKBodyResult get txs hash o k body result
swagger:model GetTxsHashOKBodyResult
*/
type GetTxsHashOKBodyResult struct {

	// gas used
	// Example: 26354
	GasUsed string `json:"gas_used,omitempty"`

	// gas wanted
	// Example: 200000
	GasWanted string `json:"gas_wanted,omitempty"`

	// log
	Log string `json:"log,omitempty"`

	// tags
	Tags []*GetTxsHashOKBodyResultTagsItems0 `json:"tags"`
}

// Validate validates this get txs hash o k body result
func (o *GetTxsHashOKBodyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsHashOKBodyResult) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(o.Tags) { // not required
		return nil
	}

	for i := 0; i < len(o.Tags); i++ {
		if swag.IsZero(o.Tags[i]) { // not required
			continue
		}

		if o.Tags[i] != nil {
			if err := o.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTxsHashOK" + "." + "result" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTxsHashOK" + "." + "result" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get txs hash o k body result based on the context it is used
func (o *GetTxsHashOKBodyResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsHashOKBodyResult) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Tags); i++ {

		if o.Tags[i] != nil {
			if err := o.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTxsHashOK" + "." + "result" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTxsHashOK" + "." + "result" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsHashOKBodyResult) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsHashOKBodyResult) UnmarshalBinary(b []byte) error {
	var res GetTxsHashOKBodyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsHashOKBodyResultTagsItems0 get txs hash o k body result tags items0
swagger:model GetTxsHashOKBodyResultTagsItems0
*/
type GetTxsHashOKBodyResultTagsItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this get txs hash o k body result tags items0
func (o *GetTxsHashOKBodyResultTagsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get txs hash o k body result tags items0 based on context it is used
func (o *GetTxsHashOKBodyResultTagsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsHashOKBodyResultTagsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsHashOKBodyResultTagsItems0) UnmarshalBinary(b []byte) error {
	var res GetTxsHashOKBodyResultTagsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsHashOKBodyTx get txs hash o k body tx
swagger:model GetTxsHashOKBodyTx
*/
type GetTxsHashOKBodyTx struct {

	// fee
	Fee *GetTxsHashOKBodyTxFee `json:"fee,omitempty"`

	// memo
	Memo string `json:"memo,omitempty"`

	// msg
	Msg []string `json:"msg"`

	// signature
	Signature *GetTxsHashOKBodyTxSignature `json:"signature,omitempty"`
}

// Validate validates this get txs hash o k body tx
func (o *GetTxsHashOKBodyTx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsHashOKBodyTx) validateFee(formats strfmt.Registry) error {
	if swag.IsZero(o.Fee) { // not required
		return nil
	}

	if o.Fee != nil {
		if err := o.Fee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTxsHashOK" + "." + "tx" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTxsHashOK" + "." + "tx" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *GetTxsHashOKBodyTx) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(o.Signature) { // not required
		return nil
	}

	if o.Signature != nil {
		if err := o.Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTxsHashOK" + "." + "tx" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTxsHashOK" + "." + "tx" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get txs hash o k body tx based on the context it is used
func (o *GetTxsHashOKBodyTx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsHashOKBodyTx) contextValidateFee(ctx context.Context, formats strfmt.Registry) error {

	if o.Fee != nil {
		if err := o.Fee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTxsHashOK" + "." + "tx" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTxsHashOK" + "." + "tx" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (o *GetTxsHashOKBodyTx) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if o.Signature != nil {
		if err := o.Signature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTxsHashOK" + "." + "tx" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTxsHashOK" + "." + "tx" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsHashOKBodyTx) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsHashOKBodyTx) UnmarshalBinary(b []byte) error {
	var res GetTxsHashOKBodyTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsHashOKBodyTxFee get txs hash o k body tx fee
swagger:model GetTxsHashOKBodyTxFee
*/
type GetTxsHashOKBodyTxFee struct {

	// amount
	Amount []*GetTxsHashOKBodyTxFeeAmountItems0 `json:"amount"`

	// gas
	Gas string `json:"gas,omitempty"`
}

// Validate validates this get txs hash o k body tx fee
func (o *GetTxsHashOKBodyTxFee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsHashOKBodyTxFee) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	for i := 0; i < len(o.Amount); i++ {
		if swag.IsZero(o.Amount[i]) { // not required
			continue
		}

		if o.Amount[i] != nil {
			if err := o.Amount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTxsHashOK" + "." + "tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTxsHashOK" + "." + "tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get txs hash o k body tx fee based on the context it is used
func (o *GetTxsHashOKBodyTxFee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsHashOKBodyTxFee) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Amount); i++ {

		if o.Amount[i] != nil {
			if err := o.Amount[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTxsHashOK" + "." + "tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getTxsHashOK" + "." + "tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsHashOKBodyTxFee) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsHashOKBodyTxFee) UnmarshalBinary(b []byte) error {
	var res GetTxsHashOKBodyTxFee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsHashOKBodyTxFeeAmountItems0 get txs hash o k body tx fee amount items0
swagger:model GetTxsHashOKBodyTxFeeAmountItems0
*/
type GetTxsHashOKBodyTxFeeAmountItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this get txs hash o k body tx fee amount items0
func (o *GetTxsHashOKBodyTxFeeAmountItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get txs hash o k body tx fee amount items0 based on context it is used
func (o *GetTxsHashOKBodyTxFeeAmountItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsHashOKBodyTxFeeAmountItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsHashOKBodyTxFeeAmountItems0) UnmarshalBinary(b []byte) error {
	var res GetTxsHashOKBodyTxFeeAmountItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsHashOKBodyTxSignature get txs hash o k body tx signature
swagger:model GetTxsHashOKBodyTxSignature
*/
type GetTxsHashOKBodyTxSignature struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// pub key
	PubKey *GetTxsHashOKBodyTxSignaturePubKey `json:"pub_key,omitempty"`

	// sequence
	// Example: 0
	Sequence string `json:"sequence,omitempty"`

	// signature
	// Example: MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
	Signature string `json:"signature,omitempty"`
}

// Validate validates this get txs hash o k body tx signature
func (o *GetTxsHashOKBodyTxSignature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePubKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsHashOKBodyTxSignature) validatePubKey(formats strfmt.Registry) error {
	if swag.IsZero(o.PubKey) { // not required
		return nil
	}

	if o.PubKey != nil {
		if err := o.PubKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTxsHashOK" + "." + "tx" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTxsHashOK" + "." + "tx" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get txs hash o k body tx signature based on the context it is used
func (o *GetTxsHashOKBodyTxSignature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePubKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTxsHashOKBodyTxSignature) contextValidatePubKey(ctx context.Context, formats strfmt.Registry) error {

	if o.PubKey != nil {
		if err := o.PubKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTxsHashOK" + "." + "tx" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getTxsHashOK" + "." + "tx" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsHashOKBodyTxSignature) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsHashOKBodyTxSignature) UnmarshalBinary(b []byte) error {
	var res GetTxsHashOKBodyTxSignature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTxsHashOKBodyTxSignaturePubKey get txs hash o k body tx signature pub key
swagger:model GetTxsHashOKBodyTxSignaturePubKey
*/
type GetTxsHashOKBodyTxSignaturePubKey struct {

	// type
	// Example: tendermint/PubKeySecp256k1
	Type string `json:"type,omitempty"`

	// value
	// Example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
	Value string `json:"value,omitempty"`
}

// Validate validates this get txs hash o k body tx signature pub key
func (o *GetTxsHashOKBodyTxSignaturePubKey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get txs hash o k body tx signature pub key based on context it is used
func (o *GetTxsHashOKBodyTxSignaturePubKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTxsHashOKBodyTxSignaturePubKey) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTxsHashOKBodyTxSignaturePubKey) UnmarshalBinary(b []byte) error {
	var res GetTxsHashOKBodyTxSignaturePubKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
