// Code generated by go-swagger; DO NOT EDIT.

package staking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetStakingRedelegationsParams creates a new GetStakingRedelegationsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetStakingRedelegationsParams() *GetStakingRedelegationsParams {
	return &GetStakingRedelegationsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetStakingRedelegationsParamsWithTimeout creates a new GetStakingRedelegationsParams object
// with the ability to set a timeout on a request.
func NewGetStakingRedelegationsParamsWithTimeout(timeout time.Duration) *GetStakingRedelegationsParams {
	return &GetStakingRedelegationsParams{
		timeout: timeout,
	}
}

// NewGetStakingRedelegationsParamsWithContext creates a new GetStakingRedelegationsParams object
// with the ability to set a context for a request.
func NewGetStakingRedelegationsParamsWithContext(ctx context.Context) *GetStakingRedelegationsParams {
	return &GetStakingRedelegationsParams{
		Context: ctx,
	}
}

// NewGetStakingRedelegationsParamsWithHTTPClient creates a new GetStakingRedelegationsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetStakingRedelegationsParamsWithHTTPClient(client *http.Client) *GetStakingRedelegationsParams {
	return &GetStakingRedelegationsParams{
		HTTPClient: client,
	}
}

/* GetStakingRedelegationsParams contains all the parameters to send to the API endpoint
   for the get staking redelegations operation.

   Typically these are written to a http.Request.
*/
type GetStakingRedelegationsParams struct {

	/* Delegator.

	   Bech32 AccAddress of Delegator
	*/
	Delegator *string

	/* ValidatorFrom.

	   Bech32 ValAddress of SrcValidator
	*/
	ValidatorFrom *string

	/* ValidatorTo.

	   Bech32 ValAddress of DstValidator
	*/
	ValidatorTo *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get staking redelegations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetStakingRedelegationsParams) WithDefaults() *GetStakingRedelegationsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get staking redelegations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetStakingRedelegationsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get staking redelegations params
func (o *GetStakingRedelegationsParams) WithTimeout(timeout time.Duration) *GetStakingRedelegationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get staking redelegations params
func (o *GetStakingRedelegationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get staking redelegations params
func (o *GetStakingRedelegationsParams) WithContext(ctx context.Context) *GetStakingRedelegationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get staking redelegations params
func (o *GetStakingRedelegationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get staking redelegations params
func (o *GetStakingRedelegationsParams) WithHTTPClient(client *http.Client) *GetStakingRedelegationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get staking redelegations params
func (o *GetStakingRedelegationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDelegator adds the delegator to the get staking redelegations params
func (o *GetStakingRedelegationsParams) WithDelegator(delegator *string) *GetStakingRedelegationsParams {
	o.SetDelegator(delegator)
	return o
}

// SetDelegator adds the delegator to the get staking redelegations params
func (o *GetStakingRedelegationsParams) SetDelegator(delegator *string) {
	o.Delegator = delegator
}

// WithValidatorFrom adds the validatorFrom to the get staking redelegations params
func (o *GetStakingRedelegationsParams) WithValidatorFrom(validatorFrom *string) *GetStakingRedelegationsParams {
	o.SetValidatorFrom(validatorFrom)
	return o
}

// SetValidatorFrom adds the validatorFrom to the get staking redelegations params
func (o *GetStakingRedelegationsParams) SetValidatorFrom(validatorFrom *string) {
	o.ValidatorFrom = validatorFrom
}

// WithValidatorTo adds the validatorTo to the get staking redelegations params
func (o *GetStakingRedelegationsParams) WithValidatorTo(validatorTo *string) *GetStakingRedelegationsParams {
	o.SetValidatorTo(validatorTo)
	return o
}

// SetValidatorTo adds the validatorTo to the get staking redelegations params
func (o *GetStakingRedelegationsParams) SetValidatorTo(validatorTo *string) {
	o.ValidatorTo = validatorTo
}

// WriteToRequest writes these params to a swagger request
func (o *GetStakingRedelegationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Delegator != nil {

		// query param delegator
		var qrDelegator string

		if o.Delegator != nil {
			qrDelegator = *o.Delegator
		}
		qDelegator := qrDelegator
		if qDelegator != "" {

			if err := r.SetQueryParam("delegator", qDelegator); err != nil {
				return err
			}
		}
	}

	if o.ValidatorFrom != nil {

		// query param validator_from
		var qrValidatorFrom string

		if o.ValidatorFrom != nil {
			qrValidatorFrom = *o.ValidatorFrom
		}
		qValidatorFrom := qrValidatorFrom
		if qValidatorFrom != "" {

			if err := r.SetQueryParam("validator_from", qValidatorFrom); err != nil {
				return err
			}
		}
	}

	if o.ValidatorTo != nil {

		// query param validator_to
		var qrValidatorTo string

		if o.ValidatorTo != nil {
			qrValidatorTo = *o.ValidatorTo
		}
		qValidatorTo := qrValidatorTo
		if qValidatorTo != "" {

			if err := r.SetQueryParam("validator_to", qValidatorTo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
