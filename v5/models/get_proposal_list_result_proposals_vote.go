// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetProposalListResultProposalsVote get proposal list result proposals vote
//
// swagger:model getProposalListResult.proposals.vote
type GetProposalListResultProposalsVote struct {

	// count
	// Required: true
	Count *GetProposalListResultProposalsVoteCount `json:"count"`

	// Distribution of vote
	// Required: true
	Distribution *GetProposalListResultProposalsVoteDistribution `json:"distribution"`

	// id
	// Required: true
	ID *string `json:"id"`

	// Total staked luna
	// Required: true
	StakedLuna *string `json:"stakedLuna"`

	// Total voted luna
	// Required: true
	Total *string `json:"total"`

	// voting end time
	// Required: true
	VotingEndTime *string `json:"votingEndTime"`
}

// Validate validates this get proposal list result proposals vote
func (m *GetProposalListResultProposalsVote) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistribution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStakedLuna(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVotingEndTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetProposalListResultProposalsVote) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	if m.Count != nil {
		if err := m.Count.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("count")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("count")
			}
			return err
		}
	}

	return nil
}

func (m *GetProposalListResultProposalsVote) validateDistribution(formats strfmt.Registry) error {

	if err := validate.Required("distribution", "body", m.Distribution); err != nil {
		return err
	}

	if m.Distribution != nil {
		if err := m.Distribution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("distribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("distribution")
			}
			return err
		}
	}

	return nil
}

func (m *GetProposalListResultProposalsVote) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GetProposalListResultProposalsVote) validateStakedLuna(formats strfmt.Registry) error {

	if err := validate.Required("stakedLuna", "body", m.StakedLuna); err != nil {
		return err
	}

	return nil
}

func (m *GetProposalListResultProposalsVote) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}

func (m *GetProposalListResultProposalsVote) validateVotingEndTime(formats strfmt.Registry) error {

	if err := validate.Required("votingEndTime", "body", m.VotingEndTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get proposal list result proposals vote based on the context it is used
func (m *GetProposalListResultProposalsVote) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDistribution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetProposalListResultProposalsVote) contextValidateCount(ctx context.Context, formats strfmt.Registry) error {

	if m.Count != nil {
		if err := m.Count.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("count")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("count")
			}
			return err
		}
	}

	return nil
}

func (m *GetProposalListResultProposalsVote) contextValidateDistribution(ctx context.Context, formats strfmt.Registry) error {

	if m.Distribution != nil {
		if err := m.Distribution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("distribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("distribution")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetProposalListResultProposalsVote) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetProposalListResultProposalsVote) UnmarshalBinary(b []byte) error {
	var res GetProposalListResultProposalsVote
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
