// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CosmosStakingV1beta1BondStatus BondStatus is the status of a validator.
//
//  - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.
//  - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.
//  - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.
//  - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
//
// swagger:model cosmos.staking.v1beta1.BondStatus
type CosmosStakingV1beta1BondStatus string

func NewCosmosStakingV1beta1BondStatus(value CosmosStakingV1beta1BondStatus) *CosmosStakingV1beta1BondStatus {
	v := value
	return &v
}

const (

	// CosmosStakingV1beta1BondStatusBONDSTATUSUNSPECIFIED captures enum value "BOND_STATUS_UNSPECIFIED"
	CosmosStakingV1beta1BondStatusBONDSTATUSUNSPECIFIED CosmosStakingV1beta1BondStatus = "BOND_STATUS_UNSPECIFIED"

	// CosmosStakingV1beta1BondStatusBONDSTATUSUNBONDED captures enum value "BOND_STATUS_UNBONDED"
	CosmosStakingV1beta1BondStatusBONDSTATUSUNBONDED CosmosStakingV1beta1BondStatus = "BOND_STATUS_UNBONDED"

	// CosmosStakingV1beta1BondStatusBONDSTATUSUNBONDING captures enum value "BOND_STATUS_UNBONDING"
	CosmosStakingV1beta1BondStatusBONDSTATUSUNBONDING CosmosStakingV1beta1BondStatus = "BOND_STATUS_UNBONDING"

	// CosmosStakingV1beta1BondStatusBONDSTATUSBONDED captures enum value "BOND_STATUS_BONDED"
	CosmosStakingV1beta1BondStatusBONDSTATUSBONDED CosmosStakingV1beta1BondStatus = "BOND_STATUS_BONDED"
)

// for schema
var cosmosStakingV1beta1BondStatusEnum []interface{}

func init() {
	var res []CosmosStakingV1beta1BondStatus
	if err := json.Unmarshal([]byte(`["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cosmosStakingV1beta1BondStatusEnum = append(cosmosStakingV1beta1BondStatusEnum, v)
	}
}

func (m CosmosStakingV1beta1BondStatus) validateCosmosStakingV1beta1BondStatusEnum(path, location string, value CosmosStakingV1beta1BondStatus) error {
	if err := validate.EnumCase(path, location, value, cosmosStakingV1beta1BondStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cosmos staking v1beta1 bond status
func (m CosmosStakingV1beta1BondStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCosmosStakingV1beta1BondStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cosmos staking v1beta1 bond status based on context it is used
func (m CosmosStakingV1beta1BondStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
