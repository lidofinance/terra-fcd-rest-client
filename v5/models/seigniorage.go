// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Seigniorage seigniorage
//
// swagger:model seigniorage
type Seigniorage struct {

	// annualized return
	// Required: true
	AnnualizedReturn *float64 `json:"annualizedReturn"`

	// daily return
	// Required: true
	DailyReturn *float64 `json:"dailyReturn"`

	// unix timestamp
	// Required: true
	Datetime *float64 `json:"datetime"`

	// amount of seigniorage on datetime
	// Required: true
	SeigniorageProceeds *string `json:"seigniorageProceeds"`
}

// Validate validates this seigniorage
func (m *Seigniorage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnnualizedReturn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDailyReturn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeigniorageProceeds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Seigniorage) validateAnnualizedReturn(formats strfmt.Registry) error {

	if err := validate.Required("annualizedReturn", "body", m.AnnualizedReturn); err != nil {
		return err
	}

	return nil
}

func (m *Seigniorage) validateDailyReturn(formats strfmt.Registry) error {

	if err := validate.Required("dailyReturn", "body", m.DailyReturn); err != nil {
		return err
	}

	return nil
}

func (m *Seigniorage) validateDatetime(formats strfmt.Registry) error {

	if err := validate.Required("datetime", "body", m.Datetime); err != nil {
		return err
	}

	return nil
}

func (m *Seigniorage) validateSeigniorageProceeds(formats strfmt.Registry) error {

	if err := validate.Required("seigniorageProceeds", "body", m.SeigniorageProceeds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this seigniorage based on context it is used
func (m *Seigniorage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Seigniorage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Seigniorage) UnmarshalBinary(b []byte) error {
	var res Seigniorage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
