// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ValidatorsCommissionInfo validators commission info
//
// swagger:model validators.commissionInfo
type ValidatorsCommissionInfo struct {

	// max change rate
	// Required: true
	MaxChangeRate *string `json:"maxChangeRate"`

	// max rate
	// Required: true
	MaxRate *string `json:"maxRate"`

	// rate
	// Required: true
	Rate *string `json:"rate"`

	// update time
	// Required: true
	UpdateTime *string `json:"updateTime"`
}

// Validate validates this validators commission info
func (m *ValidatorsCommissionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxChangeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidatorsCommissionInfo) validateMaxChangeRate(formats strfmt.Registry) error {

	if err := validate.Required("maxChangeRate", "body", m.MaxChangeRate); err != nil {
		return err
	}

	return nil
}

func (m *ValidatorsCommissionInfo) validateMaxRate(formats strfmt.Registry) error {

	if err := validate.Required("maxRate", "body", m.MaxRate); err != nil {
		return err
	}

	return nil
}

func (m *ValidatorsCommissionInfo) validateRate(formats strfmt.Registry) error {

	if err := validate.Required("rate", "body", m.Rate); err != nil {
		return err
	}

	return nil
}

func (m *ValidatorsCommissionInfo) validateUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("updateTime", "body", m.UpdateTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this validators commission info based on context it is used
func (m *ValidatorsCommissionInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ValidatorsCommissionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidatorsCommissionInfo) UnmarshalBinary(b []byte) error {
	var res ValidatorsCommissionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
