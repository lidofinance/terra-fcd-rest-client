// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IbcCoreChannelV1QueryPacketCommitmentsResponse QueryPacketCommitmentsResponse is the request type for the
// Query/QueryPacketCommitments RPC method
//
// swagger:model ibc.core.channel.v1.QueryPacketCommitmentsResponse
type IbcCoreChannelV1QueryPacketCommitmentsResponse struct {

	// commitments
	Commitments []*IbcCoreChannelV1QueryPacketCommitmentsResponseCommitmentsItems0 `json:"commitments"`

	// height
	Height *IbcCoreChannelV1QueryPacketCommitmentsResponseHeight `json:"height,omitempty"`

	// pagination
	Pagination *IbcCoreChannelV1QueryPacketCommitmentsResponsePagination `json:"pagination,omitempty"`
}

// Validate validates this ibc core channel v1 query packet commitments response
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommitments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbcCoreChannelV1QueryPacketCommitmentsResponse) validateCommitments(formats strfmt.Registry) error {
	if swag.IsZero(m.Commitments) { // not required
		return nil
	}

	for i := 0; i < len(m.Commitments); i++ {
		if swag.IsZero(m.Commitments[i]) { // not required
			continue
		}

		if m.Commitments[i] != nil {
			if err := m.Commitments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commitments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commitments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IbcCoreChannelV1QueryPacketCommitmentsResponse) validateHeight(formats strfmt.Registry) error {
	if swag.IsZero(m.Height) { // not required
		return nil
	}

	if m.Height != nil {
		if err := m.Height.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("height")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("height")
			}
			return err
		}
	}

	return nil
}

func (m *IbcCoreChannelV1QueryPacketCommitmentsResponse) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(m.Pagination) { // not required
		return nil
	}

	if m.Pagination != nil {
		if err := m.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ibc core channel v1 query packet commitments response based on the context it is used
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommitments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbcCoreChannelV1QueryPacketCommitmentsResponse) contextValidateCommitments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Commitments); i++ {

		if m.Commitments[i] != nil {
			if err := m.Commitments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commitments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commitments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IbcCoreChannelV1QueryPacketCommitmentsResponse) contextValidateHeight(ctx context.Context, formats strfmt.Registry) error {

	if m.Height != nil {
		if err := m.Height.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("height")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("height")
			}
			return err
		}
	}

	return nil
}

func (m *IbcCoreChannelV1QueryPacketCommitmentsResponse) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if m.Pagination != nil {
		if err := m.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponse) UnmarshalBinary(b []byte) error {
	var res IbcCoreChannelV1QueryPacketCommitmentsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IbcCoreChannelV1QueryPacketCommitmentsResponseCommitmentsItems0 PacketState defines the generic type necessary to retrieve and store
// packet commitments, acknowledgements, and receipts.
// Caller is responsible for knowing the context necessary to interpret this
// state as a commitment, acknowledgement, or a receipt.
//
// swagger:model IbcCoreChannelV1QueryPacketCommitmentsResponseCommitmentsItems0
type IbcCoreChannelV1QueryPacketCommitmentsResponseCommitmentsItems0 struct {

	// channel unique identifier.
	ChannelID string `json:"channel_id,omitempty"`

	// embedded data that represents packet state.
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// channel port identifier.
	PortID string `json:"port_id,omitempty"`

	// packet sequence.
	Sequence string `json:"sequence,omitempty"`
}

// Validate validates this ibc core channel v1 query packet commitments response commitments items0
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponseCommitmentsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ibc core channel v1 query packet commitments response commitments items0 based on context it is used
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponseCommitmentsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponseCommitmentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponseCommitmentsItems0) UnmarshalBinary(b []byte) error {
	var res IbcCoreChannelV1QueryPacketCommitmentsResponseCommitmentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IbcCoreChannelV1QueryPacketCommitmentsResponseHeight query block height
//
// Normally the RevisionHeight is incremented at each height while keeping
// RevisionNumber the same. However some consensus algorithms may choose to
// reset the height in certain conditions e.g. hard forks, state-machine
// breaking changes In these cases, the RevisionNumber is incremented so that
// height continues to be monitonically increasing even as the RevisionHeight
// gets reset
//
// swagger:model IbcCoreChannelV1QueryPacketCommitmentsResponseHeight
type IbcCoreChannelV1QueryPacketCommitmentsResponseHeight struct {

	// the height within the given revision
	RevisionHeight string `json:"revision_height,omitempty"`

	// the revision that the client is currently on
	RevisionNumber string `json:"revision_number,omitempty"`
}

// Validate validates this ibc core channel v1 query packet commitments response height
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponseHeight) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ibc core channel v1 query packet commitments response height based on context it is used
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponseHeight) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponseHeight) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponseHeight) UnmarshalBinary(b []byte) error {
	var res IbcCoreChannelV1QueryPacketCommitmentsResponseHeight
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IbcCoreChannelV1QueryPacketCommitmentsResponsePagination pagination response
//
// PageResponse is to be embedded in gRPC response messages where the
// corresponding request message has used PageRequest.
//
//  message SomeResponse {
//          repeated Bar results = 1;
//          PageResponse page = 2;
//  }
//
// swagger:model IbcCoreChannelV1QueryPacketCommitmentsResponsePagination
type IbcCoreChannelV1QueryPacketCommitmentsResponsePagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this ibc core channel v1 query packet commitments response pagination
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponsePagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ibc core channel v1 query packet commitments response pagination based on context it is used
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponsePagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponsePagination) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbcCoreChannelV1QueryPacketCommitmentsResponsePagination) UnmarshalBinary(b []byte) error {
	var res IbcCoreChannelV1QueryPacketCommitmentsResponsePagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
