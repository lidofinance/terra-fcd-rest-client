// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IbcApplicationsTransferV1QueryDenomTracesResponse QueryConnectionsResponse is the response type for the Query/DenomTraces RPC
// method.
//
// swagger:model ibc.applications.transfer.v1.QueryDenomTracesResponse
type IbcApplicationsTransferV1QueryDenomTracesResponse struct {

	// denom_traces returns all denominations trace information.
	DenomTraces []*IbcApplicationsTransferV1QueryDenomTracesResponseDenomTracesItems0 `json:"denom_traces"`

	// pagination
	Pagination *IbcApplicationsTransferV1QueryDenomTracesResponsePagination `json:"pagination,omitempty"`
}

// Validate validates this ibc applications transfer v1 query denom traces response
func (m *IbcApplicationsTransferV1QueryDenomTracesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDenomTraces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbcApplicationsTransferV1QueryDenomTracesResponse) validateDenomTraces(formats strfmt.Registry) error {
	if swag.IsZero(m.DenomTraces) { // not required
		return nil
	}

	for i := 0; i < len(m.DenomTraces); i++ {
		if swag.IsZero(m.DenomTraces[i]) { // not required
			continue
		}

		if m.DenomTraces[i] != nil {
			if err := m.DenomTraces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("denom_traces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("denom_traces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IbcApplicationsTransferV1QueryDenomTracesResponse) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(m.Pagination) { // not required
		return nil
	}

	if m.Pagination != nil {
		if err := m.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ibc applications transfer v1 query denom traces response based on the context it is used
func (m *IbcApplicationsTransferV1QueryDenomTracesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDenomTraces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbcApplicationsTransferV1QueryDenomTracesResponse) contextValidateDenomTraces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DenomTraces); i++ {

		if m.DenomTraces[i] != nil {
			if err := m.DenomTraces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("denom_traces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("denom_traces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IbcApplicationsTransferV1QueryDenomTracesResponse) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if m.Pagination != nil {
		if err := m.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IbcApplicationsTransferV1QueryDenomTracesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbcApplicationsTransferV1QueryDenomTracesResponse) UnmarshalBinary(b []byte) error {
	var res IbcApplicationsTransferV1QueryDenomTracesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IbcApplicationsTransferV1QueryDenomTracesResponseDenomTracesItems0 DenomTrace contains the base denomination for ICS20 fungible tokens and the
// source tracing information path.
//
// swagger:model IbcApplicationsTransferV1QueryDenomTracesResponseDenomTracesItems0
type IbcApplicationsTransferV1QueryDenomTracesResponseDenomTracesItems0 struct {

	// base denomination of the relayed fungible token.
	BaseDenom string `json:"base_denom,omitempty"`

	// path defines the chain of port/channel identifiers used for tracing the
	// source of the fungible token.
	Path string `json:"path,omitempty"`
}

// Validate validates this ibc applications transfer v1 query denom traces response denom traces items0
func (m *IbcApplicationsTransferV1QueryDenomTracesResponseDenomTracesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ibc applications transfer v1 query denom traces response denom traces items0 based on context it is used
func (m *IbcApplicationsTransferV1QueryDenomTracesResponseDenomTracesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IbcApplicationsTransferV1QueryDenomTracesResponseDenomTracesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbcApplicationsTransferV1QueryDenomTracesResponseDenomTracesItems0) UnmarshalBinary(b []byte) error {
	var res IbcApplicationsTransferV1QueryDenomTracesResponseDenomTracesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IbcApplicationsTransferV1QueryDenomTracesResponsePagination pagination defines the pagination in the response.
//
// swagger:model IbcApplicationsTransferV1QueryDenomTracesResponsePagination
type IbcApplicationsTransferV1QueryDenomTracesResponsePagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this ibc applications transfer v1 query denom traces response pagination
func (m *IbcApplicationsTransferV1QueryDenomTracesResponsePagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ibc applications transfer v1 query denom traces response pagination based on context it is used
func (m *IbcApplicationsTransferV1QueryDenomTracesResponsePagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IbcApplicationsTransferV1QueryDenomTracesResponsePagination) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbcApplicationsTransferV1QueryDenomTracesResponsePagination) UnmarshalBinary(b []byte) error {
	var res IbcApplicationsTransferV1QueryDenomTracesResponsePagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
