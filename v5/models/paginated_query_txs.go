// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PaginatedQueryTxs paginated query txs
//
// swagger:model PaginatedQueryTxs
type PaginatedQueryTxs struct {

	// count
	// Example: 1
	Count float64 `json:"count,omitempty"`

	// limit
	// Example: 30
	Limit float64 `json:"limit,omitempty"`

	// page number
	// Example: 1
	PageNumber float64 `json:"page_number,omitempty"`

	// page total
	// Example: 1
	PageTotal float64 `json:"page_total,omitempty"`

	// total count
	// Example: 1
	TotalCount float64 `json:"total_count,omitempty"`

	// txs
	Txs []*PaginatedQueryTxsTxsItems0 `json:"txs"`
}

// Validate validates this paginated query txs
func (m *PaginatedQueryTxs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTxs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedQueryTxs) validateTxs(formats strfmt.Registry) error {
	if swag.IsZero(m.Txs) { // not required
		return nil
	}

	for i := 0; i < len(m.Txs); i++ {
		if swag.IsZero(m.Txs[i]) { // not required
			continue
		}

		if m.Txs[i] != nil {
			if err := m.Txs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("txs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("txs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this paginated query txs based on the context it is used
func (m *PaginatedQueryTxs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTxs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedQueryTxs) contextValidateTxs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Txs); i++ {

		if m.Txs[i] != nil {
			if err := m.Txs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("txs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("txs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaginatedQueryTxs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaginatedQueryTxs) UnmarshalBinary(b []byte) error {
	var res PaginatedQueryTxs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaginatedQueryTxsTxsItems0 paginated query txs txs items0
//
// swagger:model PaginatedQueryTxsTxsItems0
type PaginatedQueryTxsTxsItems0 struct {

	// hash
	// Example: D085138D913993919295FF4B0A9107F1F2CDE0D37A87CE0644E217CBF3B49656
	Hash string `json:"hash,omitempty"`

	// height
	// Example: 368
	Height float64 `json:"height,omitempty"`

	// result
	Result *PaginatedQueryTxsTxsItems0Result `json:"result,omitempty"`

	// tx
	Tx *PaginatedQueryTxsTxsItems0Tx `json:"tx,omitempty"`
}

// Validate validates this paginated query txs txs items0
func (m *PaginatedQueryTxsTxsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedQueryTxsTxsItems0) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

func (m *PaginatedQueryTxsTxsItems0) validateTx(formats strfmt.Registry) error {
	if swag.IsZero(m.Tx) { // not required
		return nil
	}

	if m.Tx != nil {
		if err := m.Tx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this paginated query txs txs items0 based on the context it is used
func (m *PaginatedQueryTxsTxsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedQueryTxsTxsItems0) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if m.Result != nil {
		if err := m.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

func (m *PaginatedQueryTxsTxsItems0) contextValidateTx(ctx context.Context, formats strfmt.Registry) error {

	if m.Tx != nil {
		if err := m.Tx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0) UnmarshalBinary(b []byte) error {
	var res PaginatedQueryTxsTxsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaginatedQueryTxsTxsItems0Result paginated query txs txs items0 result
//
// swagger:model PaginatedQueryTxsTxsItems0Result
type PaginatedQueryTxsTxsItems0Result struct {

	// gas used
	// Example: 26354
	GasUsed string `json:"gas_used,omitempty"`

	// gas wanted
	// Example: 200000
	GasWanted string `json:"gas_wanted,omitempty"`

	// log
	Log string `json:"log,omitempty"`

	// tags
	Tags []*PaginatedQueryTxsTxsItems0ResultTagsItems0 `json:"tags"`
}

// Validate validates this paginated query txs txs items0 result
func (m *PaginatedQueryTxsTxsItems0Result) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedQueryTxsTxsItems0Result) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("result" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("result" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this paginated query txs txs items0 result based on the context it is used
func (m *PaginatedQueryTxsTxsItems0Result) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedQueryTxsTxsItems0Result) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("result" + "." + "tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("result" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0Result) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0Result) UnmarshalBinary(b []byte) error {
	var res PaginatedQueryTxsTxsItems0Result
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaginatedQueryTxsTxsItems0ResultTagsItems0 paginated query txs txs items0 result tags items0
//
// swagger:model PaginatedQueryTxsTxsItems0ResultTagsItems0
type PaginatedQueryTxsTxsItems0ResultTagsItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this paginated query txs txs items0 result tags items0
func (m *PaginatedQueryTxsTxsItems0ResultTagsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this paginated query txs txs items0 result tags items0 based on context it is used
func (m *PaginatedQueryTxsTxsItems0ResultTagsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0ResultTagsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0ResultTagsItems0) UnmarshalBinary(b []byte) error {
	var res PaginatedQueryTxsTxsItems0ResultTagsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaginatedQueryTxsTxsItems0Tx paginated query txs txs items0 tx
//
// swagger:model PaginatedQueryTxsTxsItems0Tx
type PaginatedQueryTxsTxsItems0Tx struct {

	// fee
	Fee *PaginatedQueryTxsTxsItems0TxFee `json:"fee,omitempty"`

	// memo
	Memo string `json:"memo,omitempty"`

	// msg
	Msg []string `json:"msg"`

	// signature
	Signature *PaginatedQueryTxsTxsItems0TxSignature `json:"signature,omitempty"`
}

// Validate validates this paginated query txs txs items0 tx
func (m *PaginatedQueryTxsTxsItems0Tx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedQueryTxsTxsItems0Tx) validateFee(formats strfmt.Registry) error {
	if swag.IsZero(m.Fee) { // not required
		return nil
	}

	if m.Fee != nil {
		if err := m.Fee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (m *PaginatedQueryTxsTxsItems0Tx) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(m.Signature) { // not required
		return nil
	}

	if m.Signature != nil {
		if err := m.Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this paginated query txs txs items0 tx based on the context it is used
func (m *PaginatedQueryTxsTxsItems0Tx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedQueryTxsTxsItems0Tx) contextValidateFee(ctx context.Context, formats strfmt.Registry) error {

	if m.Fee != nil {
		if err := m.Fee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "fee")
			}
			return err
		}
	}

	return nil
}

func (m *PaginatedQueryTxsTxsItems0Tx) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if m.Signature != nil {
		if err := m.Signature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0Tx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0Tx) UnmarshalBinary(b []byte) error {
	var res PaginatedQueryTxsTxsItems0Tx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaginatedQueryTxsTxsItems0TxFee paginated query txs txs items0 tx fee
//
// swagger:model PaginatedQueryTxsTxsItems0TxFee
type PaginatedQueryTxsTxsItems0TxFee struct {

	// amount
	Amount []*PaginatedQueryTxsTxsItems0TxFeeAmountItems0 `json:"amount"`

	// gas
	Gas string `json:"gas,omitempty"`
}

// Validate validates this paginated query txs txs items0 tx fee
func (m *PaginatedQueryTxsTxsItems0TxFee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedQueryTxsTxsItems0TxFee) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	for i := 0; i < len(m.Amount); i++ {
		if swag.IsZero(m.Amount[i]) { // not required
			continue
		}

		if m.Amount[i] != nil {
			if err := m.Amount[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this paginated query txs txs items0 tx fee based on the context it is used
func (m *PaginatedQueryTxsTxsItems0TxFee) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedQueryTxsTxsItems0TxFee) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Amount); i++ {

		if m.Amount[i] != nil {
			if err := m.Amount[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tx" + "." + "fee" + "." + "amount" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0TxFee) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0TxFee) UnmarshalBinary(b []byte) error {
	var res PaginatedQueryTxsTxsItems0TxFee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaginatedQueryTxsTxsItems0TxFeeAmountItems0 paginated query txs txs items0 tx fee amount items0
//
// swagger:model PaginatedQueryTxsTxsItems0TxFeeAmountItems0
type PaginatedQueryTxsTxsItems0TxFeeAmountItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this paginated query txs txs items0 tx fee amount items0
func (m *PaginatedQueryTxsTxsItems0TxFeeAmountItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this paginated query txs txs items0 tx fee amount items0 based on context it is used
func (m *PaginatedQueryTxsTxsItems0TxFeeAmountItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0TxFeeAmountItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0TxFeeAmountItems0) UnmarshalBinary(b []byte) error {
	var res PaginatedQueryTxsTxsItems0TxFeeAmountItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaginatedQueryTxsTxsItems0TxSignature paginated query txs txs items0 tx signature
//
// swagger:model PaginatedQueryTxsTxsItems0TxSignature
type PaginatedQueryTxsTxsItems0TxSignature struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// pub key
	PubKey *PaginatedQueryTxsTxsItems0TxSignaturePubKey `json:"pub_key,omitempty"`

	// sequence
	// Example: 0
	Sequence string `json:"sequence,omitempty"`

	// signature
	// Example: MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
	Signature string `json:"signature,omitempty"`
}

// Validate validates this paginated query txs txs items0 tx signature
func (m *PaginatedQueryTxsTxsItems0TxSignature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePubKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedQueryTxsTxsItems0TxSignature) validatePubKey(formats strfmt.Registry) error {
	if swag.IsZero(m.PubKey) { // not required
		return nil
	}

	if m.PubKey != nil {
		if err := m.PubKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this paginated query txs txs items0 tx signature based on the context it is used
func (m *PaginatedQueryTxsTxsItems0TxSignature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePubKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaginatedQueryTxsTxsItems0TxSignature) contextValidatePubKey(ctx context.Context, formats strfmt.Registry) error {

	if m.PubKey != nil {
		if err := m.PubKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx" + "." + "signature" + "." + "pub_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx" + "." + "signature" + "." + "pub_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0TxSignature) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0TxSignature) UnmarshalBinary(b []byte) error {
	var res PaginatedQueryTxsTxsItems0TxSignature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaginatedQueryTxsTxsItems0TxSignaturePubKey paginated query txs txs items0 tx signature pub key
//
// swagger:model PaginatedQueryTxsTxsItems0TxSignaturePubKey
type PaginatedQueryTxsTxsItems0TxSignaturePubKey struct {

	// type
	// Example: tendermint/PubKeySecp256k1
	Type string `json:"type,omitempty"`

	// value
	// Example: Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH
	Value string `json:"value,omitempty"`
}

// Validate validates this paginated query txs txs items0 tx signature pub key
func (m *PaginatedQueryTxsTxsItems0TxSignaturePubKey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this paginated query txs txs items0 tx signature pub key based on context it is used
func (m *PaginatedQueryTxsTxsItems0TxSignaturePubKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0TxSignaturePubKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaginatedQueryTxsTxsItems0TxSignaturePubKey) UnmarshalBinary(b []byte) error {
	var res PaginatedQueryTxsTxsItems0TxSignaturePubKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
