// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CosmosStakingV1beta1RedelegationEntryResponse RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
// contains a balance in addition to shares which is more suitable for client
// responses.
//
// swagger:model cosmos.staking.v1beta1.RedelegationEntryResponse
type CosmosStakingV1beta1RedelegationEntryResponse struct {

	// balance
	Balance string `json:"balance,omitempty"`

	// redelegation entry
	RedelegationEntry *CosmosStakingV1beta1RedelegationEntryResponseRedelegationEntry `json:"redelegation_entry,omitempty"`
}

// Validate validates this cosmos staking v1beta1 redelegation entry response
func (m *CosmosStakingV1beta1RedelegationEntryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRedelegationEntry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1RedelegationEntryResponse) validateRedelegationEntry(formats strfmt.Registry) error {
	if swag.IsZero(m.RedelegationEntry) { // not required
		return nil
	}

	if m.RedelegationEntry != nil {
		if err := m.RedelegationEntry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redelegation_entry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("redelegation_entry")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cosmos staking v1beta1 redelegation entry response based on the context it is used
func (m *CosmosStakingV1beta1RedelegationEntryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRedelegationEntry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1RedelegationEntryResponse) contextValidateRedelegationEntry(ctx context.Context, formats strfmt.Registry) error {

	if m.RedelegationEntry != nil {
		if err := m.RedelegationEntry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redelegation_entry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("redelegation_entry")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1RedelegationEntryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1RedelegationEntryResponse) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1RedelegationEntryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosStakingV1beta1RedelegationEntryResponseRedelegationEntry RedelegationEntry defines a redelegation object with relevant metadata.
//
// swagger:model CosmosStakingV1beta1RedelegationEntryResponseRedelegationEntry
type CosmosStakingV1beta1RedelegationEntryResponseRedelegationEntry struct {

	// completion_time defines the unix time for redelegation completion.
	// Format: date-time
	CompletionTime strfmt.DateTime `json:"completion_time,omitempty"`

	// creation_height  defines the height which the redelegation took place.
	CreationHeight string `json:"creation_height,omitempty"`

	// initial_balance defines the initial balance when redelegation started.
	InitialBalance string `json:"initial_balance,omitempty"`

	// shares_dst is the amount of destination-validator shares created by redelegation.
	SharesDst string `json:"shares_dst,omitempty"`
}

// Validate validates this cosmos staking v1beta1 redelegation entry response redelegation entry
func (m *CosmosStakingV1beta1RedelegationEntryResponseRedelegationEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletionTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1RedelegationEntryResponseRedelegationEntry) validateCompletionTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CompletionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("redelegation_entry"+"."+"completion_time", "body", "date-time", m.CompletionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cosmos staking v1beta1 redelegation entry response redelegation entry based on context it is used
func (m *CosmosStakingV1beta1RedelegationEntryResponseRedelegationEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1RedelegationEntryResponseRedelegationEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1RedelegationEntryResponseRedelegationEntry) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1RedelegationEntryResponseRedelegationEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
