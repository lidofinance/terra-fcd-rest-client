// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CosmosSlashingV1beta1QuerySigningInfoResponse QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC
// method
//
// swagger:model cosmos.slashing.v1beta1.QuerySigningInfoResponse
type CosmosSlashingV1beta1QuerySigningInfoResponse struct {

	// val signing info
	ValSigningInfo *CosmosSlashingV1beta1QuerySigningInfoResponseValSigningInfo `json:"val_signing_info,omitempty"`
}

// Validate validates this cosmos slashing v1beta1 query signing info response
func (m *CosmosSlashingV1beta1QuerySigningInfoResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValSigningInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosSlashingV1beta1QuerySigningInfoResponse) validateValSigningInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ValSigningInfo) { // not required
		return nil
	}

	if m.ValSigningInfo != nil {
		if err := m.ValSigningInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("val_signing_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("val_signing_info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cosmos slashing v1beta1 query signing info response based on the context it is used
func (m *CosmosSlashingV1beta1QuerySigningInfoResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValSigningInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosSlashingV1beta1QuerySigningInfoResponse) contextValidateValSigningInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ValSigningInfo != nil {
		if err := m.ValSigningInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("val_signing_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("val_signing_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosSlashingV1beta1QuerySigningInfoResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosSlashingV1beta1QuerySigningInfoResponse) UnmarshalBinary(b []byte) error {
	var res CosmosSlashingV1beta1QuerySigningInfoResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosSlashingV1beta1QuerySigningInfoResponseValSigningInfo val_signing_info is the signing info of requested val cons address
//
// ValidatorSigningInfo defines a validator's signing info for monitoring their
// liveness activity.
//
// swagger:model CosmosSlashingV1beta1QuerySigningInfoResponseValSigningInfo
type CosmosSlashingV1beta1QuerySigningInfoResponseValSigningInfo struct {

	// address
	Address string `json:"address,omitempty"`

	// Index which is incremented each time the validator was a bonded
	// in a block and may have signed a precommit or not. This in conjunction with the
	// `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`.
	IndexOffset string `json:"index_offset,omitempty"`

	// Timestamp until which the validator is jailed due to liveness downtime.
	// Format: date-time
	JailedUntil strfmt.DateTime `json:"jailed_until,omitempty"`

	// A counter kept to avoid unnecessary array reads.
	// Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.
	MissedBlocksCounter string `json:"missed_blocks_counter,omitempty"`

	// Height at which validator was first a candidate OR was unjailed
	StartHeight string `json:"start_height,omitempty"`

	// Whether or not a validator has been tombstoned (killed out of validator set). It is set
	// once the validator commits an equivocation or for any other configured misbehiavor.
	Tombstoned bool `json:"tombstoned,omitempty"`
}

// Validate validates this cosmos slashing v1beta1 query signing info response val signing info
func (m *CosmosSlashingV1beta1QuerySigningInfoResponseValSigningInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJailedUntil(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosSlashingV1beta1QuerySigningInfoResponseValSigningInfo) validateJailedUntil(formats strfmt.Registry) error {
	if swag.IsZero(m.JailedUntil) { // not required
		return nil
	}

	if err := validate.FormatOf("val_signing_info"+"."+"jailed_until", "body", "date-time", m.JailedUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cosmos slashing v1beta1 query signing info response val signing info based on context it is used
func (m *CosmosSlashingV1beta1QuerySigningInfoResponseValSigningInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosSlashingV1beta1QuerySigningInfoResponseValSigningInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosSlashingV1beta1QuerySigningInfoResponseValSigningInfo) UnmarshalBinary(b []byte) error {
	var res CosmosSlashingV1beta1QuerySigningInfoResponseValSigningInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
