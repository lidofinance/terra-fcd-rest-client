// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Block block
//
// swagger:model Block
type Block struct {

	// evidence
	Evidence []string `json:"evidence"`

	// header
	Header *BlockHeader `json:"header,omitempty"`

	// last commit
	LastCommit *BlockLastCommit `json:"last_commit,omitempty"`

	// txs
	Txs []string `json:"txs"`
}

// Validate validates this block
func (m *Block) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastCommit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Block) validateHeader(formats strfmt.Registry) error {
	if swag.IsZero(m.Header) { // not required
		return nil
	}

	if m.Header != nil {
		if err := m.Header.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header")
			}
			return err
		}
	}

	return nil
}

func (m *Block) validateLastCommit(formats strfmt.Registry) error {
	if swag.IsZero(m.LastCommit) { // not required
		return nil
	}

	if m.LastCommit != nil {
		if err := m.LastCommit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_commit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_commit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block based on the context it is used
func (m *Block) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastCommit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Block) contextValidateHeader(ctx context.Context, formats strfmt.Registry) error {

	if m.Header != nil {
		if err := m.Header.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("header")
			}
			return err
		}
	}

	return nil
}

func (m *Block) contextValidateLastCommit(ctx context.Context, formats strfmt.Registry) error {

	if m.LastCommit != nil {
		if err := m.LastCommit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_commit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_commit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Block) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Block) UnmarshalBinary(b []byte) error {
	var res Block
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockLastCommit block last commit
//
// swagger:model BlockLastCommit
type BlockLastCommit struct {

	// block id
	BlockID *BlockLastCommitBlockID `json:"block_id,omitempty"`

	// precommits
	Precommits []*BlockLastCommitPrecommitsItems0 `json:"precommits"`
}

// Validate validates this block last commit
func (m *BlockLastCommit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrecommits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockLastCommit) validateBlockID(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockID) { // not required
		return nil
	}

	if m.BlockID != nil {
		if err := m.BlockID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_commit" + "." + "block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_commit" + "." + "block_id")
			}
			return err
		}
	}

	return nil
}

func (m *BlockLastCommit) validatePrecommits(formats strfmt.Registry) error {
	if swag.IsZero(m.Precommits) { // not required
		return nil
	}

	for i := 0; i < len(m.Precommits); i++ {
		if swag.IsZero(m.Precommits[i]) { // not required
			continue
		}

		if m.Precommits[i] != nil {
			if err := m.Precommits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("last_commit" + "." + "precommits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("last_commit" + "." + "precommits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this block last commit based on the context it is used
func (m *BlockLastCommit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlockID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrecommits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockLastCommit) contextValidateBlockID(ctx context.Context, formats strfmt.Registry) error {

	if m.BlockID != nil {
		if err := m.BlockID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_commit" + "." + "block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_commit" + "." + "block_id")
			}
			return err
		}
	}

	return nil
}

func (m *BlockLastCommit) contextValidatePrecommits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Precommits); i++ {

		if m.Precommits[i] != nil {
			if err := m.Precommits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("last_commit" + "." + "precommits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("last_commit" + "." + "precommits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockLastCommit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockLastCommit) UnmarshalBinary(b []byte) error {
	var res BlockLastCommit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockLastCommitBlockID block last commit block ID
//
// swagger:model BlockLastCommitBlockID
type BlockLastCommitBlockID struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// parts
	Parts *BlockLastCommitBlockIDParts `json:"parts,omitempty"`
}

// Validate validates this block last commit block ID
func (m *BlockLastCommitBlockID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockLastCommitBlockID) validateParts(formats strfmt.Registry) error {
	if swag.IsZero(m.Parts) { // not required
		return nil
	}

	if m.Parts != nil {
		if err := m.Parts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_commit" + "." + "block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_commit" + "." + "block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block last commit block ID based on the context it is used
func (m *BlockLastCommitBlockID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockLastCommitBlockID) contextValidateParts(ctx context.Context, formats strfmt.Registry) error {

	if m.Parts != nil {
		if err := m.Parts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_commit" + "." + "block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_commit" + "." + "block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockLastCommitBlockID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockLastCommitBlockID) UnmarshalBinary(b []byte) error {
	var res BlockLastCommitBlockID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockLastCommitBlockIDParts block last commit block ID parts
//
// swagger:model BlockLastCommitBlockIDParts
type BlockLastCommitBlockIDParts struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// total
	// Example: 0
	Total float64 `json:"total,omitempty"`
}

// Validate validates this block last commit block ID parts
func (m *BlockLastCommitBlockIDParts) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this block last commit block ID parts based on context it is used
func (m *BlockLastCommitBlockIDParts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BlockLastCommitBlockIDParts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockLastCommitBlockIDParts) UnmarshalBinary(b []byte) error {
	var res BlockLastCommitBlockIDParts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockLastCommitPrecommitsItems0 block last commit precommits items0
//
// swagger:model BlockLastCommitPrecommitsItems0
type BlockLastCommitPrecommitsItems0 struct {

	// block id
	BlockID *BlockLastCommitPrecommitsItems0BlockID `json:"block_id,omitempty"`

	// height
	// Example: 0
	Height string `json:"height,omitempty"`

	// round
	// Example: 0
	Round string `json:"round,omitempty"`

	// signature
	// Example: 7uTC74QlknqYWEwg7Vn6M8Om7FuZ0EO4bjvuj6rwH1mTUJrRuMMZvAAqT9VjNgP0RA/TDp6u/92AqrZfXJSpBQ==
	Signature string `json:"signature,omitempty"`

	// timestamp
	// Example: 2017-12-30T05:53:09.287+01:00
	Timestamp string `json:"timestamp,omitempty"`

	// type
	// Example: 2
	Type float64 `json:"type,omitempty"`

	// validator address
	ValidatorAddress string `json:"validator_address,omitempty"`

	// validator index
	// Example: 0
	ValidatorIndex string `json:"validator_index,omitempty"`
}

// Validate validates this block last commit precommits items0
func (m *BlockLastCommitPrecommitsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockLastCommitPrecommitsItems0) validateBlockID(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockID) { // not required
		return nil
	}

	if m.BlockID != nil {
		if err := m.BlockID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_id")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block last commit precommits items0 based on the context it is used
func (m *BlockLastCommitPrecommitsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlockID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockLastCommitPrecommitsItems0) contextValidateBlockID(ctx context.Context, formats strfmt.Registry) error {

	if m.BlockID != nil {
		if err := m.BlockID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockLastCommitPrecommitsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockLastCommitPrecommitsItems0) UnmarshalBinary(b []byte) error {
	var res BlockLastCommitPrecommitsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockLastCommitPrecommitsItems0BlockID block last commit precommits items0 block ID
//
// swagger:model BlockLastCommitPrecommitsItems0BlockID
type BlockLastCommitPrecommitsItems0BlockID struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// parts
	Parts *BlockLastCommitPrecommitsItems0BlockIDParts `json:"parts,omitempty"`
}

// Validate validates this block last commit precommits items0 block ID
func (m *BlockLastCommitPrecommitsItems0BlockID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockLastCommitPrecommitsItems0BlockID) validateParts(formats strfmt.Registry) error {
	if swag.IsZero(m.Parts) { // not required
		return nil
	}

	if m.Parts != nil {
		if err := m.Parts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this block last commit precommits items0 block ID based on the context it is used
func (m *BlockLastCommitPrecommitsItems0BlockID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockLastCommitPrecommitsItems0BlockID) contextValidateParts(ctx context.Context, formats strfmt.Registry) error {

	if m.Parts != nil {
		if err := m.Parts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block_id" + "." + "parts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block_id" + "." + "parts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockLastCommitPrecommitsItems0BlockID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockLastCommitPrecommitsItems0BlockID) UnmarshalBinary(b []byte) error {
	var res BlockLastCommitPrecommitsItems0BlockID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockLastCommitPrecommitsItems0BlockIDParts block last commit precommits items0 block ID parts
//
// swagger:model BlockLastCommitPrecommitsItems0BlockIDParts
type BlockLastCommitPrecommitsItems0BlockIDParts struct {

	// hash
	// Example: EE5F3404034C524501629B56E0DDC38FAD651F04
	Hash string `json:"hash,omitempty"`

	// total
	// Example: 0
	Total float64 `json:"total,omitempty"`
}

// Validate validates this block last commit precommits items0 block ID parts
func (m *BlockLastCommitPrecommitsItems0BlockIDParts) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this block last commit precommits items0 block ID parts based on context it is used
func (m *BlockLastCommitPrecommitsItems0BlockIDParts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BlockLastCommitPrecommitsItems0BlockIDParts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockLastCommitPrecommitsItems0BlockIDParts) UnmarshalBinary(b []byte) error {
	var res BlockLastCommitPrecommitsItems0BlockIDParts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
