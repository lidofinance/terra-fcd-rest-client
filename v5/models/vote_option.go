// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VoteOption VoteOption enumerates the valid vote options for a given governance proposal.
//
//   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
//   - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
//   - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
//   - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
//   - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
//
// swagger:model voteOption
type VoteOption string

func NewVoteOption(value VoteOption) *VoteOption {
	v := value
	return &v
}

const (

	// VoteOptionVOTEOPTIONUNSPECIFIED captures enum value "VOTE_OPTION_UNSPECIFIED"
	VoteOptionVOTEOPTIONUNSPECIFIED VoteOption = "VOTE_OPTION_UNSPECIFIED"

	// VoteOptionVOTEOPTIONYES captures enum value "VOTE_OPTION_YES"
	VoteOptionVOTEOPTIONYES VoteOption = "VOTE_OPTION_YES"

	// VoteOptionVOTEOPTIONABSTAIN captures enum value "VOTE_OPTION_ABSTAIN"
	VoteOptionVOTEOPTIONABSTAIN VoteOption = "VOTE_OPTION_ABSTAIN"

	// VoteOptionVOTEOPTIONNO captures enum value "VOTE_OPTION_NO"
	VoteOptionVOTEOPTIONNO VoteOption = "VOTE_OPTION_NO"

	// VoteOptionVOTEOPTIONNOWITHVETO captures enum value "VOTE_OPTION_NO_WITH_VETO"
	VoteOptionVOTEOPTIONNOWITHVETO VoteOption = "VOTE_OPTION_NO_WITH_VETO"
)

// for schema
var voteOptionEnum []interface{}

func init() {
	var res []VoteOption
	if err := json.Unmarshal([]byte(`["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		voteOptionEnum = append(voteOptionEnum, v)
	}
}

func (m VoteOption) validateVoteOptionEnum(path, location string, value VoteOption) error {
	if err := validate.EnumCase(path, location, value, voteOptionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this vote option
func (m VoteOption) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVoteOptionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this vote option based on context it is used
func (m VoteOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
