// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TerraOracleV1beta1QueryParamsResponse QueryParamsResponse is the response type for the Query/Params RPC method.
//
// swagger:model terra.oracle.v1beta1.QueryParamsResponse
type TerraOracleV1beta1QueryParamsResponse struct {

	// params
	Params *TerraOracleV1beta1QueryParamsResponseParams `json:"params,omitempty"`
}

// Validate validates this terra oracle v1beta1 query params response
func (m *TerraOracleV1beta1QueryParamsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraOracleV1beta1QueryParamsResponse) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(m.Params) { // not required
		return nil
	}

	if m.Params != nil {
		if err := m.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this terra oracle v1beta1 query params response based on the context it is used
func (m *TerraOracleV1beta1QueryParamsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraOracleV1beta1QueryParamsResponse) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if m.Params != nil {
		if err := m.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TerraOracleV1beta1QueryParamsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraOracleV1beta1QueryParamsResponse) UnmarshalBinary(b []byte) error {
	var res TerraOracleV1beta1QueryParamsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TerraOracleV1beta1QueryParamsResponseParams params defines the parameters of the module.
//
// swagger:model TerraOracleV1beta1QueryParamsResponseParams
type TerraOracleV1beta1QueryParamsResponseParams struct {

	// min valid per window
	MinValidPerWindow string `json:"min_valid_per_window,omitempty"`

	// reward band
	RewardBand string `json:"reward_band,omitempty"`

	// reward distribution window
	RewardDistributionWindow string `json:"reward_distribution_window,omitempty"`

	// slash fraction
	SlashFraction string `json:"slash_fraction,omitempty"`

	// slash window
	SlashWindow string `json:"slash_window,omitempty"`

	// vote period
	VotePeriod string `json:"vote_period,omitempty"`

	// vote threshold
	VoteThreshold string `json:"vote_threshold,omitempty"`

	// whitelist
	Whitelist []*TerraOracleV1beta1QueryParamsResponseParamsWhitelistItems0 `json:"whitelist"`
}

// Validate validates this terra oracle v1beta1 query params response params
func (m *TerraOracleV1beta1QueryParamsResponseParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraOracleV1beta1QueryParamsResponseParams) validateWhitelist(formats strfmt.Registry) error {
	if swag.IsZero(m.Whitelist) { // not required
		return nil
	}

	for i := 0; i < len(m.Whitelist); i++ {
		if swag.IsZero(m.Whitelist[i]) { // not required
			continue
		}

		if m.Whitelist[i] != nil {
			if err := m.Whitelist[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params" + "." + "whitelist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("params" + "." + "whitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this terra oracle v1beta1 query params response params based on the context it is used
func (m *TerraOracleV1beta1QueryParamsResponseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWhitelist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraOracleV1beta1QueryParamsResponseParams) contextValidateWhitelist(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Whitelist); i++ {

		if m.Whitelist[i] != nil {
			if err := m.Whitelist[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params" + "." + "whitelist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("params" + "." + "whitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TerraOracleV1beta1QueryParamsResponseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraOracleV1beta1QueryParamsResponseParams) UnmarshalBinary(b []byte) error {
	var res TerraOracleV1beta1QueryParamsResponseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TerraOracleV1beta1QueryParamsResponseParamsWhitelistItems0 Denom - the object to hold configurations of each denom
//
// swagger:model TerraOracleV1beta1QueryParamsResponseParamsWhitelistItems0
type TerraOracleV1beta1QueryParamsResponseParamsWhitelistItems0 struct {

	// name
	Name string `json:"name,omitempty"`

	// tobin tax
	TobinTax string `json:"tobin_tax,omitempty"`
}

// Validate validates this terra oracle v1beta1 query params response params whitelist items0
func (m *TerraOracleV1beta1QueryParamsResponseParamsWhitelistItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this terra oracle v1beta1 query params response params whitelist items0 based on context it is used
func (m *TerraOracleV1beta1QueryParamsResponseParamsWhitelistItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TerraOracleV1beta1QueryParamsResponseParamsWhitelistItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraOracleV1beta1QueryParamsResponseParamsWhitelistItems0) UnmarshalBinary(b []byte) error {
	var res TerraOracleV1beta1QueryParamsResponseParamsWhitelistItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
