// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InstantiateContractReq instantiate contract req
//
// swagger:model InstantiateContractReq
type InstantiateContractReq struct {

	// bech32 encoded address
	// Example: terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv
	Admin string `json:"admin,omitempty"`

	// base req
	BaseReq *InstantiateContractReqBaseReq `json:"base_req,omitempty"`

	// init coins
	InitCoins []*InstantiateContractReqInitCoinsItems0 `json:"init_coins"`

	// json formatted string
	// Example: {}
	InitMsg string `json:"init_msg,omitempty"`
}

// Validate validates this instantiate contract req
func (m *InstantiateContractReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitCoins(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstantiateContractReq) validateBaseReq(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseReq) { // not required
		return nil
	}

	if m.BaseReq != nil {
		if err := m.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_req")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base_req")
			}
			return err
		}
	}

	return nil
}

func (m *InstantiateContractReq) validateInitCoins(formats strfmt.Registry) error {
	if swag.IsZero(m.InitCoins) { // not required
		return nil
	}

	for i := 0; i < len(m.InitCoins); i++ {
		if swag.IsZero(m.InitCoins[i]) { // not required
			continue
		}

		if m.InitCoins[i] != nil {
			if err := m.InitCoins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("init_coins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("init_coins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this instantiate contract req based on the context it is used
func (m *InstantiateContractReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseReq(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitCoins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstantiateContractReq) contextValidateBaseReq(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseReq != nil {
		if err := m.BaseReq.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_req")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base_req")
			}
			return err
		}
	}

	return nil
}

func (m *InstantiateContractReq) contextValidateInitCoins(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InitCoins); i++ {

		if m.InitCoins[i] != nil {
			if err := m.InitCoins[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("init_coins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("init_coins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstantiateContractReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstantiateContractReq) UnmarshalBinary(b []byte) error {
	var res InstantiateContractReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InstantiateContractReqBaseReq instantiate contract req base req
//
// swagger:model InstantiateContractReqBaseReq
type InstantiateContractReqBaseReq struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// chain id
	// Example: Columbus-5
	ChainID string `json:"chain_id,omitempty"`

	// fees
	Fees []*InstantiateContractReqBaseReqFeesItems0 `json:"fees"`

	// Sender address or Keybase name to generate a transaction
	// Example: terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv
	From string `json:"from,omitempty"`

	// gas
	// Example: 200000
	Gas string `json:"gas,omitempty"`

	// gas adjustment
	// Example: 1.2
	GasAdjustment string `json:"gas_adjustment,omitempty"`

	// memo
	// Example: Sent via Terra Station ðŸš€
	Memo string `json:"memo,omitempty"`

	// sequence
	// Example: 1
	Sequence string `json:"sequence,omitempty"`

	// Estimate gas for a transaction (cannot be used in conjunction with generate_only)
	// Example: false
	Simulate bool `json:"simulate,omitempty"`
}

// Validate validates this instantiate contract req base req
func (m *InstantiateContractReqBaseReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFees(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstantiateContractReqBaseReq) validateFees(formats strfmt.Registry) error {
	if swag.IsZero(m.Fees) { // not required
		return nil
	}

	for i := 0; i < len(m.Fees); i++ {
		if swag.IsZero(m.Fees[i]) { // not required
			continue
		}

		if m.Fees[i] != nil {
			if err := m.Fees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("base_req" + "." + "fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("base_req" + "." + "fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this instantiate contract req base req based on the context it is used
func (m *InstantiateContractReqBaseReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstantiateContractReqBaseReq) contextValidateFees(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Fees); i++ {

		if m.Fees[i] != nil {
			if err := m.Fees[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("base_req" + "." + "fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("base_req" + "." + "fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstantiateContractReqBaseReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstantiateContractReqBaseReq) UnmarshalBinary(b []byte) error {
	var res InstantiateContractReqBaseReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InstantiateContractReqBaseReqFeesItems0 instantiate contract req base req fees items0
//
// swagger:model InstantiateContractReqBaseReqFeesItems0
type InstantiateContractReqBaseReqFeesItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this instantiate contract req base req fees items0
func (m *InstantiateContractReqBaseReqFeesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this instantiate contract req base req fees items0 based on context it is used
func (m *InstantiateContractReqBaseReqFeesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InstantiateContractReqBaseReqFeesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstantiateContractReqBaseReqFeesItems0) UnmarshalBinary(b []byte) error {
	var res InstantiateContractReqBaseReqFeesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// InstantiateContractReqInitCoinsItems0 instantiate contract req init coins items0
//
// swagger:model InstantiateContractReqInitCoinsItems0
type InstantiateContractReqInitCoinsItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this instantiate contract req init coins items0
func (m *InstantiateContractReqInitCoinsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this instantiate contract req init coins items0 based on context it is used
func (m *InstantiateContractReqInitCoinsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InstantiateContractReqInitCoinsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstantiateContractReqInitCoinsItems0) UnmarshalBinary(b []byte) error {
	var res InstantiateContractReqInitCoinsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
