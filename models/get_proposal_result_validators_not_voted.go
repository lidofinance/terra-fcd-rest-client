// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetProposalResultValidatorsNotVoted get proposal result validators not voted
//
// swagger:model getProposalResult.validatorsNotVoted
type GetProposalResultValidatorsNotVoted struct {

	// consensus pub key
	// Required: true
	ConsensusPubKey *string `json:"consensusPubKey"`

	// description
	// Required: true
	Description *GetProposalResultValidatorsNotVotedDescription `json:"description"`

	// operator address
	// Required: true
	OperatorAddress *string `json:"operatorAddress"`
}

// Validate validates this get proposal result validators not voted
func (m *GetProposalResultValidatorsNotVoted) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsensusPubKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetProposalResultValidatorsNotVoted) validateConsensusPubKey(formats strfmt.Registry) error {

	if err := validate.Required("consensusPubKey", "body", m.ConsensusPubKey); err != nil {
		return err
	}

	return nil
}

func (m *GetProposalResultValidatorsNotVoted) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *GetProposalResultValidatorsNotVoted) validateOperatorAddress(formats strfmt.Registry) error {

	if err := validate.Required("operatorAddress", "body", m.OperatorAddress); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get proposal result validators not voted based on the context it is used
func (m *GetProposalResultValidatorsNotVoted) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetProposalResultValidatorsNotVoted) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetProposalResultValidatorsNotVoted) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetProposalResultValidatorsNotVoted) UnmarshalBinary(b []byte) error {
	var res GetProposalResultValidatorsNotVoted
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
