// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CosmosStakingV1beta1Validator Validator defines a validator, together with the total amount of the
// Validator's bond shares and their exchange rate to coins. Slashing results in
// a decrease in the exchange rate, allowing correct calculation of future
// undelegations without iterating over delegators. When coins are delegated to
// this validator, the validator is credited with a delegation whose number of
// bond shares is based on the amount of coins delegated divided by the current
// exchange rate. Voting power can be calculated as total bonded shares
// multiplied by exchange rate.
//
// swagger:model cosmos.staking.v1beta1.Validator
type CosmosStakingV1beta1Validator struct {

	// commission
	Commission *CosmosStakingV1beta1ValidatorCommission `json:"commission,omitempty"`

	// consensus pubkey
	ConsensusPubkey *CosmosStakingV1beta1ValidatorConsensusPubkey `json:"consensus_pubkey,omitempty"`

	// delegator_shares defines total shares issued to a validator's delegators.
	DelegatorShares string `json:"delegator_shares,omitempty"`

	// description
	Description *CosmosStakingV1beta1ValidatorDescription `json:"description,omitempty"`

	// jailed defined whether the validator has been jailed from bonded status or not.
	Jailed bool `json:"jailed,omitempty"`

	// min_self_delegation is the validator's self declared minimum self delegation.
	MinSelfDelegation string `json:"min_self_delegation,omitempty"`

	// operator_address defines the address of the validator's operator; bech encoded in JSON.
	OperatorAddress string `json:"operator_address,omitempty"`

	// status is the validator status (bonded/unbonding/unbonded).
	// Enum: [BOND_STATUS_UNSPECIFIED BOND_STATUS_UNBONDED BOND_STATUS_UNBONDING BOND_STATUS_BONDED]
	Status *string `json:"status,omitempty"`

	// tokens define the delegated tokens (incl. self-delegation).
	Tokens string `json:"tokens,omitempty"`

	// unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
	UnbondingHeight string `json:"unbonding_height,omitempty"`

	// unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.
	// Format: date-time
	UnbondingTime strfmt.DateTime `json:"unbonding_time,omitempty"`
}

// Validate validates this cosmos staking v1beta1 validator
func (m *CosmosStakingV1beta1Validator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsensusPubkey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnbondingTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1Validator) validateCommission(formats strfmt.Registry) error {
	if swag.IsZero(m.Commission) { // not required
		return nil
	}

	if m.Commission != nil {
		if err := m.Commission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commission")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosStakingV1beta1Validator) validateConsensusPubkey(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsensusPubkey) { // not required
		return nil
	}

	if m.ConsensusPubkey != nil {
		if err := m.ConsensusPubkey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consensus_pubkey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consensus_pubkey")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosStakingV1beta1Validator) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

var cosmosStakingV1beta1ValidatorTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BOND_STATUS_UNSPECIFIED","BOND_STATUS_UNBONDED","BOND_STATUS_UNBONDING","BOND_STATUS_BONDED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cosmosStakingV1beta1ValidatorTypeStatusPropEnum = append(cosmosStakingV1beta1ValidatorTypeStatusPropEnum, v)
	}
}

const (

	// CosmosStakingV1beta1ValidatorStatusBONDSTATUSUNSPECIFIED captures enum value "BOND_STATUS_UNSPECIFIED"
	CosmosStakingV1beta1ValidatorStatusBONDSTATUSUNSPECIFIED string = "BOND_STATUS_UNSPECIFIED"

	// CosmosStakingV1beta1ValidatorStatusBONDSTATUSUNBONDED captures enum value "BOND_STATUS_UNBONDED"
	CosmosStakingV1beta1ValidatorStatusBONDSTATUSUNBONDED string = "BOND_STATUS_UNBONDED"

	// CosmosStakingV1beta1ValidatorStatusBONDSTATUSUNBONDING captures enum value "BOND_STATUS_UNBONDING"
	CosmosStakingV1beta1ValidatorStatusBONDSTATUSUNBONDING string = "BOND_STATUS_UNBONDING"

	// CosmosStakingV1beta1ValidatorStatusBONDSTATUSBONDED captures enum value "BOND_STATUS_BONDED"
	CosmosStakingV1beta1ValidatorStatusBONDSTATUSBONDED string = "BOND_STATUS_BONDED"
)

// prop value enum
func (m *CosmosStakingV1beta1Validator) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cosmosStakingV1beta1ValidatorTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CosmosStakingV1beta1Validator) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *CosmosStakingV1beta1Validator) validateUnbondingTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UnbondingTime) { // not required
		return nil
	}

	if err := validate.FormatOf("unbonding_time", "body", "date-time", m.UnbondingTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cosmos staking v1beta1 validator based on the context it is used
func (m *CosmosStakingV1beta1Validator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsensusPubkey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1Validator) contextValidateCommission(ctx context.Context, formats strfmt.Registry) error {

	if m.Commission != nil {
		if err := m.Commission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commission")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosStakingV1beta1Validator) contextValidateConsensusPubkey(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsensusPubkey != nil {
		if err := m.ConsensusPubkey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consensus_pubkey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consensus_pubkey")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosStakingV1beta1Validator) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1Validator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1Validator) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1Validator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosStakingV1beta1ValidatorCommission commission defines the commission parameters.
//
// swagger:model CosmosStakingV1beta1ValidatorCommission
type CosmosStakingV1beta1ValidatorCommission struct {

	// commission rates
	CommissionRates *CosmosStakingV1beta1ValidatorCommissionCommissionRates `json:"commission_rates,omitempty"`

	// update_time is the last time the commission rate was changed.
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"update_time,omitempty"`
}

// Validate validates this cosmos staking v1beta1 validator commission
func (m *CosmosStakingV1beta1ValidatorCommission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommissionRates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1ValidatorCommission) validateCommissionRates(formats strfmt.Registry) error {
	if swag.IsZero(m.CommissionRates) { // not required
		return nil
	}

	if m.CommissionRates != nil {
		if err := m.CommissionRates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission" + "." + "commission_rates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commission" + "." + "commission_rates")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosStakingV1beta1ValidatorCommission) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("commission"+"."+"update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cosmos staking v1beta1 validator commission based on the context it is used
func (m *CosmosStakingV1beta1ValidatorCommission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommissionRates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1ValidatorCommission) contextValidateCommissionRates(ctx context.Context, formats strfmt.Registry) error {

	if m.CommissionRates != nil {
		if err := m.CommissionRates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission" + "." + "commission_rates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commission" + "." + "commission_rates")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1ValidatorCommission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1ValidatorCommission) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1ValidatorCommission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosStakingV1beta1ValidatorCommissionCommissionRates commission_rates defines the initial commission rates to be used for creating a validator.
//
// swagger:model CosmosStakingV1beta1ValidatorCommissionCommissionRates
type CosmosStakingV1beta1ValidatorCommissionCommissionRates struct {

	// max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
	MaxChangeRate string `json:"max_change_rate,omitempty"`

	// max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
	MaxRate string `json:"max_rate,omitempty"`

	// rate is the commission rate charged to delegators, as a fraction.
	Rate string `json:"rate,omitempty"`
}

// Validate validates this cosmos staking v1beta1 validator commission commission rates
func (m *CosmosStakingV1beta1ValidatorCommissionCommissionRates) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos staking v1beta1 validator commission commission rates based on context it is used
func (m *CosmosStakingV1beta1ValidatorCommissionCommissionRates) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1ValidatorCommissionCommissionRates) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1ValidatorCommissionCommissionRates) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1ValidatorCommissionCommissionRates
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosStakingV1beta1ValidatorConsensusPubkey `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := ptypes.MarshalAny(foo)
//      ...
//      foo := &pb.Foo{}
//      if err := ptypes.UnmarshalAny(any, foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
//
// swagger:model CosmosStakingV1beta1ValidatorConsensusPubkey
type CosmosStakingV1beta1ValidatorConsensusPubkey struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this cosmos staking v1beta1 validator consensus pubkey
func (m *CosmosStakingV1beta1ValidatorConsensusPubkey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos staking v1beta1 validator consensus pubkey based on context it is used
func (m *CosmosStakingV1beta1ValidatorConsensusPubkey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1ValidatorConsensusPubkey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1ValidatorConsensusPubkey) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1ValidatorConsensusPubkey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosStakingV1beta1ValidatorDescription description defines the description terms for the validator.
//
// swagger:model CosmosStakingV1beta1ValidatorDescription
type CosmosStakingV1beta1ValidatorDescription struct {

	// details define other optional details.
	Details string `json:"details,omitempty"`

	// identity defines an optional identity signature (ex. UPort or Keybase).
	Identity string `json:"identity,omitempty"`

	// moniker defines a human-readable name for the validator.
	Moniker string `json:"moniker,omitempty"`

	// security_contact defines an optional email for security contact.
	SecurityContact string `json:"security_contact,omitempty"`

	// website defines an optional website link.
	Website string `json:"website,omitempty"`
}

// Validate validates this cosmos staking v1beta1 validator description
func (m *CosmosStakingV1beta1ValidatorDescription) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos staking v1beta1 validator description based on context it is used
func (m *CosmosStakingV1beta1ValidatorDescription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1ValidatorDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1ValidatorDescription) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1ValidatorDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
