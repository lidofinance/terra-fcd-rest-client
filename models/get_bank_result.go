// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetBankResult get bank result
//
// swagger:model getBankResult
type GetBankResult struct {

	// Available balance of the User
	// Required: true
	Balance []*GetBankResultBalance `json:"balance"`

	// Delegation informations of the User
	// Required: true
	Delegations []*GetBankResultDelegations `json:"delegations"`

	// User unbonding details
	// Required: true
	Unbondings []*GetBankResultUnbondings `json:"unbondings"`

	// Vesting schedule of the User
	// Required: true
	Vesting []*GetBankResultVesting `json:"vesting"`
}

// Validate validates this get bank result
func (m *GetBankResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelegations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnbondings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVesting(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetBankResult) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	for i := 0; i < len(m.Balance); i++ {
		if swag.IsZero(m.Balance[i]) { // not required
			continue
		}

		if m.Balance[i] != nil {
			if err := m.Balance[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("balance" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("balance" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetBankResult) validateDelegations(formats strfmt.Registry) error {

	if err := validate.Required("delegations", "body", m.Delegations); err != nil {
		return err
	}

	for i := 0; i < len(m.Delegations); i++ {
		if swag.IsZero(m.Delegations[i]) { // not required
			continue
		}

		if m.Delegations[i] != nil {
			if err := m.Delegations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delegations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("delegations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetBankResult) validateUnbondings(formats strfmt.Registry) error {

	if err := validate.Required("unbondings", "body", m.Unbondings); err != nil {
		return err
	}

	for i := 0; i < len(m.Unbondings); i++ {
		if swag.IsZero(m.Unbondings[i]) { // not required
			continue
		}

		if m.Unbondings[i] != nil {
			if err := m.Unbondings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unbondings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unbondings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetBankResult) validateVesting(formats strfmt.Registry) error {

	if err := validate.Required("vesting", "body", m.Vesting); err != nil {
		return err
	}

	for i := 0; i < len(m.Vesting); i++ {
		if swag.IsZero(m.Vesting[i]) { // not required
			continue
		}

		if m.Vesting[i] != nil {
			if err := m.Vesting[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vesting" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vesting" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get bank result based on the context it is used
func (m *GetBankResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBalance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDelegations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnbondings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVesting(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetBankResult) contextValidateBalance(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Balance); i++ {

		if m.Balance[i] != nil {
			if err := m.Balance[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("balance" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("balance" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetBankResult) contextValidateDelegations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Delegations); i++ {

		if m.Delegations[i] != nil {
			if err := m.Delegations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("delegations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("delegations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetBankResult) contextValidateUnbondings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Unbondings); i++ {

		if m.Unbondings[i] != nil {
			if err := m.Unbondings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unbondings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unbondings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetBankResult) contextValidateVesting(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vesting); i++ {

		if m.Vesting[i] != nil {
			if err := m.Vesting[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vesting" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vesting" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetBankResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetBankResult) UnmarshalBinary(b []byte) error {
	var res GetBankResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
