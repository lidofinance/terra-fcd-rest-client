// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CosmosGovV1beta1WeightedVoteOption WeightedVoteOption defines a unit of vote for vote split.
//
// swagger:model cosmos.gov.v1beta1.WeightedVoteOption
type CosmosGovV1beta1WeightedVoteOption struct {

	// VoteOption enumerates the valid vote options for a given governance proposal.
	//
	//  - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
	//  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
	//  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
	//  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
	//  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
	// Enum: [VOTE_OPTION_UNSPECIFIED VOTE_OPTION_YES VOTE_OPTION_ABSTAIN VOTE_OPTION_NO VOTE_OPTION_NO_WITH_VETO]
	Option string `json:"option,omitempty"`

	// weight
	Weight string `json:"weight,omitempty"`
}

// Validate validates this cosmos gov v1beta1 weighted vote option
func (m *CosmosGovV1beta1WeightedVoteOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cosmosGovV1beta1WeightedVoteOptionTypeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cosmosGovV1beta1WeightedVoteOptionTypeOptionPropEnum = append(cosmosGovV1beta1WeightedVoteOptionTypeOptionPropEnum, v)
	}
}

const (

	// CosmosGovV1beta1WeightedVoteOptionOptionVOTEOPTIONUNSPECIFIED captures enum value "VOTE_OPTION_UNSPECIFIED"
	CosmosGovV1beta1WeightedVoteOptionOptionVOTEOPTIONUNSPECIFIED string = "VOTE_OPTION_UNSPECIFIED"

	// CosmosGovV1beta1WeightedVoteOptionOptionVOTEOPTIONYES captures enum value "VOTE_OPTION_YES"
	CosmosGovV1beta1WeightedVoteOptionOptionVOTEOPTIONYES string = "VOTE_OPTION_YES"

	// CosmosGovV1beta1WeightedVoteOptionOptionVOTEOPTIONABSTAIN captures enum value "VOTE_OPTION_ABSTAIN"
	CosmosGovV1beta1WeightedVoteOptionOptionVOTEOPTIONABSTAIN string = "VOTE_OPTION_ABSTAIN"

	// CosmosGovV1beta1WeightedVoteOptionOptionVOTEOPTIONNO captures enum value "VOTE_OPTION_NO"
	CosmosGovV1beta1WeightedVoteOptionOptionVOTEOPTIONNO string = "VOTE_OPTION_NO"

	// CosmosGovV1beta1WeightedVoteOptionOptionVOTEOPTIONNOWITHVETO captures enum value "VOTE_OPTION_NO_WITH_VETO"
	CosmosGovV1beta1WeightedVoteOptionOptionVOTEOPTIONNOWITHVETO string = "VOTE_OPTION_NO_WITH_VETO"
)

// prop value enum
func (m *CosmosGovV1beta1WeightedVoteOption) validateOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cosmosGovV1beta1WeightedVoteOptionTypeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CosmosGovV1beta1WeightedVoteOption) validateOption(formats strfmt.Registry) error {
	if swag.IsZero(m.Option) { // not required
		return nil
	}

	// value enum
	if err := m.validateOptionEnum("option", "body", m.Option); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cosmos gov v1beta1 weighted vote option based on context it is used
func (m *CosmosGovV1beta1WeightedVoteOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosGovV1beta1WeightedVoteOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosGovV1beta1WeightedVoteOption) UnmarshalBinary(b []byte) error {
	var res CosmosGovV1beta1WeightedVoteOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
