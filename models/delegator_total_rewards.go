// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DelegatorTotalRewards delegator total rewards
//
// swagger:model DelegatorTotalRewards
type DelegatorTotalRewards struct {

	// rewards
	Rewards []*DelegatorTotalRewardsRewardsItems0 `json:"rewards"`

	// total
	Total []*DelegatorTotalRewardsTotalItems0 `json:"total"`
}

// Validate validates this delegator total rewards
func (m *DelegatorTotalRewards) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRewards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DelegatorTotalRewards) validateRewards(formats strfmt.Registry) error {
	if swag.IsZero(m.Rewards) { // not required
		return nil
	}

	for i := 0; i < len(m.Rewards); i++ {
		if swag.IsZero(m.Rewards[i]) { // not required
			continue
		}

		if m.Rewards[i] != nil {
			if err := m.Rewards[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DelegatorTotalRewards) validateTotal(formats strfmt.Registry) error {
	if swag.IsZero(m.Total) { // not required
		return nil
	}

	for i := 0; i < len(m.Total); i++ {
		if swag.IsZero(m.Total[i]) { // not required
			continue
		}

		if m.Total[i] != nil {
			if err := m.Total[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("total" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("total" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delegator total rewards based on the context it is used
func (m *DelegatorTotalRewards) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRewards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DelegatorTotalRewards) contextValidateRewards(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rewards); i++ {

		if m.Rewards[i] != nil {
			if err := m.Rewards[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rewards" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rewards" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DelegatorTotalRewards) contextValidateTotal(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Total); i++ {

		if m.Total[i] != nil {
			if err := m.Total[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("total" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("total" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DelegatorTotalRewards) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DelegatorTotalRewards) UnmarshalBinary(b []byte) error {
	var res DelegatorTotalRewards
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DelegatorTotalRewardsRewardsItems0 delegator total rewards rewards items0
//
// swagger:model DelegatorTotalRewardsRewardsItems0
type DelegatorTotalRewardsRewardsItems0 struct {

	// reward
	Reward []*DelegatorTotalRewardsRewardsItems0RewardItems0 `json:"reward"`

	// bech32 encoded address
	// Example: terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l
	ValidatorAddress string `json:"validator_address,omitempty"`
}

// Validate validates this delegator total rewards rewards items0
func (m *DelegatorTotalRewardsRewardsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReward(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DelegatorTotalRewardsRewardsItems0) validateReward(formats strfmt.Registry) error {
	if swag.IsZero(m.Reward) { // not required
		return nil
	}

	for i := 0; i < len(m.Reward); i++ {
		if swag.IsZero(m.Reward[i]) { // not required
			continue
		}

		if m.Reward[i] != nil {
			if err := m.Reward[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reward" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reward" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this delegator total rewards rewards items0 based on the context it is used
func (m *DelegatorTotalRewardsRewardsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReward(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DelegatorTotalRewardsRewardsItems0) contextValidateReward(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Reward); i++ {

		if m.Reward[i] != nil {
			if err := m.Reward[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reward" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reward" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DelegatorTotalRewardsRewardsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DelegatorTotalRewardsRewardsItems0) UnmarshalBinary(b []byte) error {
	var res DelegatorTotalRewardsRewardsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DelegatorTotalRewardsRewardsItems0RewardItems0 delegator total rewards rewards items0 reward items0
//
// swagger:model DelegatorTotalRewardsRewardsItems0RewardItems0
type DelegatorTotalRewardsRewardsItems0RewardItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this delegator total rewards rewards items0 reward items0
func (m *DelegatorTotalRewardsRewardsItems0RewardItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delegator total rewards rewards items0 reward items0 based on context it is used
func (m *DelegatorTotalRewardsRewardsItems0RewardItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DelegatorTotalRewardsRewardsItems0RewardItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DelegatorTotalRewardsRewardsItems0RewardItems0) UnmarshalBinary(b []byte) error {
	var res DelegatorTotalRewardsRewardsItems0RewardItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DelegatorTotalRewardsTotalItems0 delegator total rewards total items0
//
// swagger:model DelegatorTotalRewardsTotalItems0
type DelegatorTotalRewardsTotalItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this delegator total rewards total items0
func (m *DelegatorTotalRewardsTotalItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delegator total rewards total items0 based on context it is used
func (m *DelegatorTotalRewardsTotalItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DelegatorTotalRewardsTotalItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DelegatorTotalRewardsTotalItems0) UnmarshalBinary(b []byte) error {
	var res DelegatorTotalRewardsTotalItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
