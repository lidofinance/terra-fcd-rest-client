// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CosmosFeegrantV1beta1QueryAllowanceResponse QueryAllowanceResponse is the response type for the Query/Allowance RPC method.
//
// swagger:model cosmos.feegrant.v1beta1.QueryAllowanceResponse
type CosmosFeegrantV1beta1QueryAllowanceResponse struct {

	// allowance
	Allowance *CosmosFeegrantV1beta1QueryAllowanceResponseAllowance `json:"allowance,omitempty"`
}

// Validate validates this cosmos feegrant v1beta1 query allowance response
func (m *CosmosFeegrantV1beta1QueryAllowanceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosFeegrantV1beta1QueryAllowanceResponse) validateAllowance(formats strfmt.Registry) error {
	if swag.IsZero(m.Allowance) { // not required
		return nil
	}

	if m.Allowance != nil {
		if err := m.Allowance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allowance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allowance")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cosmos feegrant v1beta1 query allowance response based on the context it is used
func (m *CosmosFeegrantV1beta1QueryAllowanceResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllowance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosFeegrantV1beta1QueryAllowanceResponse) contextValidateAllowance(ctx context.Context, formats strfmt.Registry) error {

	if m.Allowance != nil {
		if err := m.Allowance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allowance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allowance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosFeegrantV1beta1QueryAllowanceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosFeegrantV1beta1QueryAllowanceResponse) UnmarshalBinary(b []byte) error {
	var res CosmosFeegrantV1beta1QueryAllowanceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosFeegrantV1beta1QueryAllowanceResponseAllowance Grant is stored in the KVStore to record a grant with full context
//
// allowance is a allowance granted for grantee by granter.
//
// swagger:model CosmosFeegrantV1beta1QueryAllowanceResponseAllowance
type CosmosFeegrantV1beta1QueryAllowanceResponseAllowance struct {

	// allowance
	Allowance *CosmosFeegrantV1beta1QueryAllowanceResponseAllowanceAllowance `json:"allowance,omitempty"`

	// grantee is the address of the user being granted an allowance of another user's funds.
	Grantee string `json:"grantee,omitempty"`

	// granter is the address of the user granting an allowance of their funds.
	Granter string `json:"granter,omitempty"`
}

// Validate validates this cosmos feegrant v1beta1 query allowance response allowance
func (m *CosmosFeegrantV1beta1QueryAllowanceResponseAllowance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosFeegrantV1beta1QueryAllowanceResponseAllowance) validateAllowance(formats strfmt.Registry) error {
	if swag.IsZero(m.Allowance) { // not required
		return nil
	}

	if m.Allowance != nil {
		if err := m.Allowance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allowance" + "." + "allowance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allowance" + "." + "allowance")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cosmos feegrant v1beta1 query allowance response allowance based on the context it is used
func (m *CosmosFeegrantV1beta1QueryAllowanceResponseAllowance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllowance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosFeegrantV1beta1QueryAllowanceResponseAllowance) contextValidateAllowance(ctx context.Context, formats strfmt.Registry) error {

	if m.Allowance != nil {
		if err := m.Allowance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allowance" + "." + "allowance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allowance" + "." + "allowance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosFeegrantV1beta1QueryAllowanceResponseAllowance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosFeegrantV1beta1QueryAllowanceResponseAllowance) UnmarshalBinary(b []byte) error {
	var res CosmosFeegrantV1beta1QueryAllowanceResponseAllowance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosFeegrantV1beta1QueryAllowanceResponseAllowanceAllowance allowance can be any of basic and filtered fee allowance.
//
// swagger:model CosmosFeegrantV1beta1QueryAllowanceResponseAllowanceAllowance
type CosmosFeegrantV1beta1QueryAllowanceResponseAllowanceAllowance struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this cosmos feegrant v1beta1 query allowance response allowance allowance
func (m *CosmosFeegrantV1beta1QueryAllowanceResponseAllowanceAllowance) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos feegrant v1beta1 query allowance response allowance allowance based on context it is used
func (m *CosmosFeegrantV1beta1QueryAllowanceResponseAllowanceAllowance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosFeegrantV1beta1QueryAllowanceResponseAllowanceAllowance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosFeegrantV1beta1QueryAllowanceResponseAllowanceAllowance) UnmarshalBinary(b []byte) error {
	var res CosmosFeegrantV1beta1QueryAllowanceResponseAllowanceAllowance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
