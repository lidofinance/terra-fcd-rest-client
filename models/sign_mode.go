// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SignMode SignMode represents a signing mode with its own security guarantees.
//
//   - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
// rejected
//   - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
// verified with raw bytes from Tx
//   - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
// human-readable textual representation on top of the binary representation
// from SIGN_MODE_DIRECT
//   - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
// Amino JSON and will be removed in the future
//
// swagger:model signMode
type SignMode string

func NewSignMode(value SignMode) *SignMode {
	v := value
	return &v
}

const (

	// SignModeSIGNMODEUNSPECIFIED captures enum value "SIGN_MODE_UNSPECIFIED"
	SignModeSIGNMODEUNSPECIFIED SignMode = "SIGN_MODE_UNSPECIFIED"

	// SignModeSIGNMODEDIRECT captures enum value "SIGN_MODE_DIRECT"
	SignModeSIGNMODEDIRECT SignMode = "SIGN_MODE_DIRECT"

	// SignModeSIGNMODETEXTUAL captures enum value "SIGN_MODE_TEXTUAL"
	SignModeSIGNMODETEXTUAL SignMode = "SIGN_MODE_TEXTUAL"

	// SignModeSIGNMODELEGACYAMINOJSON captures enum value "SIGN_MODE_LEGACY_AMINO_JSON"
	SignModeSIGNMODELEGACYAMINOJSON SignMode = "SIGN_MODE_LEGACY_AMINO_JSON"
)

// for schema
var signModeEnum []interface{}

func init() {
	var res []SignMode
	if err := json.Unmarshal([]byte(`["SIGN_MODE_UNSPECIFIED","SIGN_MODE_DIRECT","SIGN_MODE_TEXTUAL","SIGN_MODE_LEGACY_AMINO_JSON"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		signModeEnum = append(signModeEnum, v)
	}
}

func (m SignMode) validateSignModeEnum(path, location string, value SignMode) error {
	if err := validate.EnumCase(path, location, value, signModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sign mode
func (m SignMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSignModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this sign mode based on context it is used
func (m SignMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
