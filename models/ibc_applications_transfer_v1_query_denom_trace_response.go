// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IbcApplicationsTransferV1QueryDenomTraceResponse QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC
// method.
//
// swagger:model ibc.applications.transfer.v1.QueryDenomTraceResponse
type IbcApplicationsTransferV1QueryDenomTraceResponse struct {

	// denom trace
	DenomTrace *IbcApplicationsTransferV1QueryDenomTraceResponseDenomTrace `json:"denom_trace,omitempty"`
}

// Validate validates this ibc applications transfer v1 query denom trace response
func (m *IbcApplicationsTransferV1QueryDenomTraceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDenomTrace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbcApplicationsTransferV1QueryDenomTraceResponse) validateDenomTrace(formats strfmt.Registry) error {
	if swag.IsZero(m.DenomTrace) { // not required
		return nil
	}

	if m.DenomTrace != nil {
		if err := m.DenomTrace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("denom_trace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("denom_trace")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ibc applications transfer v1 query denom trace response based on the context it is used
func (m *IbcApplicationsTransferV1QueryDenomTraceResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDenomTrace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IbcApplicationsTransferV1QueryDenomTraceResponse) contextValidateDenomTrace(ctx context.Context, formats strfmt.Registry) error {

	if m.DenomTrace != nil {
		if err := m.DenomTrace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("denom_trace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("denom_trace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IbcApplicationsTransferV1QueryDenomTraceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbcApplicationsTransferV1QueryDenomTraceResponse) UnmarshalBinary(b []byte) error {
	var res IbcApplicationsTransferV1QueryDenomTraceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IbcApplicationsTransferV1QueryDenomTraceResponseDenomTrace DenomTrace contains the base denomination for ICS20 fungible tokens and the
// source tracing information path.
//
// swagger:model IbcApplicationsTransferV1QueryDenomTraceResponseDenomTrace
type IbcApplicationsTransferV1QueryDenomTraceResponseDenomTrace struct {

	// base denomination of the relayed fungible token.
	BaseDenom string `json:"base_denom,omitempty"`

	// path defines the chain of port/channel identifiers used for tracing the
	// source of the fungible token.
	Path string `json:"path,omitempty"`
}

// Validate validates this ibc applications transfer v1 query denom trace response denom trace
func (m *IbcApplicationsTransferV1QueryDenomTraceResponseDenomTrace) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ibc applications transfer v1 query denom trace response denom trace based on context it is used
func (m *IbcApplicationsTransferV1QueryDenomTraceResponseDenomTrace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IbcApplicationsTransferV1QueryDenomTraceResponseDenomTrace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IbcApplicationsTransferV1QueryDenomTraceResponseDenomTrace) UnmarshalBinary(b []byte) error {
	var res IbcApplicationsTransferV1QueryDenomTraceResponseDenomTrace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
