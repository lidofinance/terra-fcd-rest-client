// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TerraTreasuryV1beta1QueryParamsResponse QueryParamsResponse is the response type for the Query/Params RPC method.
//
// swagger:model terra.treasury.v1beta1.QueryParamsResponse
type TerraTreasuryV1beta1QueryParamsResponse struct {

	// params
	Params *TerraTreasuryV1beta1QueryParamsResponseParams `json:"params,omitempty"`
}

// Validate validates this terra treasury v1beta1 query params response
func (m *TerraTreasuryV1beta1QueryParamsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraTreasuryV1beta1QueryParamsResponse) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(m.Params) { // not required
		return nil
	}

	if m.Params != nil {
		if err := m.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this terra treasury v1beta1 query params response based on the context it is used
func (m *TerraTreasuryV1beta1QueryParamsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraTreasuryV1beta1QueryParamsResponse) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if m.Params != nil {
		if err := m.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TerraTreasuryV1beta1QueryParamsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraTreasuryV1beta1QueryParamsResponse) UnmarshalBinary(b []byte) error {
	var res TerraTreasuryV1beta1QueryParamsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TerraTreasuryV1beta1QueryParamsResponseParams params defines the parameters of the module.
//
// swagger:model TerraTreasuryV1beta1QueryParamsResponseParams
type TerraTreasuryV1beta1QueryParamsResponseParams struct {

	// mining increment
	MiningIncrement string `json:"mining_increment,omitempty"`

	// reward policy
	RewardPolicy *TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicy `json:"reward_policy,omitempty"`

	// seigniorage burden target
	SeigniorageBurdenTarget string `json:"seigniorage_burden_target,omitempty"`

	// tax policy
	TaxPolicy *TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicy `json:"tax_policy,omitempty"`

	// window long
	WindowLong string `json:"window_long,omitempty"`

	// window probation
	WindowProbation string `json:"window_probation,omitempty"`

	// window short
	WindowShort string `json:"window_short,omitempty"`
}

// Validate validates this terra treasury v1beta1 query params response params
func (m *TerraTreasuryV1beta1QueryParamsResponseParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRewardPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraTreasuryV1beta1QueryParamsResponseParams) validateRewardPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.RewardPolicy) { // not required
		return nil
	}

	if m.RewardPolicy != nil {
		if err := m.RewardPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "reward_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params" + "." + "reward_policy")
			}
			return err
		}
	}

	return nil
}

func (m *TerraTreasuryV1beta1QueryParamsResponseParams) validateTaxPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxPolicy) { // not required
		return nil
	}

	if m.TaxPolicy != nil {
		if err := m.TaxPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "tax_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params" + "." + "tax_policy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this terra treasury v1beta1 query params response params based on the context it is used
func (m *TerraTreasuryV1beta1QueryParamsResponseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRewardPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraTreasuryV1beta1QueryParamsResponseParams) contextValidateRewardPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.RewardPolicy != nil {
		if err := m.RewardPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "reward_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params" + "." + "reward_policy")
			}
			return err
		}
	}

	return nil
}

func (m *TerraTreasuryV1beta1QueryParamsResponseParams) contextValidateTaxPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxPolicy != nil {
		if err := m.TaxPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "tax_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params" + "." + "tax_policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TerraTreasuryV1beta1QueryParamsResponseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraTreasuryV1beta1QueryParamsResponseParams) UnmarshalBinary(b []byte) error {
	var res TerraTreasuryV1beta1QueryParamsResponseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicy PolicyConstraints - defines policy constraints can be applied in tax & reward policies
//
// swagger:model TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicy
type TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicy struct {

	// cap
	Cap *TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicyCap `json:"cap,omitempty"`

	// change rate max
	ChangeRateMax string `json:"change_rate_max,omitempty"`

	// rate max
	RateMax string `json:"rate_max,omitempty"`

	// rate min
	RateMin string `json:"rate_min,omitempty"`
}

// Validate validates this terra treasury v1beta1 query params response params reward policy
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicy) validateCap(formats strfmt.Registry) error {
	if swag.IsZero(m.Cap) { // not required
		return nil
	}

	if m.Cap != nil {
		if err := m.Cap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "reward_policy" + "." + "cap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params" + "." + "reward_policy" + "." + "cap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this terra treasury v1beta1 query params response params reward policy based on the context it is used
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicy) contextValidateCap(ctx context.Context, formats strfmt.Registry) error {

	if m.Cap != nil {
		if err := m.Cap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "reward_policy" + "." + "cap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params" + "." + "reward_policy" + "." + "cap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicy) UnmarshalBinary(b []byte) error {
	var res TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicyCap Coin defines a token with a denomination and an amount.
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
//
// swagger:model TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicyCap
type TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicyCap struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this terra treasury v1beta1 query params response params reward policy cap
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicyCap) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this terra treasury v1beta1 query params response params reward policy cap based on context it is used
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicyCap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicyCap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicyCap) UnmarshalBinary(b []byte) error {
	var res TerraTreasuryV1beta1QueryParamsResponseParamsRewardPolicyCap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicy PolicyConstraints - defines policy constraints can be applied in tax & reward policies
//
// swagger:model TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicy
type TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicy struct {

	// cap
	Cap *TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicyCap `json:"cap,omitempty"`

	// change rate max
	ChangeRateMax string `json:"change_rate_max,omitempty"`

	// rate max
	RateMax string `json:"rate_max,omitempty"`

	// rate min
	RateMin string `json:"rate_min,omitempty"`
}

// Validate validates this terra treasury v1beta1 query params response params tax policy
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicy) validateCap(formats strfmt.Registry) error {
	if swag.IsZero(m.Cap) { // not required
		return nil
	}

	if m.Cap != nil {
		if err := m.Cap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "tax_policy" + "." + "cap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params" + "." + "tax_policy" + "." + "cap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this terra treasury v1beta1 query params response params tax policy based on the context it is used
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicy) contextValidateCap(ctx context.Context, formats strfmt.Registry) error {

	if m.Cap != nil {
		if err := m.Cap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params" + "." + "tax_policy" + "." + "cap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params" + "." + "tax_policy" + "." + "cap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicy) UnmarshalBinary(b []byte) error {
	var res TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicyCap Coin defines a token with a denomination and an amount.
//
// NOTE: The amount field is an Int which implements the custom method
// signatures required by gogoproto.
//
// swagger:model TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicyCap
type TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicyCap struct {

	// amount
	Amount string `json:"amount,omitempty"`

	// denom
	Denom string `json:"denom,omitempty"`
}

// Validate validates this terra treasury v1beta1 query params response params tax policy cap
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicyCap) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this terra treasury v1beta1 query params response params tax policy cap based on context it is used
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicyCap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicyCap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicyCap) UnmarshalBinary(b []byte) error {
	var res TerraTreasuryV1beta1QueryParamsResponseParamsTaxPolicyCap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
