// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SwapReq swap req
//
// swagger:model SwapReq
type SwapReq struct {

	// ask denom
	// Example: uluna
	// Required: true
	AskDenom *string `json:"ask_denom"`

	// base req
	// Required: true
	BaseReq *SwapReqBaseReq `json:"base_req"`

	// offer coin
	// Required: true
	OfferCoin *SwapReqOfferCoin `json:"offer_coin"`

	// the `receiver` field can be skipped when the receiver is trader
	// Example: terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv
	Receiver string `json:"receiver,omitempty"`
}

// Validate validates this swap req
func (m *SwapReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAskDenom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseReq(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferCoin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwapReq) validateAskDenom(formats strfmt.Registry) error {

	if err := validate.Required("ask_denom", "body", m.AskDenom); err != nil {
		return err
	}

	return nil
}

func (m *SwapReq) validateBaseReq(formats strfmt.Registry) error {

	if err := validate.Required("base_req", "body", m.BaseReq); err != nil {
		return err
	}

	if m.BaseReq != nil {
		if err := m.BaseReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_req")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base_req")
			}
			return err
		}
	}

	return nil
}

func (m *SwapReq) validateOfferCoin(formats strfmt.Registry) error {

	if err := validate.Required("offer_coin", "body", m.OfferCoin); err != nil {
		return err
	}

	if m.OfferCoin != nil {
		if err := m.OfferCoin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("offer_coin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("offer_coin")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this swap req based on the context it is used
func (m *SwapReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseReq(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOfferCoin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwapReq) contextValidateBaseReq(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseReq != nil {
		if err := m.BaseReq.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base_req")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base_req")
			}
			return err
		}
	}

	return nil
}

func (m *SwapReq) contextValidateOfferCoin(ctx context.Context, formats strfmt.Registry) error {

	if m.OfferCoin != nil {
		if err := m.OfferCoin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("offer_coin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("offer_coin")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwapReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwapReq) UnmarshalBinary(b []byte) error {
	var res SwapReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwapReqBaseReq swap req base req
//
// swagger:model SwapReqBaseReq
type SwapReqBaseReq struct {

	// account number
	// Example: 0
	AccountNumber string `json:"account_number,omitempty"`

	// chain id
	// Example: Columbus-5
	ChainID string `json:"chain_id,omitempty"`

	// fees
	Fees []*SwapReqBaseReqFeesItems0 `json:"fees"`

	// Sender address or Keybase name to generate a transaction
	// Example: terra1wg2mlrxdmnnkkykgqg4znky86nyrtc45q336yv
	From string `json:"from,omitempty"`

	// gas
	// Example: 200000
	Gas string `json:"gas,omitempty"`

	// gas adjustment
	// Example: 1.2
	GasAdjustment string `json:"gas_adjustment,omitempty"`

	// memo
	// Example: Sent via Terra Station ðŸš€
	Memo string `json:"memo,omitempty"`

	// sequence
	// Example: 1
	Sequence string `json:"sequence,omitempty"`

	// Estimate gas for a transaction (cannot be used in conjunction with generate_only)
	// Example: false
	Simulate bool `json:"simulate,omitempty"`
}

// Validate validates this swap req base req
func (m *SwapReqBaseReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFees(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwapReqBaseReq) validateFees(formats strfmt.Registry) error {
	if swag.IsZero(m.Fees) { // not required
		return nil
	}

	for i := 0; i < len(m.Fees); i++ {
		if swag.IsZero(m.Fees[i]) { // not required
			continue
		}

		if m.Fees[i] != nil {
			if err := m.Fees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("base_req" + "." + "fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("base_req" + "." + "fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this swap req base req based on the context it is used
func (m *SwapReqBaseReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwapReqBaseReq) contextValidateFees(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Fees); i++ {

		if m.Fees[i] != nil {
			if err := m.Fees[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("base_req" + "." + "fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("base_req" + "." + "fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwapReqBaseReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwapReqBaseReq) UnmarshalBinary(b []byte) error {
	var res SwapReqBaseReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwapReqBaseReqFeesItems0 swap req base req fees items0
//
// swagger:model SwapReqBaseReqFeesItems0
type SwapReqBaseReqFeesItems0 struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this swap req base req fees items0
func (m *SwapReqBaseReqFeesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this swap req base req fees items0 based on context it is used
func (m *SwapReqBaseReqFeesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SwapReqBaseReqFeesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwapReqBaseReqFeesItems0) UnmarshalBinary(b []byte) error {
	var res SwapReqBaseReqFeesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SwapReqOfferCoin swap req offer coin
//
// swagger:model SwapReqOfferCoin
type SwapReqOfferCoin struct {

	// amount
	// Example: 50
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: uluna
	Denom string `json:"denom,omitempty"`
}

// Validate validates this swap req offer coin
func (m *SwapReqOfferCoin) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this swap req offer coin based on context it is used
func (m *SwapReqOfferCoin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SwapReqOfferCoin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwapReqOfferCoin) UnmarshalBinary(b []byte) error {
	var res SwapReqOfferCoin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
