// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CosmosUpgradeV1beta1QueryModuleVersionsResponse QueryModuleVersionsResponse is the response type for the Query/ModuleVersions
// RPC method.
//
// swagger:model cosmos.upgrade.v1beta1.QueryModuleVersionsResponse
type CosmosUpgradeV1beta1QueryModuleVersionsResponse struct {

	// module_versions is a list of module names with their consensus versions.
	ModuleVersions []*CosmosUpgradeV1beta1QueryModuleVersionsResponseModuleVersionsItems0 `json:"module_versions"`
}

// Validate validates this cosmos upgrade v1beta1 query module versions response
func (m *CosmosUpgradeV1beta1QueryModuleVersionsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModuleVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosUpgradeV1beta1QueryModuleVersionsResponse) validateModuleVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.ModuleVersions) { // not required
		return nil
	}

	for i := 0; i < len(m.ModuleVersions); i++ {
		if swag.IsZero(m.ModuleVersions[i]) { // not required
			continue
		}

		if m.ModuleVersions[i] != nil {
			if err := m.ModuleVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("module_versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("module_versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cosmos upgrade v1beta1 query module versions response based on the context it is used
func (m *CosmosUpgradeV1beta1QueryModuleVersionsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateModuleVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosUpgradeV1beta1QueryModuleVersionsResponse) contextValidateModuleVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ModuleVersions); i++ {

		if m.ModuleVersions[i] != nil {
			if err := m.ModuleVersions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("module_versions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("module_versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosUpgradeV1beta1QueryModuleVersionsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosUpgradeV1beta1QueryModuleVersionsResponse) UnmarshalBinary(b []byte) error {
	var res CosmosUpgradeV1beta1QueryModuleVersionsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosUpgradeV1beta1QueryModuleVersionsResponseModuleVersionsItems0 ModuleVersion specifies a module and its consensus version.
//
// swagger:model CosmosUpgradeV1beta1QueryModuleVersionsResponseModuleVersionsItems0
type CosmosUpgradeV1beta1QueryModuleVersionsResponseModuleVersionsItems0 struct {

	// name of the app module
	Name string `json:"name,omitempty"`

	// consensus version of the app module
	Version string `json:"version,omitempty"`
}

// Validate validates this cosmos upgrade v1beta1 query module versions response module versions items0
func (m *CosmosUpgradeV1beta1QueryModuleVersionsResponseModuleVersionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos upgrade v1beta1 query module versions response module versions items0 based on context it is used
func (m *CosmosUpgradeV1beta1QueryModuleVersionsResponseModuleVersionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosUpgradeV1beta1QueryModuleVersionsResponseModuleVersionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosUpgradeV1beta1QueryModuleVersionsResponseModuleVersionsItems0) UnmarshalBinary(b []byte) error {
	var res CosmosUpgradeV1beta1QueryModuleVersionsResponseModuleVersionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
