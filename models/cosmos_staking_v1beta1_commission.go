// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CosmosStakingV1beta1Commission Commission defines commission parameters for a given validator.
//
// swagger:model cosmos.staking.v1beta1.Commission
type CosmosStakingV1beta1Commission struct {

	// commission rates
	CommissionRates *CosmosStakingV1beta1CommissionCommissionRates `json:"commission_rates,omitempty"`

	// update_time is the last time the commission rate was changed.
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"update_time,omitempty"`
}

// Validate validates this cosmos staking v1beta1 commission
func (m *CosmosStakingV1beta1Commission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommissionRates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1Commission) validateCommissionRates(formats strfmt.Registry) error {
	if swag.IsZero(m.CommissionRates) { // not required
		return nil
	}

	if m.CommissionRates != nil {
		if err := m.CommissionRates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission_rates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commission_rates")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosStakingV1beta1Commission) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("update_time", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cosmos staking v1beta1 commission based on the context it is used
func (m *CosmosStakingV1beta1Commission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommissionRates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1Commission) contextValidateCommissionRates(ctx context.Context, formats strfmt.Registry) error {

	if m.CommissionRates != nil {
		if err := m.CommissionRates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission_rates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commission_rates")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1Commission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1Commission) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1Commission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosStakingV1beta1CommissionCommissionRates commission_rates defines the initial commission rates to be used for creating a validator.
//
// swagger:model CosmosStakingV1beta1CommissionCommissionRates
type CosmosStakingV1beta1CommissionCommissionRates struct {

	// max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
	MaxChangeRate string `json:"max_change_rate,omitempty"`

	// max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
	MaxRate string `json:"max_rate,omitempty"`

	// rate is the commission rate charged to delegators, as a fraction.
	Rate string `json:"rate,omitempty"`
}

// Validate validates this cosmos staking v1beta1 commission commission rates
func (m *CosmosStakingV1beta1CommissionCommissionRates) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos staking v1beta1 commission commission rates based on context it is used
func (m *CosmosStakingV1beta1CommissionCommissionRates) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1CommissionCommissionRates) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1CommissionCommissionRates) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1CommissionCommissionRates
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
