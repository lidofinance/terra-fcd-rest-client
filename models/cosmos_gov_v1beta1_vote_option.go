// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CosmosGovV1beta1VoteOption VoteOption enumerates the valid vote options for a given governance proposal.
//
//  - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
//  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
//  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
//  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
//  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
//
// swagger:model cosmos.gov.v1beta1.VoteOption
type CosmosGovV1beta1VoteOption string

func NewCosmosGovV1beta1VoteOption(value CosmosGovV1beta1VoteOption) *CosmosGovV1beta1VoteOption {
	v := value
	return &v
}

const (

	// CosmosGovV1beta1VoteOptionVOTEOPTIONUNSPECIFIED captures enum value "VOTE_OPTION_UNSPECIFIED"
	CosmosGovV1beta1VoteOptionVOTEOPTIONUNSPECIFIED CosmosGovV1beta1VoteOption = "VOTE_OPTION_UNSPECIFIED"

	// CosmosGovV1beta1VoteOptionVOTEOPTIONYES captures enum value "VOTE_OPTION_YES"
	CosmosGovV1beta1VoteOptionVOTEOPTIONYES CosmosGovV1beta1VoteOption = "VOTE_OPTION_YES"

	// CosmosGovV1beta1VoteOptionVOTEOPTIONABSTAIN captures enum value "VOTE_OPTION_ABSTAIN"
	CosmosGovV1beta1VoteOptionVOTEOPTIONABSTAIN CosmosGovV1beta1VoteOption = "VOTE_OPTION_ABSTAIN"

	// CosmosGovV1beta1VoteOptionVOTEOPTIONNO captures enum value "VOTE_OPTION_NO"
	CosmosGovV1beta1VoteOptionVOTEOPTIONNO CosmosGovV1beta1VoteOption = "VOTE_OPTION_NO"

	// CosmosGovV1beta1VoteOptionVOTEOPTIONNOWITHVETO captures enum value "VOTE_OPTION_NO_WITH_VETO"
	CosmosGovV1beta1VoteOptionVOTEOPTIONNOWITHVETO CosmosGovV1beta1VoteOption = "VOTE_OPTION_NO_WITH_VETO"
)

// for schema
var cosmosGovV1beta1VoteOptionEnum []interface{}

func init() {
	var res []CosmosGovV1beta1VoteOption
	if err := json.Unmarshal([]byte(`["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cosmosGovV1beta1VoteOptionEnum = append(cosmosGovV1beta1VoteOptionEnum, v)
	}
}

func (m CosmosGovV1beta1VoteOption) validateCosmosGovV1beta1VoteOptionEnum(path, location string, value CosmosGovV1beta1VoteOption) error {
	if err := validate.EnumCase(path, location, value, cosmosGovV1beta1VoteOptionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cosmos gov v1beta1 vote option
func (m CosmosGovV1beta1VoteOption) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCosmosGovV1beta1VoteOptionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cosmos gov v1beta1 vote option based on context it is used
func (m CosmosGovV1beta1VoteOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
