// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CosmosTxV1beta1GetTxsEventResponse GetTxsEventResponse is the response type for the Service.TxsByEvents
// RPC method.
//
// swagger:model cosmos.tx.v1beta1.GetTxsEventResponse
type CosmosTxV1beta1GetTxsEventResponse struct {

	// pagination
	Pagination *CosmosTxV1beta1GetTxsEventResponsePagination `json:"pagination,omitempty"`

	// tx_responses is the list of queried TxResponses.
	TxResponses []*CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0 `json:"tx_responses"`

	// txs is the list of queried transactions.
	Txs []*CosmosTxV1beta1Tx `json:"txs"`
}

// Validate validates this cosmos tx v1beta1 get txs event response
func (m *CosmosTxV1beta1GetTxsEventResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxResponses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosTxV1beta1GetTxsEventResponse) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(m.Pagination) { // not required
		return nil
	}

	if m.Pagination != nil {
		if err := m.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosTxV1beta1GetTxsEventResponse) validateTxResponses(formats strfmt.Registry) error {
	if swag.IsZero(m.TxResponses) { // not required
		return nil
	}

	for i := 0; i < len(m.TxResponses); i++ {
		if swag.IsZero(m.TxResponses[i]) { // not required
			continue
		}

		if m.TxResponses[i] != nil {
			if err := m.TxResponses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tx_responses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tx_responses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CosmosTxV1beta1GetTxsEventResponse) validateTxs(formats strfmt.Registry) error {
	if swag.IsZero(m.Txs) { // not required
		return nil
	}

	for i := 0; i < len(m.Txs); i++ {
		if swag.IsZero(m.Txs[i]) { // not required
			continue
		}

		if m.Txs[i] != nil {
			if err := m.Txs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("txs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("txs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cosmos tx v1beta1 get txs event response based on the context it is used
func (m *CosmosTxV1beta1GetTxsEventResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTxs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosTxV1beta1GetTxsEventResponse) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if m.Pagination != nil {
		if err := m.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosTxV1beta1GetTxsEventResponse) contextValidateTxResponses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TxResponses); i++ {

		if m.TxResponses[i] != nil {
			if err := m.TxResponses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tx_responses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tx_responses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CosmosTxV1beta1GetTxsEventResponse) contextValidateTxs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Txs); i++ {

		if m.Txs[i] != nil {
			if err := m.Txs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("txs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("txs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosTxV1beta1GetTxsEventResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosTxV1beta1GetTxsEventResponse) UnmarshalBinary(b []byte) error {
	var res CosmosTxV1beta1GetTxsEventResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosTxV1beta1GetTxsEventResponsePagination pagination defines an pagination for the response.
//
// swagger:model CosmosTxV1beta1GetTxsEventResponsePagination
type CosmosTxV1beta1GetTxsEventResponsePagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this cosmos tx v1beta1 get txs event response pagination
func (m *CosmosTxV1beta1GetTxsEventResponsePagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos tx v1beta1 get txs event response pagination based on context it is used
func (m *CosmosTxV1beta1GetTxsEventResponsePagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosTxV1beta1GetTxsEventResponsePagination) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosTxV1beta1GetTxsEventResponsePagination) UnmarshalBinary(b []byte) error {
	var res CosmosTxV1beta1GetTxsEventResponsePagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0 TxResponse defines a structure containing relevant tx data and metadata. The
// tags are stringified and the log is JSON decoded.
//
// swagger:model CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0
type CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0 struct {

	// Response code.
	Code int64 `json:"code,omitempty"`

	// Namespace for the Code
	Codespace string `json:"codespace,omitempty"`

	// Result bytes, if any.
	Data string `json:"data,omitempty"`

	// Amount of gas consumed by transaction.
	GasUsed string `json:"gas_used,omitempty"`

	// Amount of gas requested for transaction.
	GasWanted string `json:"gas_wanted,omitempty"`

	// The block height
	Height string `json:"height,omitempty"`

	// Additional information. May be non-deterministic.
	Info string `json:"info,omitempty"`

	// The output of the application's logger (typed). May be non-deterministic.
	Logs []*CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0 `json:"logs"`

	// The output of the application's logger (raw string). May be
	// non-deterministic.
	RawLog string `json:"raw_log,omitempty"`

	// Time of the previous block. For heights > 1, it's the weighted median of
	// the timestamps of the valid votes in the block.LastCommit. For height == 1,
	// it's genesis time.
	Timestamp string `json:"timestamp,omitempty"`

	// tx
	Tx *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0Tx `json:"tx,omitempty"`

	// The transaction hash.
	Txhash string `json:"txhash,omitempty"`
}

// Validate validates this cosmos tx v1beta1 get txs event response tx responses items0
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0) validateLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.Logs) { // not required
		return nil
	}

	for i := 0; i < len(m.Logs); i++ {
		if swag.IsZero(m.Logs[i]) { // not required
			continue
		}

		if m.Logs[i] != nil {
			if err := m.Logs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("logs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0) validateTx(formats strfmt.Registry) error {
	if swag.IsZero(m.Tx) { // not required
		return nil
	}

	if m.Tx != nil {
		if err := m.Tx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cosmos tx v1beta1 get txs event response tx responses items0 based on the context it is used
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0) contextValidateLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Logs); i++ {

		if m.Logs[i] != nil {
			if err := m.Logs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("logs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0) contextValidateTx(ctx context.Context, formats strfmt.Registry) error {

	if m.Tx != nil {
		if err := m.Tx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0) UnmarshalBinary(b []byte) error {
	var res CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0 ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
//
// swagger:model CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0
type CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0 struct {

	// Events contains a slice of Event objects that were emitted during some
	// execution.
	Events []*CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0 `json:"events"`

	// log
	Log string `json:"log,omitempty"`

	// msg index
	MsgIndex int64 `json:"msg_index,omitempty"`
}

// Validate validates this cosmos tx v1beta1 get txs event response tx responses items0 logs items0
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cosmos tx v1beta1 get txs event response tx responses items0 logs items0 based on the context it is used
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Events); i++ {

		if m.Events[i] != nil {
			if err := m.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0) UnmarshalBinary(b []byte) error {
	var res CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0 StringEvent defines en Event object wrapper where all the attributes
// contain key/value pairs that are strings instead of raw bytes.
//
// swagger:model CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0
type CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0 struct {

	// attributes
	Attributes []*CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0AttributesItems0 `json:"attributes"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this cosmos tx v1beta1 get txs event response tx responses items0 logs items0 events items0
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributes); i++ {
		if swag.IsZero(m.Attributes[i]) { // not required
			continue
		}

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cosmos tx v1beta1 get txs event response tx responses items0 logs items0 events items0 based on the context it is used
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attributes); i++ {

		if m.Attributes[i] != nil {
			if err := m.Attributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0) UnmarshalBinary(b []byte) error {
	var res CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0AttributesItems0 Attribute defines an attribute wrapper where the key and value are
// strings instead of raw bytes.
//
// swagger:model CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0AttributesItems0
type CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0AttributesItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this cosmos tx v1beta1 get txs event response tx responses items0 logs items0 events items0 attributes items0
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0AttributesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos tx v1beta1 get txs event response tx responses items0 logs items0 events items0 attributes items0 based on context it is used
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0AttributesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0AttributesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0AttributesItems0) UnmarshalBinary(b []byte) error {
	var res CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0LogsItems0EventsItems0AttributesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0Tx `Any` contains an arbitrary serialized protocol buffer message along with a
// URL that describes the type of the serialized message.
//
// Protobuf library provides support to pack/unpack Any values in the form
// of utility functions or additional generated methods of the Any type.
//
// Example 1: Pack and unpack a message in C++.
//
//     Foo foo = ...;
//     Any any;
//     any.PackFrom(foo);
//     ...
//     if (any.UnpackTo(&foo)) {
//       ...
//     }
//
// Example 2: Pack and unpack a message in Java.
//
//     Foo foo = ...;
//     Any any = Any.pack(foo);
//     ...
//     if (any.is(Foo.class)) {
//       foo = any.unpack(Foo.class);
//     }
//
//  Example 3: Pack and unpack a message in Python.
//
//     foo = Foo(...)
//     any = Any()
//     any.Pack(foo)
//     ...
//     if any.Is(Foo.DESCRIPTOR):
//       any.Unpack(foo)
//       ...
//
//  Example 4: Pack and unpack a message in Go
//
//      foo := &pb.Foo{...}
//      any, err := ptypes.MarshalAny(foo)
//      ...
//      foo := &pb.Foo{}
//      if err := ptypes.UnmarshalAny(any, foo); err != nil {
//        ...
//      }
//
// The pack methods provided by protobuf library will by default use
// 'type.googleapis.com/full.type.name' as the type URL and the unpack
// methods only use the fully qualified type name after the last '/'
// in the type URL, for example "foo.bar.com/x/y.z" will yield type
// name "y.z".
//
//
// JSON
// ====
// The JSON representation of an `Any` value uses the regular
// representation of the deserialized, embedded message, with an
// additional field `@type` which contains the type URL. Example:
//
//     package google.profile;
//     message Person {
//       string first_name = 1;
//       string last_name = 2;
//     }
//
//     {
//       "@type": "type.googleapis.com/google.profile.Person",
//       "firstName": <string>,
//       "lastName": <string>
//     }
//
// If the embedded message type is well-known and has a custom JSON
// representation, that representation will be embedded adding a field
// `value` which holds the custom JSON in addition to the `@type`
// field. Example (for message [google.protobuf.Duration][]):
//
//     {
//       "@type": "type.googleapis.com/google.protobuf.Duration",
//       "value": "1.212s"
//     }
//
// swagger:model CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0Tx
type CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0Tx struct {

	// A URL/resource name that uniquely identifies the type of the serialized
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent
	// the fully qualified name of the type (as in
	// `path/google.protobuf.Duration`). The name should be in a canonical form
	// (e.g., leading "." is not accepted).
	//
	// In practice, teams usually precompile into the binary all types that they
	// expect it to use in the context of Any. However, for URLs which use the
	// scheme `http`, `https`, or no scheme, one can optionally set up a type
	// server that maps type URLs to message definitions as follows:
	//
	// * If no scheme is provided, `https` is assumed.
	// * An HTTP GET on the URL must yield a [google.protobuf.Type][]
	//   value in binary format, or produce an error.
	// * Applications are allowed to cache lookup results based on the
	//   URL, or have them precompiled into a binary to avoid any
	//   lookup. Therefore, binary compatibility needs to be preserved
	//   on changes to types. (Use versioned type names to manage
	//   breaking changes.)
	//
	// Note: this functionality is not currently available in the official
	// protobuf release, and it is not used for type URLs beginning with
	// type.googleapis.com.
	//
	// Schemes other than `http`, `https` (or the empty scheme) might be
	// used with implementation specific semantics.
	TypeURL string `json:"type_url,omitempty"`

	// Must be a valid serialized protocol buffer of the above specified type.
	// Format: byte
	Value strfmt.Base64 `json:"value,omitempty"`
}

// Validate validates this cosmos tx v1beta1 get txs event response tx responses items0 tx
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0Tx) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos tx v1beta1 get txs event response tx responses items0 tx based on context it is used
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0Tx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0Tx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0Tx) UnmarshalBinary(b []byte) error {
	var res CosmosTxV1beta1GetTxsEventResponseTxResponsesItems0Tx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
