// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CosmosGovV1beta1QueryVotesResponse QueryVotesResponse is the response type for the Query/Votes RPC method.
//
// swagger:model cosmos.gov.v1beta1.QueryVotesResponse
type CosmosGovV1beta1QueryVotesResponse struct {

	// pagination
	Pagination *CosmosGovV1beta1QueryVotesResponsePagination `json:"pagination,omitempty"`

	// votes defined the queried votes.
	Votes []*CosmosGovV1beta1QueryVotesResponseVotesItems0 `json:"votes"`
}

// Validate validates this cosmos gov v1beta1 query votes response
func (m *CosmosGovV1beta1QueryVotesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosGovV1beta1QueryVotesResponse) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(m.Pagination) { // not required
		return nil
	}

	if m.Pagination != nil {
		if err := m.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosGovV1beta1QueryVotesResponse) validateVotes(formats strfmt.Registry) error {
	if swag.IsZero(m.Votes) { // not required
		return nil
	}

	for i := 0; i < len(m.Votes); i++ {
		if swag.IsZero(m.Votes[i]) { // not required
			continue
		}

		if m.Votes[i] != nil {
			if err := m.Votes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("votes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("votes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cosmos gov v1beta1 query votes response based on the context it is used
func (m *CosmosGovV1beta1QueryVotesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVotes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosGovV1beta1QueryVotesResponse) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if m.Pagination != nil {
		if err := m.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

func (m *CosmosGovV1beta1QueryVotesResponse) contextValidateVotes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Votes); i++ {

		if m.Votes[i] != nil {
			if err := m.Votes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("votes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("votes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryVotesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryVotesResponse) UnmarshalBinary(b []byte) error {
	var res CosmosGovV1beta1QueryVotesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosGovV1beta1QueryVotesResponsePagination pagination defines the pagination in the response.
//
// swagger:model CosmosGovV1beta1QueryVotesResponsePagination
type CosmosGovV1beta1QueryVotesResponsePagination struct {

	// next_key is the key to be passed to PageRequest.key to
	// query the next page most efficiently
	// Format: byte
	NextKey strfmt.Base64 `json:"next_key,omitempty"`

	// total is total number of results available if PageRequest.count_total
	// was set, its value is undefined otherwise
	Total string `json:"total,omitempty"`
}

// Validate validates this cosmos gov v1beta1 query votes response pagination
func (m *CosmosGovV1beta1QueryVotesResponsePagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cosmos gov v1beta1 query votes response pagination based on context it is used
func (m *CosmosGovV1beta1QueryVotesResponsePagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryVotesResponsePagination) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryVotesResponsePagination) UnmarshalBinary(b []byte) error {
	var res CosmosGovV1beta1QueryVotesResponsePagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosGovV1beta1QueryVotesResponseVotesItems0 Vote defines a vote on a governance proposal.
// A Vote consists of a proposal ID, the voter, and the vote option.
//
// swagger:model CosmosGovV1beta1QueryVotesResponseVotesItems0
type CosmosGovV1beta1QueryVotesResponseVotesItems0 struct {

	// Deprecated: Prefer to use `options` instead. This field is set in queries
	// if and only if `len(options) == 1` and that option has weight 1. In all
	// other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
	// Enum: [VOTE_OPTION_UNSPECIFIED VOTE_OPTION_YES VOTE_OPTION_ABSTAIN VOTE_OPTION_NO VOTE_OPTION_NO_WITH_VETO]
	Option string `json:"option,omitempty"`

	// options
	Options []*CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0 `json:"options"`

	// proposal id
	ProposalID string `json:"proposal_id,omitempty"`

	// voter
	Voter string `json:"voter,omitempty"`
}

// Validate validates this cosmos gov v1beta1 query votes response votes items0
func (m *CosmosGovV1beta1QueryVotesResponseVotesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cosmosGovV1beta1QueryVotesResponseVotesItems0TypeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cosmosGovV1beta1QueryVotesResponseVotesItems0TypeOptionPropEnum = append(cosmosGovV1beta1QueryVotesResponseVotesItems0TypeOptionPropEnum, v)
	}
}

const (

	// CosmosGovV1beta1QueryVotesResponseVotesItems0OptionVOTEOPTIONUNSPECIFIED captures enum value "VOTE_OPTION_UNSPECIFIED"
	CosmosGovV1beta1QueryVotesResponseVotesItems0OptionVOTEOPTIONUNSPECIFIED string = "VOTE_OPTION_UNSPECIFIED"

	// CosmosGovV1beta1QueryVotesResponseVotesItems0OptionVOTEOPTIONYES captures enum value "VOTE_OPTION_YES"
	CosmosGovV1beta1QueryVotesResponseVotesItems0OptionVOTEOPTIONYES string = "VOTE_OPTION_YES"

	// CosmosGovV1beta1QueryVotesResponseVotesItems0OptionVOTEOPTIONABSTAIN captures enum value "VOTE_OPTION_ABSTAIN"
	CosmosGovV1beta1QueryVotesResponseVotesItems0OptionVOTEOPTIONABSTAIN string = "VOTE_OPTION_ABSTAIN"

	// CosmosGovV1beta1QueryVotesResponseVotesItems0OptionVOTEOPTIONNO captures enum value "VOTE_OPTION_NO"
	CosmosGovV1beta1QueryVotesResponseVotesItems0OptionVOTEOPTIONNO string = "VOTE_OPTION_NO"

	// CosmosGovV1beta1QueryVotesResponseVotesItems0OptionVOTEOPTIONNOWITHVETO captures enum value "VOTE_OPTION_NO_WITH_VETO"
	CosmosGovV1beta1QueryVotesResponseVotesItems0OptionVOTEOPTIONNOWITHVETO string = "VOTE_OPTION_NO_WITH_VETO"
)

// prop value enum
func (m *CosmosGovV1beta1QueryVotesResponseVotesItems0) validateOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cosmosGovV1beta1QueryVotesResponseVotesItems0TypeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CosmosGovV1beta1QueryVotesResponseVotesItems0) validateOption(formats strfmt.Registry) error {
	if swag.IsZero(m.Option) { // not required
		return nil
	}

	// value enum
	if err := m.validateOptionEnum("option", "body", m.Option); err != nil {
		return err
	}

	return nil
}

func (m *CosmosGovV1beta1QueryVotesResponseVotesItems0) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {
		if swag.IsZero(m.Options[i]) { // not required
			continue
		}

		if m.Options[i] != nil {
			if err := m.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cosmos gov v1beta1 query votes response votes items0 based on the context it is used
func (m *CosmosGovV1beta1QueryVotesResponseVotesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosGovV1beta1QueryVotesResponseVotesItems0) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Options); i++ {

		if m.Options[i] != nil {
			if err := m.Options[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryVotesResponseVotesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryVotesResponseVotesItems0) UnmarshalBinary(b []byte) error {
	var res CosmosGovV1beta1QueryVotesResponseVotesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0 WeightedVoteOption defines a unit of vote for vote split.
//
// swagger:model CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0
type CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0 struct {

	// VoteOption enumerates the valid vote options for a given governance proposal.
	//
	//  - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
	//  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
	//  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
	//  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
	//  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
	// Enum: [VOTE_OPTION_UNSPECIFIED VOTE_OPTION_YES VOTE_OPTION_ABSTAIN VOTE_OPTION_NO VOTE_OPTION_NO_WITH_VETO]
	Option string `json:"option,omitempty"`

	// weight
	Weight string `json:"weight,omitempty"`
}

// Validate validates this cosmos gov v1beta1 query votes response votes items0 options items0
func (m *CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0TypeOptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VOTE_OPTION_UNSPECIFIED","VOTE_OPTION_YES","VOTE_OPTION_ABSTAIN","VOTE_OPTION_NO","VOTE_OPTION_NO_WITH_VETO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0TypeOptionPropEnum = append(cosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0TypeOptionPropEnum, v)
	}
}

const (

	// CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0OptionVOTEOPTIONUNSPECIFIED captures enum value "VOTE_OPTION_UNSPECIFIED"
	CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0OptionVOTEOPTIONUNSPECIFIED string = "VOTE_OPTION_UNSPECIFIED"

	// CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0OptionVOTEOPTIONYES captures enum value "VOTE_OPTION_YES"
	CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0OptionVOTEOPTIONYES string = "VOTE_OPTION_YES"

	// CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0OptionVOTEOPTIONABSTAIN captures enum value "VOTE_OPTION_ABSTAIN"
	CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0OptionVOTEOPTIONABSTAIN string = "VOTE_OPTION_ABSTAIN"

	// CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0OptionVOTEOPTIONNO captures enum value "VOTE_OPTION_NO"
	CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0OptionVOTEOPTIONNO string = "VOTE_OPTION_NO"

	// CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0OptionVOTEOPTIONNOWITHVETO captures enum value "VOTE_OPTION_NO_WITH_VETO"
	CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0OptionVOTEOPTIONNOWITHVETO string = "VOTE_OPTION_NO_WITH_VETO"
)

// prop value enum
func (m *CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0) validateOptionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0TypeOptionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0) validateOption(formats strfmt.Registry) error {
	if swag.IsZero(m.Option) { // not required
		return nil
	}

	// value enum
	if err := m.validateOptionEnum("option", "body", m.Option); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cosmos gov v1beta1 query votes response votes items0 options items0 based on context it is used
func (m *CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0) UnmarshalBinary(b []byte) error {
	var res CosmosGovV1beta1QueryVotesResponseVotesItems0OptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
