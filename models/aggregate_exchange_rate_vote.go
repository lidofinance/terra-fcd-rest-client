// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AggregateExchangeRateVote aggregate exchange rate vote
//
// swagger:model AggregateExchangeRateVote
type AggregateExchangeRateVote struct {

	// exchange rates
	ExchangeRates []*AggregateExchangeRateVoteExchangeRatesItems0 `json:"exchange_rates"`

	// bech32 encoded address
	// Example: terravaloper1wg2mlrxdmnnkkykgqg4znky86nyrtc45q7a85l
	Voter string `json:"voter,omitempty"`
}

// Validate validates this aggregate exchange rate vote
func (m *AggregateExchangeRateVote) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExchangeRates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AggregateExchangeRateVote) validateExchangeRates(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeRates) { // not required
		return nil
	}

	for i := 0; i < len(m.ExchangeRates); i++ {
		if swag.IsZero(m.ExchangeRates[i]) { // not required
			continue
		}

		if m.ExchangeRates[i] != nil {
			if err := m.ExchangeRates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exchange_rates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exchange_rates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this aggregate exchange rate vote based on the context it is used
func (m *AggregateExchangeRateVote) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExchangeRates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AggregateExchangeRateVote) contextValidateExchangeRates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExchangeRates); i++ {

		if m.ExchangeRates[i] != nil {
			if err := m.ExchangeRates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exchange_rates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exchange_rates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AggregateExchangeRateVote) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AggregateExchangeRateVote) UnmarshalBinary(b []byte) error {
	var res AggregateExchangeRateVote
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AggregateExchangeRateVoteExchangeRatesItems0 aggregate exchange rate vote exchange rates items0
//
// swagger:model AggregateExchangeRateVoteExchangeRatesItems0
type AggregateExchangeRateVoteExchangeRatesItems0 struct {

	// amount
	// Example: 50.000
	Amount string `json:"amount,omitempty"`

	// denom
	// Example: ukrw
	Denom string `json:"denom,omitempty"`
}

// Validate validates this aggregate exchange rate vote exchange rates items0
func (m *AggregateExchangeRateVoteExchangeRatesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this aggregate exchange rate vote exchange rates items0 based on context it is used
func (m *AggregateExchangeRateVoteExchangeRatesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AggregateExchangeRateVoteExchangeRatesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AggregateExchangeRateVoteExchangeRatesItems0) UnmarshalBinary(b []byte) error {
	var res AggregateExchangeRateVoteExchangeRatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
