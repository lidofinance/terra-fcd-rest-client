// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CosmosStakingV1beta1QueryUnbondingDelegationResponse QueryDelegationResponse is response type for the Query/UnbondingDelegation
// RPC method.
//
// swagger:model cosmos.staking.v1beta1.QueryUnbondingDelegationResponse
type CosmosStakingV1beta1QueryUnbondingDelegationResponse struct {

	// unbond
	Unbond *CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond `json:"unbond,omitempty"`
}

// Validate validates this cosmos staking v1beta1 query unbonding delegation response
func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnbond(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponse) validateUnbond(formats strfmt.Registry) error {
	if swag.IsZero(m.Unbond) { // not required
		return nil
	}

	if m.Unbond != nil {
		if err := m.Unbond.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unbond")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unbond")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cosmos staking v1beta1 query unbonding delegation response based on the context it is used
func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUnbond(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponse) contextValidateUnbond(ctx context.Context, formats strfmt.Registry) error {

	if m.Unbond != nil {
		if err := m.Unbond.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unbond")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unbond")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponse) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1QueryUnbondingDelegationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond UnbondingDelegation stores all of a single delegator's unbonding bonds
// for a single validator in an time-ordered list.
//
// swagger:model CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond
type CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond struct {

	// delegator_address is the bech32-encoded address of the delegator.
	DelegatorAddress string `json:"delegator_address,omitempty"`

	// entries are the unbonding delegation entries.
	Entries []*CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbondEntriesItems0 `json:"entries"`

	// validator_address is the bech32-encoded address of the validator.
	ValidatorAddress string `json:"validator_address,omitempty"`
}

// Validate validates this cosmos staking v1beta1 query unbonding delegation response unbond
func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond) validateEntries(formats strfmt.Registry) error {
	if swag.IsZero(m.Entries) { // not required
		return nil
	}

	for i := 0; i < len(m.Entries); i++ {
		if swag.IsZero(m.Entries[i]) { // not required
			continue
		}

		if m.Entries[i] != nil {
			if err := m.Entries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unbond" + "." + "entries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unbond" + "." + "entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cosmos staking v1beta1 query unbonding delegation response unbond based on the context it is used
func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond) contextValidateEntries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Entries); i++ {

		if m.Entries[i] != nil {
			if err := m.Entries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unbond" + "." + "entries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("unbond" + "." + "entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbondEntriesItems0 UnbondingDelegationEntry defines an unbonding object with relevant metadata.
//
// swagger:model CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbondEntriesItems0
type CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbondEntriesItems0 struct {

	// balance defines the tokens to receive at completion.
	Balance string `json:"balance,omitempty"`

	// completion_time is the unix time for unbonding completion.
	// Format: date-time
	CompletionTime strfmt.DateTime `json:"completion_time,omitempty"`

	// creation_height is the height which the unbonding took place.
	CreationHeight string `json:"creation_height,omitempty"`

	// initial_balance defines the tokens initially scheduled to receive at completion.
	InitialBalance string `json:"initial_balance,omitempty"`
}

// Validate validates this cosmos staking v1beta1 query unbonding delegation response unbond entries items0
func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbondEntriesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletionTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbondEntriesItems0) validateCompletionTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CompletionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("completion_time", "body", "date-time", m.CompletionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cosmos staking v1beta1 query unbonding delegation response unbond entries items0 based on context it is used
func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbondEntriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbondEntriesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbondEntriesItems0) UnmarshalBinary(b []byte) error {
	var res CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbondEntriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
