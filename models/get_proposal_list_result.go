// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetProposalListResult get proposal list result
//
// swagger:model getProposalListResult
type GetProposalListResult struct {

	// Deposit period
	// Required: true
	MaxDepositPeriod *string `json:"maxDepositPeriod"`

	// Minimum deposit minimum proposal deposit
	// Required: true
	MinDeposit []*GetProposalListResultMinDeposit `json:"minDeposit"`

	// proposals
	// Required: true
	Proposals []*GetProposalListResultProposals `json:"proposals"`

	// voting period
	// Required: true
	VotingPeriod *string `json:"votingPeriod"`
}

// Validate validates this get proposal list result
func (m *GetProposalListResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxDepositPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinDeposit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProposals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVotingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetProposalListResult) validateMaxDepositPeriod(formats strfmt.Registry) error {

	if err := validate.Required("maxDepositPeriod", "body", m.MaxDepositPeriod); err != nil {
		return err
	}

	return nil
}

func (m *GetProposalListResult) validateMinDeposit(formats strfmt.Registry) error {

	if err := validate.Required("minDeposit", "body", m.MinDeposit); err != nil {
		return err
	}

	for i := 0; i < len(m.MinDeposit); i++ {
		if swag.IsZero(m.MinDeposit[i]) { // not required
			continue
		}

		if m.MinDeposit[i] != nil {
			if err := m.MinDeposit[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("minDeposit" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("minDeposit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetProposalListResult) validateProposals(formats strfmt.Registry) error {

	if err := validate.Required("proposals", "body", m.Proposals); err != nil {
		return err
	}

	for i := 0; i < len(m.Proposals); i++ {
		if swag.IsZero(m.Proposals[i]) { // not required
			continue
		}

		if m.Proposals[i] != nil {
			if err := m.Proposals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proposals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("proposals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetProposalListResult) validateVotingPeriod(formats strfmt.Registry) error {

	if err := validate.Required("votingPeriod", "body", m.VotingPeriod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get proposal list result based on the context it is used
func (m *GetProposalListResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMinDeposit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProposals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetProposalListResult) contextValidateMinDeposit(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MinDeposit); i++ {

		if m.MinDeposit[i] != nil {
			if err := m.MinDeposit[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("minDeposit" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("minDeposit" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetProposalListResult) contextValidateProposals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Proposals); i++ {

		if m.Proposals[i] != nil {
			if err := m.Proposals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proposals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("proposals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetProposalListResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetProposalListResult) UnmarshalBinary(b []byte) error {
	var res GetProposalListResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
